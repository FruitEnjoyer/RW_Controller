
450-pdep.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ab8  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08007c40  08007c40  00008c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c70  08007c70  000095dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007c70  08007c70  00008c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c78  08007c78  000095dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c78  08007c78  00008c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c7c  08007c7c  00008c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005dc  20000000  08007c80  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000095dc  2**0
                  CONTENTS
 10 .bss          00002434  200005dc  200005dc  000095dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002a10  20002a10  000095dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000095dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015d69  00000000  00000000  0000960c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003aad  00000000  00000000  0001f375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012f8  00000000  00000000  00022e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e99  00000000  00000000  00024120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000232ac  00000000  00000000  00024fb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018f11  00000000  00000000  00048265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d22f8  00000000  00000000  00061176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013346e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000052a4  00000000  00000000  001334b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00138758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200005dc 	.word	0x200005dc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007c28 	.word	0x08007c28

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200005e0 	.word	0x200005e0
 80001c4:	08007c28 	.word	0x08007c28

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__gedf2>:
 8000540:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000544:	e006      	b.n	8000554 <__cmpdf2+0x4>
 8000546:	bf00      	nop

08000548 <__ledf2>:
 8000548:	f04f 0c01 	mov.w	ip, #1
 800054c:	e002      	b.n	8000554 <__cmpdf2+0x4>
 800054e:	bf00      	nop

08000550 <__cmpdf2>:
 8000550:	f04f 0c01 	mov.w	ip, #1
 8000554:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000558:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800055c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000560:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000564:	bf18      	it	ne
 8000566:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800056a:	d01b      	beq.n	80005a4 <__cmpdf2+0x54>
 800056c:	b001      	add	sp, #4
 800056e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000572:	bf0c      	ite	eq
 8000574:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000578:	ea91 0f03 	teqne	r1, r3
 800057c:	bf02      	ittt	eq
 800057e:	ea90 0f02 	teqeq	r0, r2
 8000582:	2000      	moveq	r0, #0
 8000584:	4770      	bxeq	lr
 8000586:	f110 0f00 	cmn.w	r0, #0
 800058a:	ea91 0f03 	teq	r1, r3
 800058e:	bf58      	it	pl
 8000590:	4299      	cmppl	r1, r3
 8000592:	bf08      	it	eq
 8000594:	4290      	cmpeq	r0, r2
 8000596:	bf2c      	ite	cs
 8000598:	17d8      	asrcs	r0, r3, #31
 800059a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800059e:	f040 0001 	orr.w	r0, r0, #1
 80005a2:	4770      	bx	lr
 80005a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005ac:	d102      	bne.n	80005b4 <__cmpdf2+0x64>
 80005ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005b2:	d107      	bne.n	80005c4 <__cmpdf2+0x74>
 80005b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005bc:	d1d6      	bne.n	800056c <__cmpdf2+0x1c>
 80005be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005c2:	d0d3      	beq.n	800056c <__cmpdf2+0x1c>
 80005c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <__aeabi_cdrcmple>:
 80005cc:	4684      	mov	ip, r0
 80005ce:	4610      	mov	r0, r2
 80005d0:	4662      	mov	r2, ip
 80005d2:	468c      	mov	ip, r1
 80005d4:	4619      	mov	r1, r3
 80005d6:	4663      	mov	r3, ip
 80005d8:	e000      	b.n	80005dc <__aeabi_cdcmpeq>
 80005da:	bf00      	nop

080005dc <__aeabi_cdcmpeq>:
 80005dc:	b501      	push	{r0, lr}
 80005de:	f7ff ffb7 	bl	8000550 <__cmpdf2>
 80005e2:	2800      	cmp	r0, #0
 80005e4:	bf48      	it	mi
 80005e6:	f110 0f00 	cmnmi.w	r0, #0
 80005ea:	bd01      	pop	{r0, pc}

080005ec <__aeabi_dcmpeq>:
 80005ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f0:	f7ff fff4 	bl	80005dc <__aeabi_cdcmpeq>
 80005f4:	bf0c      	ite	eq
 80005f6:	2001      	moveq	r0, #1
 80005f8:	2000      	movne	r0, #0
 80005fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fe:	bf00      	nop

08000600 <__aeabi_dcmplt>:
 8000600:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000604:	f7ff ffea 	bl	80005dc <__aeabi_cdcmpeq>
 8000608:	bf34      	ite	cc
 800060a:	2001      	movcc	r0, #1
 800060c:	2000      	movcs	r0, #0
 800060e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000612:	bf00      	nop

08000614 <__aeabi_dcmple>:
 8000614:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000618:	f7ff ffe0 	bl	80005dc <__aeabi_cdcmpeq>
 800061c:	bf94      	ite	ls
 800061e:	2001      	movls	r0, #1
 8000620:	2000      	movhi	r0, #0
 8000622:	f85d fb08 	ldr.w	pc, [sp], #8
 8000626:	bf00      	nop

08000628 <__aeabi_dcmpge>:
 8000628:	f84d ed08 	str.w	lr, [sp, #-8]!
 800062c:	f7ff ffce 	bl	80005cc <__aeabi_cdrcmple>
 8000630:	bf94      	ite	ls
 8000632:	2001      	movls	r0, #1
 8000634:	2000      	movhi	r0, #0
 8000636:	f85d fb08 	ldr.w	pc, [sp], #8
 800063a:	bf00      	nop

0800063c <__aeabi_dcmpgt>:
 800063c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000640:	f7ff ffc4 	bl	80005cc <__aeabi_cdrcmple>
 8000644:	bf34      	ite	cc
 8000646:	2001      	movcc	r0, #1
 8000648:	2000      	movcs	r0, #0
 800064a:	f85d fb08 	ldr.w	pc, [sp], #8
 800064e:	bf00      	nop

08000650 <__aeabi_uldivmod>:
 8000650:	b953      	cbnz	r3, 8000668 <__aeabi_uldivmod+0x18>
 8000652:	b94a      	cbnz	r2, 8000668 <__aeabi_uldivmod+0x18>
 8000654:	2900      	cmp	r1, #0
 8000656:	bf08      	it	eq
 8000658:	2800      	cmpeq	r0, #0
 800065a:	bf1c      	itt	ne
 800065c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000660:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000664:	f000 b96a 	b.w	800093c <__aeabi_idiv0>
 8000668:	f1ad 0c08 	sub.w	ip, sp, #8
 800066c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000670:	f000 f806 	bl	8000680 <__udivmoddi4>
 8000674:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000678:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800067c:	b004      	add	sp, #16
 800067e:	4770      	bx	lr

08000680 <__udivmoddi4>:
 8000680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000684:	9d08      	ldr	r5, [sp, #32]
 8000686:	460c      	mov	r4, r1
 8000688:	2b00      	cmp	r3, #0
 800068a:	d14e      	bne.n	800072a <__udivmoddi4+0xaa>
 800068c:	4694      	mov	ip, r2
 800068e:	458c      	cmp	ip, r1
 8000690:	4686      	mov	lr, r0
 8000692:	fab2 f282 	clz	r2, r2
 8000696:	d962      	bls.n	800075e <__udivmoddi4+0xde>
 8000698:	b14a      	cbz	r2, 80006ae <__udivmoddi4+0x2e>
 800069a:	f1c2 0320 	rsb	r3, r2, #32
 800069e:	4091      	lsls	r1, r2
 80006a0:	fa20 f303 	lsr.w	r3, r0, r3
 80006a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80006a8:	4319      	orrs	r1, r3
 80006aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80006ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006b2:	fa1f f68c 	uxth.w	r6, ip
 80006b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80006ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006be:	fb07 1114 	mls	r1, r7, r4, r1
 80006c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006c6:	fb04 f106 	mul.w	r1, r4, r6
 80006ca:	4299      	cmp	r1, r3
 80006cc:	d90a      	bls.n	80006e4 <__udivmoddi4+0x64>
 80006ce:	eb1c 0303 	adds.w	r3, ip, r3
 80006d2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80006d6:	f080 8112 	bcs.w	80008fe <__udivmoddi4+0x27e>
 80006da:	4299      	cmp	r1, r3
 80006dc:	f240 810f 	bls.w	80008fe <__udivmoddi4+0x27e>
 80006e0:	3c02      	subs	r4, #2
 80006e2:	4463      	add	r3, ip
 80006e4:	1a59      	subs	r1, r3, r1
 80006e6:	fa1f f38e 	uxth.w	r3, lr
 80006ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80006ee:	fb07 1110 	mls	r1, r7, r0, r1
 80006f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006f6:	fb00 f606 	mul.w	r6, r0, r6
 80006fa:	429e      	cmp	r6, r3
 80006fc:	d90a      	bls.n	8000714 <__udivmoddi4+0x94>
 80006fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000702:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000706:	f080 80fc 	bcs.w	8000902 <__udivmoddi4+0x282>
 800070a:	429e      	cmp	r6, r3
 800070c:	f240 80f9 	bls.w	8000902 <__udivmoddi4+0x282>
 8000710:	4463      	add	r3, ip
 8000712:	3802      	subs	r0, #2
 8000714:	1b9b      	subs	r3, r3, r6
 8000716:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800071a:	2100      	movs	r1, #0
 800071c:	b11d      	cbz	r5, 8000726 <__udivmoddi4+0xa6>
 800071e:	40d3      	lsrs	r3, r2
 8000720:	2200      	movs	r2, #0
 8000722:	e9c5 3200 	strd	r3, r2, [r5]
 8000726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800072a:	428b      	cmp	r3, r1
 800072c:	d905      	bls.n	800073a <__udivmoddi4+0xba>
 800072e:	b10d      	cbz	r5, 8000734 <__udivmoddi4+0xb4>
 8000730:	e9c5 0100 	strd	r0, r1, [r5]
 8000734:	2100      	movs	r1, #0
 8000736:	4608      	mov	r0, r1
 8000738:	e7f5      	b.n	8000726 <__udivmoddi4+0xa6>
 800073a:	fab3 f183 	clz	r1, r3
 800073e:	2900      	cmp	r1, #0
 8000740:	d146      	bne.n	80007d0 <__udivmoddi4+0x150>
 8000742:	42a3      	cmp	r3, r4
 8000744:	d302      	bcc.n	800074c <__udivmoddi4+0xcc>
 8000746:	4290      	cmp	r0, r2
 8000748:	f0c0 80f0 	bcc.w	800092c <__udivmoddi4+0x2ac>
 800074c:	1a86      	subs	r6, r0, r2
 800074e:	eb64 0303 	sbc.w	r3, r4, r3
 8000752:	2001      	movs	r0, #1
 8000754:	2d00      	cmp	r5, #0
 8000756:	d0e6      	beq.n	8000726 <__udivmoddi4+0xa6>
 8000758:	e9c5 6300 	strd	r6, r3, [r5]
 800075c:	e7e3      	b.n	8000726 <__udivmoddi4+0xa6>
 800075e:	2a00      	cmp	r2, #0
 8000760:	f040 8090 	bne.w	8000884 <__udivmoddi4+0x204>
 8000764:	eba1 040c 	sub.w	r4, r1, ip
 8000768:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800076c:	fa1f f78c 	uxth.w	r7, ip
 8000770:	2101      	movs	r1, #1
 8000772:	fbb4 f6f8 	udiv	r6, r4, r8
 8000776:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800077a:	fb08 4416 	mls	r4, r8, r6, r4
 800077e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000782:	fb07 f006 	mul.w	r0, r7, r6
 8000786:	4298      	cmp	r0, r3
 8000788:	d908      	bls.n	800079c <__udivmoddi4+0x11c>
 800078a:	eb1c 0303 	adds.w	r3, ip, r3
 800078e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000792:	d202      	bcs.n	800079a <__udivmoddi4+0x11a>
 8000794:	4298      	cmp	r0, r3
 8000796:	f200 80cd 	bhi.w	8000934 <__udivmoddi4+0x2b4>
 800079a:	4626      	mov	r6, r4
 800079c:	1a1c      	subs	r4, r3, r0
 800079e:	fa1f f38e 	uxth.w	r3, lr
 80007a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80007a6:	fb08 4410 	mls	r4, r8, r0, r4
 80007aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007ae:	fb00 f707 	mul.w	r7, r0, r7
 80007b2:	429f      	cmp	r7, r3
 80007b4:	d908      	bls.n	80007c8 <__udivmoddi4+0x148>
 80007b6:	eb1c 0303 	adds.w	r3, ip, r3
 80007ba:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80007be:	d202      	bcs.n	80007c6 <__udivmoddi4+0x146>
 80007c0:	429f      	cmp	r7, r3
 80007c2:	f200 80b0 	bhi.w	8000926 <__udivmoddi4+0x2a6>
 80007c6:	4620      	mov	r0, r4
 80007c8:	1bdb      	subs	r3, r3, r7
 80007ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007ce:	e7a5      	b.n	800071c <__udivmoddi4+0x9c>
 80007d0:	f1c1 0620 	rsb	r6, r1, #32
 80007d4:	408b      	lsls	r3, r1
 80007d6:	fa22 f706 	lsr.w	r7, r2, r6
 80007da:	431f      	orrs	r7, r3
 80007dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80007e0:	fa04 f301 	lsl.w	r3, r4, r1
 80007e4:	ea43 030c 	orr.w	r3, r3, ip
 80007e8:	40f4      	lsrs	r4, r6
 80007ea:	fa00 f801 	lsl.w	r8, r0, r1
 80007ee:	0c38      	lsrs	r0, r7, #16
 80007f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80007f4:	fbb4 fef0 	udiv	lr, r4, r0
 80007f8:	fa1f fc87 	uxth.w	ip, r7
 80007fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000800:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000804:	fb0e f90c 	mul.w	r9, lr, ip
 8000808:	45a1      	cmp	r9, r4
 800080a:	fa02 f201 	lsl.w	r2, r2, r1
 800080e:	d90a      	bls.n	8000826 <__udivmoddi4+0x1a6>
 8000810:	193c      	adds	r4, r7, r4
 8000812:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000816:	f080 8084 	bcs.w	8000922 <__udivmoddi4+0x2a2>
 800081a:	45a1      	cmp	r9, r4
 800081c:	f240 8081 	bls.w	8000922 <__udivmoddi4+0x2a2>
 8000820:	f1ae 0e02 	sub.w	lr, lr, #2
 8000824:	443c      	add	r4, r7
 8000826:	eba4 0409 	sub.w	r4, r4, r9
 800082a:	fa1f f983 	uxth.w	r9, r3
 800082e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000832:	fb00 4413 	mls	r4, r0, r3, r4
 8000836:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800083a:	fb03 fc0c 	mul.w	ip, r3, ip
 800083e:	45a4      	cmp	ip, r4
 8000840:	d907      	bls.n	8000852 <__udivmoddi4+0x1d2>
 8000842:	193c      	adds	r4, r7, r4
 8000844:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000848:	d267      	bcs.n	800091a <__udivmoddi4+0x29a>
 800084a:	45a4      	cmp	ip, r4
 800084c:	d965      	bls.n	800091a <__udivmoddi4+0x29a>
 800084e:	3b02      	subs	r3, #2
 8000850:	443c      	add	r4, r7
 8000852:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000856:	fba0 9302 	umull	r9, r3, r0, r2
 800085a:	eba4 040c 	sub.w	r4, r4, ip
 800085e:	429c      	cmp	r4, r3
 8000860:	46ce      	mov	lr, r9
 8000862:	469c      	mov	ip, r3
 8000864:	d351      	bcc.n	800090a <__udivmoddi4+0x28a>
 8000866:	d04e      	beq.n	8000906 <__udivmoddi4+0x286>
 8000868:	b155      	cbz	r5, 8000880 <__udivmoddi4+0x200>
 800086a:	ebb8 030e 	subs.w	r3, r8, lr
 800086e:	eb64 040c 	sbc.w	r4, r4, ip
 8000872:	fa04 f606 	lsl.w	r6, r4, r6
 8000876:	40cb      	lsrs	r3, r1
 8000878:	431e      	orrs	r6, r3
 800087a:	40cc      	lsrs	r4, r1
 800087c:	e9c5 6400 	strd	r6, r4, [r5]
 8000880:	2100      	movs	r1, #0
 8000882:	e750      	b.n	8000726 <__udivmoddi4+0xa6>
 8000884:	f1c2 0320 	rsb	r3, r2, #32
 8000888:	fa20 f103 	lsr.w	r1, r0, r3
 800088c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000890:	fa24 f303 	lsr.w	r3, r4, r3
 8000894:	4094      	lsls	r4, r2
 8000896:	430c      	orrs	r4, r1
 8000898:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800089c:	fa00 fe02 	lsl.w	lr, r0, r2
 80008a0:	fa1f f78c 	uxth.w	r7, ip
 80008a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80008a8:	fb08 3110 	mls	r1, r8, r0, r3
 80008ac:	0c23      	lsrs	r3, r4, #16
 80008ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008b2:	fb00 f107 	mul.w	r1, r0, r7
 80008b6:	4299      	cmp	r1, r3
 80008b8:	d908      	bls.n	80008cc <__udivmoddi4+0x24c>
 80008ba:	eb1c 0303 	adds.w	r3, ip, r3
 80008be:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80008c2:	d22c      	bcs.n	800091e <__udivmoddi4+0x29e>
 80008c4:	4299      	cmp	r1, r3
 80008c6:	d92a      	bls.n	800091e <__udivmoddi4+0x29e>
 80008c8:	3802      	subs	r0, #2
 80008ca:	4463      	add	r3, ip
 80008cc:	1a5b      	subs	r3, r3, r1
 80008ce:	b2a4      	uxth	r4, r4
 80008d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80008d4:	fb08 3311 	mls	r3, r8, r1, r3
 80008d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008dc:	fb01 f307 	mul.w	r3, r1, r7
 80008e0:	42a3      	cmp	r3, r4
 80008e2:	d908      	bls.n	80008f6 <__udivmoddi4+0x276>
 80008e4:	eb1c 0404 	adds.w	r4, ip, r4
 80008e8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80008ec:	d213      	bcs.n	8000916 <__udivmoddi4+0x296>
 80008ee:	42a3      	cmp	r3, r4
 80008f0:	d911      	bls.n	8000916 <__udivmoddi4+0x296>
 80008f2:	3902      	subs	r1, #2
 80008f4:	4464      	add	r4, ip
 80008f6:	1ae4      	subs	r4, r4, r3
 80008f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80008fc:	e739      	b.n	8000772 <__udivmoddi4+0xf2>
 80008fe:	4604      	mov	r4, r0
 8000900:	e6f0      	b.n	80006e4 <__udivmoddi4+0x64>
 8000902:	4608      	mov	r0, r1
 8000904:	e706      	b.n	8000714 <__udivmoddi4+0x94>
 8000906:	45c8      	cmp	r8, r9
 8000908:	d2ae      	bcs.n	8000868 <__udivmoddi4+0x1e8>
 800090a:	ebb9 0e02 	subs.w	lr, r9, r2
 800090e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000912:	3801      	subs	r0, #1
 8000914:	e7a8      	b.n	8000868 <__udivmoddi4+0x1e8>
 8000916:	4631      	mov	r1, r6
 8000918:	e7ed      	b.n	80008f6 <__udivmoddi4+0x276>
 800091a:	4603      	mov	r3, r0
 800091c:	e799      	b.n	8000852 <__udivmoddi4+0x1d2>
 800091e:	4630      	mov	r0, r6
 8000920:	e7d4      	b.n	80008cc <__udivmoddi4+0x24c>
 8000922:	46d6      	mov	lr, sl
 8000924:	e77f      	b.n	8000826 <__udivmoddi4+0x1a6>
 8000926:	4463      	add	r3, ip
 8000928:	3802      	subs	r0, #2
 800092a:	e74d      	b.n	80007c8 <__udivmoddi4+0x148>
 800092c:	4606      	mov	r6, r0
 800092e:	4623      	mov	r3, r4
 8000930:	4608      	mov	r0, r1
 8000932:	e70f      	b.n	8000754 <__udivmoddi4+0xd4>
 8000934:	3e02      	subs	r6, #2
 8000936:	4463      	add	r3, ip
 8000938:	e730      	b.n	800079c <__udivmoddi4+0x11c>
 800093a:	bf00      	nop

0800093c <__aeabi_idiv0>:
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop

08000940 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000946:	463b      	mov	r3, r7
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000952:	4b28      	ldr	r3, [pc, #160]	@ (80009f4 <MX_ADC1_Init+0xb4>)
 8000954:	4a28      	ldr	r2, [pc, #160]	@ (80009f8 <MX_ADC1_Init+0xb8>)
 8000956:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000958:	4b26      	ldr	r3, [pc, #152]	@ (80009f4 <MX_ADC1_Init+0xb4>)
 800095a:	2200      	movs	r2, #0
 800095c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800095e:	4b25      	ldr	r3, [pc, #148]	@ (80009f4 <MX_ADC1_Init+0xb4>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000964:	4b23      	ldr	r3, [pc, #140]	@ (80009f4 <MX_ADC1_Init+0xb4>)
 8000966:	2201      	movs	r2, #1
 8000968:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800096a:	4b22      	ldr	r3, [pc, #136]	@ (80009f4 <MX_ADC1_Init+0xb4>)
 800096c:	2200      	movs	r2, #0
 800096e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000970:	4b20      	ldr	r3, [pc, #128]	@ (80009f4 <MX_ADC1_Init+0xb4>)
 8000972:	2200      	movs	r2, #0
 8000974:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000978:	4b1e      	ldr	r3, [pc, #120]	@ (80009f4 <MX_ADC1_Init+0xb4>)
 800097a:	2200      	movs	r2, #0
 800097c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800097e:	4b1d      	ldr	r3, [pc, #116]	@ (80009f4 <MX_ADC1_Init+0xb4>)
 8000980:	4a1e      	ldr	r2, [pc, #120]	@ (80009fc <MX_ADC1_Init+0xbc>)
 8000982:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000984:	4b1b      	ldr	r3, [pc, #108]	@ (80009f4 <MX_ADC1_Init+0xb4>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800098a:	4b1a      	ldr	r3, [pc, #104]	@ (80009f4 <MX_ADC1_Init+0xb4>)
 800098c:	2202      	movs	r2, #2
 800098e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000990:	4b18      	ldr	r3, [pc, #96]	@ (80009f4 <MX_ADC1_Init+0xb4>)
 8000992:	2200      	movs	r2, #0
 8000994:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000998:	4b16      	ldr	r3, [pc, #88]	@ (80009f4 <MX_ADC1_Init+0xb4>)
 800099a:	2201      	movs	r2, #1
 800099c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800099e:	4815      	ldr	r0, [pc, #84]	@ (80009f4 <MX_ADC1_Init+0xb4>)
 80009a0:	f002 fbf2 	bl	8003188 <HAL_ADC_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80009aa:	f000 fd31 	bl	8001410 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80009ae:	230d      	movs	r3, #13
 80009b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009b2:	2301      	movs	r3, #1
 80009b4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80009b6:	2302      	movs	r3, #2
 80009b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ba:	463b      	mov	r3, r7
 80009bc:	4619      	mov	r1, r3
 80009be:	480d      	ldr	r0, [pc, #52]	@ (80009f4 <MX_ADC1_Init+0xb4>)
 80009c0:	f002 fef2 	bl	80037a8 <HAL_ADC_ConfigChannel>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80009ca:	f000 fd21 	bl	8001410 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80009ce:	2311      	movs	r3, #17
 80009d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80009d2:	2302      	movs	r3, #2
 80009d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d6:	463b      	mov	r3, r7
 80009d8:	4619      	mov	r1, r3
 80009da:	4806      	ldr	r0, [pc, #24]	@ (80009f4 <MX_ADC1_Init+0xb4>)
 80009dc:	f002 fee4 	bl	80037a8 <HAL_ADC_ConfigChannel>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80009e6:	f000 fd13 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	3710      	adds	r7, #16
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	200005f8 	.word	0x200005f8
 80009f8:	40012000 	.word	0x40012000
 80009fc:	0f000001 	.word	0x0f000001

08000a00 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08a      	sub	sp, #40	@ 0x28
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a28      	ldr	r2, [pc, #160]	@ (8000ac0 <HAL_ADC_MspInit+0xc0>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d149      	bne.n	8000ab6 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	4b27      	ldr	r3, [pc, #156]	@ (8000ac4 <HAL_ADC_MspInit+0xc4>)
 8000a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a2a:	4a26      	ldr	r2, [pc, #152]	@ (8000ac4 <HAL_ADC_MspInit+0xc4>)
 8000a2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a32:	4b24      	ldr	r3, [pc, #144]	@ (8000ac4 <HAL_ADC_MspInit+0xc4>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	4b20      	ldr	r3, [pc, #128]	@ (8000ac4 <HAL_ADC_MspInit+0xc4>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a1f      	ldr	r2, [pc, #124]	@ (8000ac4 <HAL_ADC_MspInit+0xc4>)
 8000a48:	f043 0304 	orr.w	r3, r3, #4
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac4 <HAL_ADC_MspInit+0xc4>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	f003 0304 	and.w	r3, r3, #4
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	4b19      	ldr	r3, [pc, #100]	@ (8000ac4 <HAL_ADC_MspInit+0xc4>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	4a18      	ldr	r2, [pc, #96]	@ (8000ac4 <HAL_ADC_MspInit+0xc4>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6a:	4b16      	ldr	r3, [pc, #88]	@ (8000ac4 <HAL_ADC_MspInit+0xc4>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = INVERTOR_VOLTAGE_Pin;
 8000a76:	2308      	movs	r3, #8
 8000a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(INVERTOR_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4619      	mov	r1, r3
 8000a88:	480f      	ldr	r0, [pc, #60]	@ (8000ac8 <HAL_ADC_MspInit+0xc8>)
 8000a8a:	f004 f8c7 	bl	8004c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = INVERTOR_CURRENT_Pin;
 8000a8e:	2320      	movs	r3, #32
 8000a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a92:	2303      	movs	r3, #3
 8000a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(INVERTOR_CURRENT_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	480a      	ldr	r0, [pc, #40]	@ (8000acc <HAL_ADC_MspInit+0xcc>)
 8000aa2:	f004 f8bb 	bl	8004c1c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2012      	movs	r0, #18
 8000aac:	f003 ff19 	bl	80048e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000ab0:	2012      	movs	r0, #18
 8000ab2:	f003 ff32 	bl	800491a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ab6:	bf00      	nop
 8000ab8:	3728      	adds	r7, #40	@ 0x28
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40012000 	.word	0x40012000
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40020800 	.word	0x40020800
 8000acc:	40020000 	.word	0x40020000

08000ad0 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	@ 0x28
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000ad6:	4b26      	ldr	r3, [pc, #152]	@ (8000b70 <MX_CAN1_Init+0xa0>)
 8000ad8:	4a26      	ldr	r2, [pc, #152]	@ (8000b74 <MX_CAN1_Init+0xa4>)
 8000ada:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 24;
 8000adc:	4b24      	ldr	r3, [pc, #144]	@ (8000b70 <MX_CAN1_Init+0xa0>)
 8000ade:	2218      	movs	r2, #24
 8000ae0:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ae2:	4b23      	ldr	r3, [pc, #140]	@ (8000b70 <MX_CAN1_Init+0xa0>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ae8:	4b21      	ldr	r3, [pc, #132]	@ (8000b70 <MX_CAN1_Init+0xa0>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000aee:	4b20      	ldr	r3, [pc, #128]	@ (8000b70 <MX_CAN1_Init+0xa0>)
 8000af0:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000af4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000af6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b70 <MX_CAN1_Init+0xa0>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000afc:	4b1c      	ldr	r3, [pc, #112]	@ (8000b70 <MX_CAN1_Init+0xa0>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000b02:	4b1b      	ldr	r3, [pc, #108]	@ (8000b70 <MX_CAN1_Init+0xa0>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8000b08:	4b19      	ldr	r3, [pc, #100]	@ (8000b70 <MX_CAN1_Init+0xa0>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000b0e:	4b18      	ldr	r3, [pc, #96]	@ (8000b70 <MX_CAN1_Init+0xa0>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000b14:	4b16      	ldr	r3, [pc, #88]	@ (8000b70 <MX_CAN1_Init+0xa0>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000b1a:	4b15      	ldr	r3, [pc, #84]	@ (8000b70 <MX_CAN1_Init+0xa0>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000b20:	4813      	ldr	r0, [pc, #76]	@ (8000b70 <MX_CAN1_Init+0xa0>)
 8000b22:	f003 f869 	bl	8003bf8 <HAL_CAN_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000b2c:	f000 fc70 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000b40:	2300      	movs	r3, #0
 8000b42:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000b44:	2300      	movs	r3, #0
 8000b46:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8000b50:	2301      	movs	r3, #1
 8000b52:	623b      	str	r3, [r7, #32]
  //sFilterConfig.SlaveStartFilterBank = 14;

  if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000b54:	463b      	mov	r3, r7
 8000b56:	4619      	mov	r1, r3
 8000b58:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <MX_CAN1_Init+0xa0>)
 8000b5a:	f003 f949 	bl	8003df0 <HAL_CAN_ConfigFilter>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_CAN1_Init+0x98>
  {
  Error_Handler();
 8000b64:	f000 fc54 	bl	8001410 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	3728      	adds	r7, #40	@ 0x28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000640 	.word	0x20000640
 8000b74:	40006400 	.word	0x40006400

08000b78 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000b7c:	4b17      	ldr	r3, [pc, #92]	@ (8000bdc <MX_CAN2_Init+0x64>)
 8000b7e:	4a18      	ldr	r2, [pc, #96]	@ (8000be0 <MX_CAN2_Init+0x68>)
 8000b80:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 24;
 8000b82:	4b16      	ldr	r3, [pc, #88]	@ (8000bdc <MX_CAN2_Init+0x64>)
 8000b84:	2218      	movs	r2, #24
 8000b86:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000b88:	4b14      	ldr	r3, [pc, #80]	@ (8000bdc <MX_CAN2_Init+0x64>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b8e:	4b13      	ldr	r3, [pc, #76]	@ (8000bdc <MX_CAN2_Init+0x64>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000b94:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <MX_CAN2_Init+0x64>)
 8000b96:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000b9a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bdc <MX_CAN2_Init+0x64>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bdc <MX_CAN2_Init+0x64>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bdc <MX_CAN2_Init+0x64>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	@ (8000bdc <MX_CAN2_Init+0x64>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	@ (8000bdc <MX_CAN2_Init+0x64>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000bba:	4b08      	ldr	r3, [pc, #32]	@ (8000bdc <MX_CAN2_Init+0x64>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <MX_CAN2_Init+0x64>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000bc6:	4805      	ldr	r0, [pc, #20]	@ (8000bdc <MX_CAN2_Init+0x64>)
 8000bc8:	f003 f816 	bl	8003bf8 <HAL_CAN_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8000bd2:	f000 fc1d 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000668 	.word	0x20000668
 8000be0:	40006800 	.word	0x40006800

08000be4 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08c      	sub	sp, #48	@ 0x30
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a56      	ldr	r2, [pc, #344]	@ (8000d5c <HAL_CAN_MspInit+0x178>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d146      	bne.n	8000c94 <HAL_CAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000c06:	4b56      	ldr	r3, [pc, #344]	@ (8000d60 <HAL_CAN_MspInit+0x17c>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	4a54      	ldr	r2, [pc, #336]	@ (8000d60 <HAL_CAN_MspInit+0x17c>)
 8000c0e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000c10:	4b53      	ldr	r3, [pc, #332]	@ (8000d60 <HAL_CAN_MspInit+0x17c>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d10d      	bne.n	8000c34 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61bb      	str	r3, [r7, #24]
 8000c1c:	4b51      	ldr	r3, [pc, #324]	@ (8000d64 <HAL_CAN_MspInit+0x180>)
 8000c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c20:	4a50      	ldr	r2, [pc, #320]	@ (8000d64 <HAL_CAN_MspInit+0x180>)
 8000c22:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c28:	4b4e      	ldr	r3, [pc, #312]	@ (8000d64 <HAL_CAN_MspInit+0x180>)
 8000c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c30:	61bb      	str	r3, [r7, #24]
 8000c32:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
 8000c38:	4b4a      	ldr	r3, [pc, #296]	@ (8000d64 <HAL_CAN_MspInit+0x180>)
 8000c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3c:	4a49      	ldr	r2, [pc, #292]	@ (8000d64 <HAL_CAN_MspInit+0x180>)
 8000c3e:	f043 0301 	orr.w	r3, r3, #1
 8000c42:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c44:	4b47      	ldr	r3, [pc, #284]	@ (8000d64 <HAL_CAN_MspInit+0x180>)
 8000c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	617b      	str	r3, [r7, #20]
 8000c4e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c50:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c62:	2309      	movs	r3, #9
 8000c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	483e      	ldr	r0, [pc, #248]	@ (8000d68 <HAL_CAN_MspInit+0x184>)
 8000c6e:	f003 ffd5 	bl	8004c1c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2105      	movs	r1, #5
 8000c76:	2014      	movs	r0, #20
 8000c78:	f003 fe33 	bl	80048e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000c7c:	2014      	movs	r0, #20
 8000c7e:	f003 fe4c 	bl	800491a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2100      	movs	r1, #0
 8000c86:	2016      	movs	r0, #22
 8000c88:	f003 fe2b 	bl	80048e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000c8c:	2016      	movs	r0, #22
 8000c8e:	f003 fe44 	bl	800491a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000c92:	e05f      	b.n	8000d54 <HAL_CAN_MspInit+0x170>
  else if(canHandle->Instance==CAN2)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a34      	ldr	r2, [pc, #208]	@ (8000d6c <HAL_CAN_MspInit+0x188>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d15a      	bne.n	8000d54 <HAL_CAN_MspInit+0x170>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	4b30      	ldr	r3, [pc, #192]	@ (8000d64 <HAL_CAN_MspInit+0x180>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca6:	4a2f      	ldr	r2, [pc, #188]	@ (8000d64 <HAL_CAN_MspInit+0x180>)
 8000ca8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000cac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cae:	4b2d      	ldr	r3, [pc, #180]	@ (8000d64 <HAL_CAN_MspInit+0x180>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000cba:	4b29      	ldr	r3, [pc, #164]	@ (8000d60 <HAL_CAN_MspInit+0x17c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	4a27      	ldr	r2, [pc, #156]	@ (8000d60 <HAL_CAN_MspInit+0x17c>)
 8000cc2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000cc4:	4b26      	ldr	r3, [pc, #152]	@ (8000d60 <HAL_CAN_MspInit+0x17c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d10d      	bne.n	8000ce8 <HAL_CAN_MspInit+0x104>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	4b24      	ldr	r3, [pc, #144]	@ (8000d64 <HAL_CAN_MspInit+0x180>)
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd4:	4a23      	ldr	r2, [pc, #140]	@ (8000d64 <HAL_CAN_MspInit+0x180>)
 8000cd6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cda:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cdc:	4b21      	ldr	r3, [pc, #132]	@ (8000d64 <HAL_CAN_MspInit+0x180>)
 8000cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	4b1d      	ldr	r3, [pc, #116]	@ (8000d64 <HAL_CAN_MspInit+0x180>)
 8000cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf0:	4a1c      	ldr	r2, [pc, #112]	@ (8000d64 <HAL_CAN_MspInit+0x180>)
 8000cf2:	f043 0302 	orr.w	r3, r3, #2
 8000cf6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d64 <HAL_CAN_MspInit+0x180>)
 8000cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfc:	f003 0302 	and.w	r3, r3, #2
 8000d00:	60bb      	str	r3, [r7, #8]
 8000d02:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000d04:	2360      	movs	r3, #96	@ 0x60
 8000d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d10:	2303      	movs	r3, #3
 8000d12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000d14:	2309      	movs	r3, #9
 8000d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d18:	f107 031c 	add.w	r3, r7, #28
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4814      	ldr	r0, [pc, #80]	@ (8000d70 <HAL_CAN_MspInit+0x18c>)
 8000d20:	f003 ff7c 	bl	8004c1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2100      	movs	r1, #0
 8000d28:	203f      	movs	r0, #63	@ 0x3f
 8000d2a:	f003 fdda 	bl	80048e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8000d2e:	203f      	movs	r0, #63	@ 0x3f
 8000d30:	f003 fdf3 	bl	800491a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8000d34:	2200      	movs	r2, #0
 8000d36:	2100      	movs	r1, #0
 8000d38:	2040      	movs	r0, #64	@ 0x40
 8000d3a:	f003 fdd2 	bl	80048e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000d3e:	2040      	movs	r0, #64	@ 0x40
 8000d40:	f003 fdeb 	bl	800491a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2100      	movs	r1, #0
 8000d48:	2041      	movs	r0, #65	@ 0x41
 8000d4a:	f003 fdca 	bl	80048e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8000d4e:	2041      	movs	r0, #65	@ 0x41
 8000d50:	f003 fde3 	bl	800491a <HAL_NVIC_EnableIRQ>
}
 8000d54:	bf00      	nop
 8000d56:	3730      	adds	r7, #48	@ 0x30
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40006400 	.word	0x40006400
 8000d60:	20000690 	.word	0x20000690
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020000 	.word	0x40020000
 8000d6c:	40006800 	.word	0x40006800
 8000d70:	40020400 	.word	0x40020400

08000d74 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000d82:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc0 <MX_DAC_Init+0x4c>)
 8000d84:	4a0f      	ldr	r2, [pc, #60]	@ (8000dc4 <MX_DAC_Init+0x50>)
 8000d86:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000d88:	480d      	ldr	r0, [pc, #52]	@ (8000dc0 <MX_DAC_Init+0x4c>)
 8000d8a:	f003 fde0 	bl	800494e <HAL_DAC_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000d94:	f000 fb3c 	bl	8001410 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000da0:	463b      	mov	r3, r7
 8000da2:	2200      	movs	r2, #0
 8000da4:	4619      	mov	r1, r3
 8000da6:	4806      	ldr	r0, [pc, #24]	@ (8000dc0 <MX_DAC_Init+0x4c>)
 8000da8:	f003 fed4 	bl	8004b54 <HAL_DAC_ConfigChannel>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000db2:	f000 fb2d 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000694 	.word	0x20000694
 8000dc4:	40007400 	.word	0x40007400

08000dc8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	@ 0x28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a1b      	ldr	r2, [pc, #108]	@ (8000e54 <HAL_DAC_MspInit+0x8c>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d12f      	bne.n	8000e4a <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	4b1a      	ldr	r3, [pc, #104]	@ (8000e58 <HAL_DAC_MspInit+0x90>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df2:	4a19      	ldr	r2, [pc, #100]	@ (8000e58 <HAL_DAC_MspInit+0x90>)
 8000df4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000df8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dfa:	4b17      	ldr	r3, [pc, #92]	@ (8000e58 <HAL_DAC_MspInit+0x90>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	4b13      	ldr	r3, [pc, #76]	@ (8000e58 <HAL_DAC_MspInit+0x90>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0e:	4a12      	ldr	r2, [pc, #72]	@ (8000e58 <HAL_DAC_MspInit+0x90>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e16:	4b10      	ldr	r3, [pc, #64]	@ (8000e58 <HAL_DAC_MspInit+0x90>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = VOLTAGE_CONTROL_Pin;
 8000e22:	2310      	movs	r3, #16
 8000e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e26:	2303      	movs	r3, #3
 8000e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VOLTAGE_CONTROL_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	4809      	ldr	r0, [pc, #36]	@ (8000e5c <HAL_DAC_MspInit+0x94>)
 8000e36:	f003 fef1 	bl	8004c1c <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2036      	movs	r0, #54	@ 0x36
 8000e40:	f003 fd4f 	bl	80048e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e44:	2036      	movs	r0, #54	@ 0x36
 8000e46:	f003 fd68 	bl	800491a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	3728      	adds	r7, #40	@ 0x28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40007400 	.word	0x40007400
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020000 	.word	0x40020000

08000e60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08a      	sub	sp, #40	@ 0x28
 8000e64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
 8000e74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	4b46      	ldr	r3, [pc, #280]	@ (8000f94 <MX_GPIO_Init+0x134>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	4a45      	ldr	r2, [pc, #276]	@ (8000f94 <MX_GPIO_Init+0x134>)
 8000e80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e86:	4b43      	ldr	r3, [pc, #268]	@ (8000f94 <MX_GPIO_Init+0x134>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	4b3f      	ldr	r3, [pc, #252]	@ (8000f94 <MX_GPIO_Init+0x134>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	4a3e      	ldr	r2, [pc, #248]	@ (8000f94 <MX_GPIO_Init+0x134>)
 8000e9c:	f043 0304 	orr.w	r3, r3, #4
 8000ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea2:	4b3c      	ldr	r3, [pc, #240]	@ (8000f94 <MX_GPIO_Init+0x134>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	f003 0304 	and.w	r3, r3, #4
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	4b38      	ldr	r3, [pc, #224]	@ (8000f94 <MX_GPIO_Init+0x134>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	4a37      	ldr	r2, [pc, #220]	@ (8000f94 <MX_GPIO_Init+0x134>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ebe:	4b35      	ldr	r3, [pc, #212]	@ (8000f94 <MX_GPIO_Init+0x134>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	4b31      	ldr	r3, [pc, #196]	@ (8000f94 <MX_GPIO_Init+0x134>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	4a30      	ldr	r2, [pc, #192]	@ (8000f94 <MX_GPIO_Init+0x134>)
 8000ed4:	f043 0302 	orr.w	r3, r3, #2
 8000ed8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eda:	4b2e      	ldr	r3, [pc, #184]	@ (8000f94 <MX_GPIO_Init+0x134>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	603b      	str	r3, [r7, #0]
 8000eea:	4b2a      	ldr	r3, [pc, #168]	@ (8000f94 <MX_GPIO_Init+0x134>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eee:	4a29      	ldr	r2, [pc, #164]	@ (8000f94 <MX_GPIO_Init+0x134>)
 8000ef0:	f043 0308 	orr.w	r3, r3, #8
 8000ef4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef6:	4b27      	ldr	r3, [pc, #156]	@ (8000f94 <MX_GPIO_Init+0x134>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efa:	f003 0308 	and.w	r3, r3, #8
 8000efe:	603b      	str	r3, [r7, #0]
 8000f00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TEST_Pin|PON_Pin|CAN2_SHTDN_Pin|MOT_EN_Pin, GPIO_PIN_RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	f241 0198 	movw	r1, #4248	@ 0x1098
 8000f08:	4823      	ldr	r0, [pc, #140]	@ (8000f98 <MX_GPIO_Init+0x138>)
 8000f0a:	f004 f823 	bl	8004f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CAN1_S_Pin|CAN2_S_Pin|CAN1_SHTDN_Pin|CAN_EN_Pin, GPIO_PIN_RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f44f 4107 	mov.w	r1, #34560	@ 0x8700
 8000f14:	4821      	ldr	r0, [pc, #132]	@ (8000f9c <MX_GPIO_Init+0x13c>)
 8000f16:	f004 f81d 	bl	8004f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TEST_Pin */
  GPIO_InitStruct.Pin = TEST_Pin;
 8000f1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f20:	2301      	movs	r3, #1
 8000f22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	4619      	mov	r1, r3
 8000f32:	4819      	ldr	r0, [pc, #100]	@ (8000f98 <MX_GPIO_Init+0x138>)
 8000f34:	f003 fe72 	bl	8004c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : CAN1_S_Pin CAN2_S_Pin CAN1_SHTDN_Pin CAN_EN_Pin */
  GPIO_InitStruct.Pin = CAN1_S_Pin|CAN2_S_Pin|CAN1_SHTDN_Pin|CAN_EN_Pin;
 8000f38:	f44f 4307 	mov.w	r3, #34560	@ 0x8700
 8000f3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2300      	movs	r3, #0
 8000f48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4812      	ldr	r0, [pc, #72]	@ (8000f9c <MX_GPIO_Init+0x13c>)
 8000f52:	f003 fe63 	bl	8004c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG_Pin */
  GPIO_InitStruct.Pin = PG_Pin;
 8000f56:	2304      	movs	r3, #4
 8000f58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PG_GPIO_Port, &GPIO_InitStruct);
 8000f62:	f107 0314 	add.w	r3, r7, #20
 8000f66:	4619      	mov	r1, r3
 8000f68:	480d      	ldr	r0, [pc, #52]	@ (8000fa0 <MX_GPIO_Init+0x140>)
 8000f6a:	f003 fe57 	bl	8004c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PON_Pin CAN2_SHTDN_Pin MOT_EN_Pin */
  GPIO_InitStruct.Pin = PON_Pin|CAN2_SHTDN_Pin|MOT_EN_Pin;
 8000f6e:	2398      	movs	r3, #152	@ 0x98
 8000f70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f72:	2301      	movs	r3, #1
 8000f74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	4619      	mov	r1, r3
 8000f84:	4804      	ldr	r0, [pc, #16]	@ (8000f98 <MX_GPIO_Init+0x138>)
 8000f86:	f003 fe49 	bl	8004c1c <HAL_GPIO_Init>

}
 8000f8a:	bf00      	nop
 8000f8c:	3728      	adds	r7, #40	@ 0x28
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40020400 	.word	0x40020400
 8000f9c:	40020000 	.word	0x40020000
 8000fa0:	40020c00 	.word	0x40020c00

08000fa4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fa8:	4b12      	ldr	r3, [pc, #72]	@ (8000ff4 <MX_I2C1_Init+0x50>)
 8000faa:	4a13      	ldr	r2, [pc, #76]	@ (8000ff8 <MX_I2C1_Init+0x54>)
 8000fac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fae:	4b11      	ldr	r3, [pc, #68]	@ (8000ff4 <MX_I2C1_Init+0x50>)
 8000fb0:	4a12      	ldr	r2, [pc, #72]	@ (8000ffc <MX_I2C1_Init+0x58>)
 8000fb2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff4 <MX_I2C1_Init+0x50>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff4 <MX_I2C1_Init+0x50>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff4 <MX_I2C1_Init+0x50>)
 8000fc2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fc6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff4 <MX_I2C1_Init+0x50>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fce:	4b09      	ldr	r3, [pc, #36]	@ (8000ff4 <MX_I2C1_Init+0x50>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fd4:	4b07      	ldr	r3, [pc, #28]	@ (8000ff4 <MX_I2C1_Init+0x50>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fda:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <MX_I2C1_Init+0x50>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fe0:	4804      	ldr	r0, [pc, #16]	@ (8000ff4 <MX_I2C1_Init+0x50>)
 8000fe2:	f003 ffd1 	bl	8004f88 <HAL_I2C_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fec:	f000 fa10 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	200006a8 	.word	0x200006a8
 8000ff8:	40005400 	.word	0x40005400
 8000ffc:	000186a0 	.word	0x000186a0

08001000 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	@ 0x28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a19      	ldr	r2, [pc, #100]	@ (8001084 <HAL_I2C_MspInit+0x84>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d12c      	bne.n	800107c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	4b18      	ldr	r3, [pc, #96]	@ (8001088 <HAL_I2C_MspInit+0x88>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102a:	4a17      	ldr	r2, [pc, #92]	@ (8001088 <HAL_I2C_MspInit+0x88>)
 800102c:	f043 0302 	orr.w	r3, r3, #2
 8001030:	6313      	str	r3, [r2, #48]	@ 0x30
 8001032:	4b15      	ldr	r3, [pc, #84]	@ (8001088 <HAL_I2C_MspInit+0x88>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800103e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001044:	2312      	movs	r3, #18
 8001046:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104c:	2303      	movs	r3, #3
 800104e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001050:	2304      	movs	r3, #4
 8001052:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4619      	mov	r1, r3
 800105a:	480c      	ldr	r0, [pc, #48]	@ (800108c <HAL_I2C_MspInit+0x8c>)
 800105c:	f003 fdde 	bl	8004c1c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	4b08      	ldr	r3, [pc, #32]	@ (8001088 <HAL_I2C_MspInit+0x88>)
 8001066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001068:	4a07      	ldr	r2, [pc, #28]	@ (8001088 <HAL_I2C_MspInit+0x88>)
 800106a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800106e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001070:	4b05      	ldr	r3, [pc, #20]	@ (8001088 <HAL_I2C_MspInit+0x88>)
 8001072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001074:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800107c:	bf00      	nop
 800107e:	3728      	adds	r7, #40	@ 0x28
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40005400 	.word	0x40005400
 8001088:	40023800 	.word	0x40023800
 800108c:	40020400 	.word	0x40020400

08001090 <HAL_CAN_RxFifo0MsgPendingCallback>:
can_float_t can_acc;
can_float_t can_spd;
int8_t acc = 0;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
    if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8001098:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 800109a:	4a12      	ldr	r2, [pc, #72]	@ (80010e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 800109c:	2100      	movs	r1, #0
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f002 ffca 	bl	8004038 <HAL_CAN_GetRxMessage>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d115      	bne.n	80010d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x46>
    {
        for(uint8_t i = 0; i < 4; i++)
 80010aa:	2300      	movs	r3, #0
 80010ac:	73fb      	strb	r3, [r7, #15]
 80010ae:	e008      	b.n	80010c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
        {
            can_spd.b[i] = RxData[i];
 80010b0:	7bfa      	ldrb	r2, [r7, #15]
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	490a      	ldr	r1, [pc, #40]	@ (80010e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 80010b6:	5c89      	ldrb	r1, [r1, r2]
 80010b8:	4a0b      	ldr	r2, [pc, #44]	@ (80010e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80010ba:	54d1      	strb	r1, [r2, r3]
        for(uint8_t i = 0; i < 4; i++)
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	3301      	adds	r3, #1
 80010c0:	73fb      	strb	r3, [r7, #15]
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	2b03      	cmp	r3, #3
 80010c6:	d9f3      	bls.n	80010b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
        }
        TrajCtrl_ReachTargetSpeed(can_spd.f);
 80010c8:	4b07      	ldr	r3, [pc, #28]	@ (80010e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80010ca:	edd3 7a00 	vldr	s15, [r3]
 80010ce:	eeb0 0a67 	vmov.f32	s0, s15
 80010d2:	f001 f8e1 	bl	8002298 <TrajCtrl_ReachTargetSpeed>
    }
}
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000738 	.word	0x20000738
 80010e4:	20000714 	.word	0x20000714
 80010e8:	20000784 	.word	0x20000784

080010ec <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
    uint32_t er = HAL_CAN_GetError(hcan);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f003 fb0c 	bl	8004712 <HAL_CAN_GetError>
 80010fa:	60f8      	str	r0, [r7, #12]
    can_errors[can_errors_count] = er;
 80010fc:	4b0b      	ldr	r3, [pc, #44]	@ (800112c <HAL_CAN_ErrorCallback+0x40>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	4619      	mov	r1, r3
 8001102:	4a0b      	ldr	r2, [pc, #44]	@ (8001130 <HAL_CAN_ErrorCallback+0x44>)
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    can_errors_count += 1;
 800110a:	4b08      	ldr	r3, [pc, #32]	@ (800112c <HAL_CAN_ErrorCallback+0x40>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	3301      	adds	r3, #1
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4b06      	ldr	r3, [pc, #24]	@ (800112c <HAL_CAN_ErrorCallback+0x40>)
 8001114:	701a      	strb	r2, [r3, #0]
    can_errors_count %= 16;
 8001116:	4b05      	ldr	r3, [pc, #20]	@ (800112c <HAL_CAN_ErrorCallback+0x40>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	f003 030f 	and.w	r3, r3, #15
 800111e:	b2da      	uxtb	r2, r3
 8001120:	4b02      	ldr	r3, [pc, #8]	@ (800112c <HAL_CAN_ErrorCallback+0x40>)
 8001122:	701a      	strb	r2, [r3, #0]
}
 8001124:	bf00      	nop
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000740 	.word	0x20000740
 8001130:	20000744 	.word	0x20000744

08001134 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800113a:	f001 ffb3 	bl	80030a4 <HAL_Init>
  /* USER CODE BEGIN Init */
  
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800113e:	f000 f8fd 	bl	800133c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001142:	f7ff fe8d 	bl	8000e60 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001146:	f7ff fcc3 	bl	8000ad0 <MX_CAN1_Init>
  MX_CAN2_Init();
 800114a:	f7ff fd15 	bl	8000b78 <MX_CAN2_Init>
  MX_I2C1_Init();
 800114e:	f7ff ff29 	bl	8000fa4 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001152:	f7ff fbf5 	bl	8000940 <MX_ADC1_Init>
  MX_DAC_Init();
 8001156:	f7ff fe0d 	bl	8000d74 <MX_DAC_Init>
  MX_TIM8_Init();
 800115a:	f000 fe99 	bl	8001e90 <MX_TIM8_Init>
  MX_TIM5_Init();
 800115e:	f000 fe13 	bl	8001d88 <MX_TIM5_Init>
  MX_TIM6_Init();
 8001162:	f000 fe5f 	bl	8001e24 <MX_TIM6_Init>
  MX_TIM2_Init();
 8001166:	f000 fd89 	bl	8001c7c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
#ifdef USE_MOTOR
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800116a:	2100      	movs	r1, #0
 800116c:	4864      	ldr	r0, [pc, #400]	@ (8001300 <main+0x1cc>)
 800116e:	f004 fef3 	bl	8005f58 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8001172:	2104      	movs	r1, #4
 8001174:	4862      	ldr	r0, [pc, #392]	@ (8001300 <main+0x1cc>)
 8001176:	f004 feef 	bl	8005f58 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 800117a:	2108      	movs	r1, #8
 800117c:	4860      	ldr	r0, [pc, #384]	@ (8001300 <main+0x1cc>)
 800117e:	f004 feeb 	bl	8005f58 <HAL_TIM_IC_Start_IT>

  VoltageControl_MotorHallEnable();  // Подать питание на LTC3130 и датчики Холла
 8001182:	2201      	movs	r2, #1
 8001184:	2180      	movs	r1, #128	@ 0x80
 8001186:	485f      	ldr	r0, [pc, #380]	@ (8001304 <main+0x1d0>)
 8001188:	f003 fee4 	bl	8004f54 <HAL_GPIO_WritePin>
  VoltageControl_Start();        // Старт контроля напряжения на выходе LTC3130
 800118c:	f001 fe90 	bl	8002eb0 <VoltageControl_Start>
  RotationControl_Init();        // Включить вращение маховика
 8001190:	f000 f97c 	bl	800148c <RotationControl_Init>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8001194:	2300      	movs	r3, #0
 8001196:	2200      	movs	r2, #0
 8001198:	2100      	movs	r1, #0
 800119a:	485b      	ldr	r0, [pc, #364]	@ (8001308 <main+0x1d4>)
 800119c:	f003 fca6 	bl	8004aec <HAL_DAC_SetValue>
#endif
#ifdef USE_CAN
  // Включение питания трансиверов
  // FIXME: для включения на 484 RESET, на 450 SET
  HAL_GPIO_WritePin(CAN_EN_GPIO_Port, CAN_EN_Pin, GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011a6:	4859      	ldr	r0, [pc, #356]	@ (800130c <main+0x1d8>)
 80011a8:	f003 fed4 	bl	8004f54 <HAL_GPIO_WritePin>
  TxHeader.StdId = 0x0378;
 80011ac:	4b58      	ldr	r3, [pc, #352]	@ (8001310 <main+0x1dc>)
 80011ae:	f44f 725e 	mov.w	r2, #888	@ 0x378
 80011b2:	601a      	str	r2, [r3, #0]
  TxHeader.ExtId = 0;
 80011b4:	4b56      	ldr	r3, [pc, #344]	@ (8001310 <main+0x1dc>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	605a      	str	r2, [r3, #4]
  TxHeader.RTR = CAN_RTR_DATA; //CAN_RTR_REMOTE
 80011ba:	4b55      	ldr	r3, [pc, #340]	@ (8001310 <main+0x1dc>)
 80011bc:	2200      	movs	r2, #0
 80011be:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;   // CAN_ID_EXT
 80011c0:	4b53      	ldr	r3, [pc, #332]	@ (8001310 <main+0x1dc>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 8;
 80011c6:	4b52      	ldr	r3, [pc, #328]	@ (8001310 <main+0x1dc>)
 80011c8:	2208      	movs	r2, #8
 80011ca:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = 0;
 80011cc:	4b50      	ldr	r3, [pc, #320]	@ (8001310 <main+0x1dc>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	751a      	strb	r2, [r3, #20]

  for(uint8_t i = 0; i < 8; i++)
 80011d2:	2300      	movs	r3, #0
 80011d4:	71fb      	strb	r3, [r7, #7]
 80011d6:	e008      	b.n	80011ea <main+0xb6>
  {
      TxData[i] = (i + 10);
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	79fa      	ldrb	r2, [r7, #7]
 80011dc:	320a      	adds	r2, #10
 80011de:	b2d1      	uxtb	r1, r2
 80011e0:	4a4c      	ldr	r2, [pc, #304]	@ (8001314 <main+0x1e0>)
 80011e2:	54d1      	strb	r1, [r2, r3]
  for(uint8_t i = 0; i < 8; i++)
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	3301      	adds	r3, #1
 80011e8:	71fb      	strb	r3, [r7, #7]
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	2b07      	cmp	r3, #7
 80011ee:	d9f3      	bls.n	80011d8 <main+0xa4>
  }

  HAL_CAN_Start(&hcan1);
 80011f0:	4849      	ldr	r0, [pc, #292]	@ (8001318 <main+0x1e4>)
 80011f2:	f002 fedd 	bl	8003fb0 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_ERROR | CAN_IT_BUSOFF | CAN_IT_LAST_ERROR_CODE);
 80011f6:	f648 4102 	movw	r1, #35842	@ 0x8c02
 80011fa:	4847      	ldr	r0, [pc, #284]	@ (8001318 <main+0x1e4>)
 80011fc:	f003 f83e 	bl	800427c <HAL_CAN_ActivateNotification>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
#ifdef USE_MOTOR
    if(flag_speed != 0)
 8001200:	4b46      	ldr	r3, [pc, #280]	@ (800131c <main+0x1e8>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d009      	beq.n	800121c <main+0xe8>
    {
       TrajCtrl_ReachTargetSpeed(target_speed);
 8001208:	4b45      	ldr	r3, [pc, #276]	@ (8001320 <main+0x1ec>)
 800120a:	edd3 7a00 	vldr	s15, [r3]
 800120e:	eeb0 0a67 	vmov.f32	s0, s15
 8001212:	f001 f841 	bl	8002298 <TrajCtrl_ReachTargetSpeed>
       flag_speed = 0;
 8001216:	4b41      	ldr	r3, [pc, #260]	@ (800131c <main+0x1e8>)
 8001218:	2200      	movs	r2, #0
 800121a:	701a      	strb	r2, [r3, #0]
    }
    if(flag_acceleration != 0)
 800121c:	4b41      	ldr	r3, [pc, #260]	@ (8001324 <main+0x1f0>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d009      	beq.n	8001238 <main+0x104>
    {
       TrajCtrl_KeepAcceleration(target_acceleration);
 8001224:	4b40      	ldr	r3, [pc, #256]	@ (8001328 <main+0x1f4>)
 8001226:	edd3 7a00 	vldr	s15, [r3]
 800122a:	eeb0 0a67 	vmov.f32	s0, s15
 800122e:	f001 fa63 	bl	80026f8 <TrajCtrl_KeepAcceleration>
       flag_acceleration = 0;
 8001232:	4b3c      	ldr	r3, [pc, #240]	@ (8001324 <main+0x1f0>)
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]
    }
    if(flag_volt != 0)
 8001238:	4b3c      	ldr	r3, [pc, #240]	@ (800132c <main+0x1f8>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d009      	beq.n	8001254 <main+0x120>
    {
       HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, target_dac);
 8001240:	4b3b      	ldr	r3, [pc, #236]	@ (8001330 <main+0x1fc>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2200      	movs	r2, #0
 8001246:	2100      	movs	r1, #0
 8001248:	482f      	ldr	r0, [pc, #188]	@ (8001308 <main+0x1d4>)
 800124a:	f003 fc4f 	bl	8004aec <HAL_DAC_SetValue>
       flag_volt = 0;
 800124e:	4b37      	ldr	r3, [pc, #220]	@ (800132c <main+0x1f8>)
 8001250:	2200      	movs	r2, #0
 8001252:	701a      	strb	r2, [r3, #0]
    }
#if 1
    // Восстановление после обнаружения срыва
    if (MotorSupervisor_GetSyncFlag() == ROTORSYNCFLAG_NO)
 8001254:	f000 f90e 	bl	8001474 <MotorSupervisor_GetSyncFlag>
 8001258:	4603      	mov	r3, r0
 800125a:	2b01      	cmp	r3, #1
 800125c:	d106      	bne.n	800126c <main+0x138>
    {
        //TrajCtrl_AbortTask();
        //TrajCtrl_KeepAcceleration((float)acc);
    	TrajCtrl_ReachTargetSpeed(can_spd.f);
 800125e:	4b35      	ldr	r3, [pc, #212]	@ (8001334 <main+0x200>)
 8001260:	edd3 7a00 	vldr	s15, [r3]
 8001264:	eeb0 0a67 	vmov.f32	s0, s15
 8001268:	f001 f816 	bl	8002298 <TrajCtrl_ReachTargetSpeed>
     * Решение: при чересчур долгом пересечении датчиков Холла принудительно сбросить
     *     значение измеряемой скорости в нулевое значение. Тем самым, обнаружив срыв,
     *     система попытается восстановить скорость с нулевой скорости, что раскрутит
     *     маховик.
     */
    if (TIM2->CNT > 48000000)
 800126c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001272:	4a31      	ldr	r2, [pc, #196]	@ (8001338 <main+0x204>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d9c3      	bls.n	8001200 <main+0xcc>
    {
        SpeedTracker_SetFrequencyToZero();
 8001278:	f000 fc1c 	bl	8001ab4 <SpeedTracker_SetFrequencyToZero>
        switch (SpeedTracker_GetSector())
 800127c:	f000 fc0e 	bl	8001a9c <SpeedTracker_GetSector>
 8001280:	4603      	mov	r3, r0
 8001282:	3301      	adds	r3, #1
 8001284:	2b04      	cmp	r3, #4
 8001286:	d835      	bhi.n	80012f4 <main+0x1c0>
 8001288:	a201      	add	r2, pc, #4	@ (adr r2, 8001290 <main+0x15c>)
 800128a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800128e:	bf00      	nop
 8001290:	080012f5 	.word	0x080012f5
 8001294:	080012f5 	.word	0x080012f5
 8001298:	080012a5 	.word	0x080012a5
 800129c:	080012c1 	.word	0x080012c1
 80012a0:	080012db 	.word	0x080012db
        {
        case SECTOR_1:
            if (SpeedTracker_GetDirection() == FORWARD)
 80012a4:	f000 fbee 	bl	8001a84 <SpeedTracker_GetDirection>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d104      	bne.n	80012b8 <main+0x184>
            { RotationControl_SetPWMcounter(285); }
 80012ae:	f240 101d 	movw	r0, #285	@ 0x11d
 80012b2:	f000 fa39 	bl	8001728 <RotationControl_SetPWMcounter>
            else
            { RotationControl_SetPWMcounter(35); }
            break;
 80012b6:	e01e      	b.n	80012f6 <main+0x1c2>
            { RotationControl_SetPWMcounter(35); }
 80012b8:	2023      	movs	r0, #35	@ 0x23
 80012ba:	f000 fa35 	bl	8001728 <RotationControl_SetPWMcounter>
            break;
 80012be:	e01a      	b.n	80012f6 <main+0x1c2>
        case SECTOR_2:
            if (SpeedTracker_GetDirection() == FORWARD)
 80012c0:	f000 fbe0 	bl	8001a84 <SpeedTracker_GetDirection>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d103      	bne.n	80012d2 <main+0x19e>
            { RotationControl_SetPWMcounter(85); }
 80012ca:	2055      	movs	r0, #85	@ 0x55
 80012cc:	f000 fa2c 	bl	8001728 <RotationControl_SetPWMcounter>
            else
            { RotationControl_SetPWMcounter(135); }
            break;
 80012d0:	e011      	b.n	80012f6 <main+0x1c2>
            { RotationControl_SetPWMcounter(135); }
 80012d2:	2087      	movs	r0, #135	@ 0x87
 80012d4:	f000 fa28 	bl	8001728 <RotationControl_SetPWMcounter>
            break;
 80012d8:	e00d      	b.n	80012f6 <main+0x1c2>
        case SECTOR_3:
            if (SpeedTracker_GetDirection() == FORWARD)
 80012da:	f000 fbd3 	bl	8001a84 <SpeedTracker_GetDirection>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d103      	bne.n	80012ec <main+0x1b8>
            { RotationControl_SetPWMcounter(185); }
 80012e4:	20b9      	movs	r0, #185	@ 0xb9
 80012e6:	f000 fa1f 	bl	8001728 <RotationControl_SetPWMcounter>
            else
            { RotationControl_SetPWMcounter(235); }
            break;
 80012ea:	e004      	b.n	80012f6 <main+0x1c2>
            { RotationControl_SetPWMcounter(235); }
 80012ec:	20eb      	movs	r0, #235	@ 0xeb
 80012ee:	f000 fa1b 	bl	8001728 <RotationControl_SetPWMcounter>
            break;
 80012f2:	e000      	b.n	80012f6 <main+0x1c2>
        case SECTOR_ERROR:
            break;
        default:
        	break;
 80012f4:	bf00      	nop
        }
        TIM2->CNT = 0;
 80012f6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012fa:	2200      	movs	r2, #0
 80012fc:	625a      	str	r2, [r3, #36]	@ 0x24
    if(flag_speed != 0)
 80012fe:	e77f      	b.n	8001200 <main+0xcc>
 8001300:	200007a8 	.word	0x200007a8
 8001304:	40020400 	.word	0x40020400
 8001308:	20000694 	.word	0x20000694
 800130c:	40020000 	.word	0x40020000
 8001310:	200006fc 	.word	0x200006fc
 8001314:	20000730 	.word	0x20000730
 8001318:	20000640 	.word	0x20000640
 800131c:	20000788 	.word	0x20000788
 8001320:	2000078c 	.word	0x2000078c
 8001324:	20000798 	.word	0x20000798
 8001328:	2000079c 	.word	0x2000079c
 800132c:	20000790 	.word	0x20000790
 8001330:	20000794 	.word	0x20000794
 8001334:	20000784 	.word	0x20000784
 8001338:	02dc6c00 	.word	0x02dc6c00

0800133c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b094      	sub	sp, #80	@ 0x50
 8001340:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001342:	f107 0320 	add.w	r3, r7, #32
 8001346:	2230      	movs	r2, #48	@ 0x30
 8001348:	2100      	movs	r1, #0
 800134a:	4618      	mov	r0, r3
 800134c:	f006 fc39 	bl	8007bc2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001350:	f107 030c 	add.w	r3, r7, #12
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001360:	2300      	movs	r3, #0
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	4b28      	ldr	r3, [pc, #160]	@ (8001408 <SystemClock_Config+0xcc>)
 8001366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001368:	4a27      	ldr	r2, [pc, #156]	@ (8001408 <SystemClock_Config+0xcc>)
 800136a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800136e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001370:	4b25      	ldr	r3, [pc, #148]	@ (8001408 <SystemClock_Config+0xcc>)
 8001372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001374:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800137c:	2300      	movs	r3, #0
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	4b22      	ldr	r3, [pc, #136]	@ (800140c <SystemClock_Config+0xd0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a21      	ldr	r2, [pc, #132]	@ (800140c <SystemClock_Config+0xd0>)
 8001386:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800138a:	6013      	str	r3, [r2, #0]
 800138c:	4b1f      	ldr	r3, [pc, #124]	@ (800140c <SystemClock_Config+0xd0>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001398:	2302      	movs	r3, #2
 800139a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800139c:	2301      	movs	r3, #1
 800139e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013a0:	2310      	movs	r3, #16
 80013a2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a4:	2302      	movs	r3, #2
 80013a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013a8:	2300      	movs	r3, #0
 80013aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013ac:	2308      	movs	r3, #8
 80013ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80013b0:	23c0      	movs	r3, #192	@ 0xc0
 80013b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 80013b4:	2308      	movs	r3, #8
 80013b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013b8:	2304      	movs	r3, #4
 80013ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013bc:	f107 0320 	add.w	r3, r7, #32
 80013c0:	4618      	mov	r0, r3
 80013c2:	f003 ff25 	bl	8005210 <HAL_RCC_OscConfig>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013cc:	f000 f820 	bl	8001410 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d0:	230f      	movs	r3, #15
 80013d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d4:	2302      	movs	r3, #2
 80013d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013e8:	f107 030c 	add.w	r3, r7, #12
 80013ec:	2101      	movs	r1, #1
 80013ee:	4618      	mov	r0, r3
 80013f0:	f004 f986 	bl	8005700 <HAL_RCC_ClockConfig>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013fa:	f000 f809 	bl	8001410 <Error_Handler>
  }
}
 80013fe:	bf00      	nop
 8001400:	3750      	adds	r7, #80	@ 0x50
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800
 800140c:	40007000 	.word	0x40007000

08001410 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001414:	b672      	cpsid	i
}
 8001416:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <Error_Handler+0x8>

0800141c <MotorSupervisor_UpdateRotorSyncFlag>:
 *          ROTORSYNCFLAG_YES при наличии синхронизации
 *          ROTORSYNCFLAG_NO при отсутствии синхронизации
 */
void
MotorSupervisor_UpdateRotorSyncFlag()
{
 800141c:	b580      	push	{r7, lr}
 800141e:	ed2d 8b02 	vpush	{d8}
 8001422:	af00      	add	r7, sp, #0
    if(fabsf(SpeedTracker_GetFrequency() - TrajCtrl_Ctrl2Speed(RotationControl_GetControl())) >= MOTORSYPERVISOR_SYNCPRECISION)
 8001424:	f000 fb20 	bl	8001a68 <SpeedTracker_GetFrequency>
 8001428:	eeb0 8a40 	vmov.f32	s16, s0
 800142c:	f000 f902 	bl	8001634 <RotationControl_GetControl>
 8001430:	eef0 7a40 	vmov.f32	s15, s0
 8001434:	eeb0 0a67 	vmov.f32	s0, s15
 8001438:	f001 fbb6 	bl	8002ba8 <TrajCtrl_Ctrl2Speed>
 800143c:	eef0 7a40 	vmov.f32	s15, s0
 8001440:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001444:	eef0 7ae7 	vabs.f32	s15, s15
 8001448:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800144c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001454:	db03      	blt.n	800145e <MotorSupervisor_UpdateRotorSyncFlag+0x42>
    {
        motorSupervisor.sync_flag = ROTORSYNCFLAG_NO;
 8001456:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <MotorSupervisor_UpdateRotorSyncFlag+0x54>)
 8001458:	2201      	movs	r2, #1
 800145a:	701a      	strb	r2, [r3, #0]
    }
    else { motorSupervisor.sync_flag = ROTORSYNCFLAG_YES; }
}
 800145c:	e002      	b.n	8001464 <MotorSupervisor_UpdateRotorSyncFlag+0x48>
    else { motorSupervisor.sync_flag = ROTORSYNCFLAG_YES; }
 800145e:	4b04      	ldr	r3, [pc, #16]	@ (8001470 <MotorSupervisor_UpdateRotorSyncFlag+0x54>)
 8001460:	2200      	movs	r2, #0
 8001462:	701a      	strb	r2, [r3, #0]
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	ecbd 8b02 	vpop	{d8}
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	200007a0 	.word	0x200007a0

08001474 <MotorSupervisor_GetSyncFlag>:

motorSupervisor_rotorSyncFlag_t
MotorSupervisor_GetSyncFlag()
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
    return motorSupervisor.sync_flag;
 8001478:	4b03      	ldr	r3, [pc, #12]	@ (8001488 <MotorSupervisor_GetSyncFlag+0x14>)
 800147a:	781b      	ldrb	r3, [r3, #0]
}
 800147c:	4618      	mov	r0, r3
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	200007a0 	.word	0x200007a0

0800148c <RotationControl_Init>:
RotationControl_SetFieldDirectionByArrayIndex(uint16_t index);


void
RotationControl_Init()
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
    // Включить ШИМ-контроль управляющего инвертора:
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001490:	2100      	movs	r1, #0
 8001492:	480e      	ldr	r0, [pc, #56]	@ (80014cc <RotationControl_Init+0x40>)
 8001494:	f004 fc3e 	bl	8005d14 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 8001498:	2100      	movs	r1, #0
 800149a:	480c      	ldr	r0, [pc, #48]	@ (80014cc <RotationControl_Init+0x40>)
 800149c:	f005 fe08 	bl	80070b0 <HAL_TIMEx_PWMN_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80014a0:	2104      	movs	r1, #4
 80014a2:	480a      	ldr	r0, [pc, #40]	@ (80014cc <RotationControl_Init+0x40>)
 80014a4:	f004 fc36 	bl	8005d14 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 80014a8:	2104      	movs	r1, #4
 80014aa:	4808      	ldr	r0, [pc, #32]	@ (80014cc <RotationControl_Init+0x40>)
 80014ac:	f005 fe00 	bl	80070b0 <HAL_TIMEx_PWMN_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80014b0:	2108      	movs	r1, #8
 80014b2:	4806      	ldr	r0, [pc, #24]	@ (80014cc <RotationControl_Init+0x40>)
 80014b4:	f004 fc2e 	bl	8005d14 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
 80014b8:	2108      	movs	r1, #8
 80014ba:	4804      	ldr	r0, [pc, #16]	@ (80014cc <RotationControl_Init+0x40>)
 80014bc:	f005 fdf8 	bl	80070b0 <HAL_TIMEx_PWMN_Start>

    // Включить таймер для вращения магнитного поля:
    HAL_TIM_Base_Start_IT(&htim5);
 80014c0:	4803      	ldr	r0, [pc, #12]	@ (80014d0 <RotationControl_Init+0x44>)
 80014c2:	f004 fb39 	bl	8005b38 <HAL_TIM_Base_Start_IT>
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000880 	.word	0x20000880
 80014d0:	200007f0 	.word	0x200007f0

080014d4 <RotationControl_SetActualFieldDirection>:
    HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_3);
}

void
RotationControl_SetActualFieldDirection()
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
    RotationControl_SetFieldDirectionByArrayIndex(pwm_counter);
 80014d8:	4b26      	ldr	r3, [pc, #152]	@ (8001574 <RotationControl_SetActualFieldDirection+0xa0>)
 80014da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014de:	b29b      	uxth	r3, r3
 80014e0:	4618      	mov	r0, r3
 80014e2:	f000 f8d5 	bl	8001690 <RotationControl_SetFieldDirectionByArrayIndex>

    // Обновить счетчик:
    switch(spin_direction)
 80014e6:	4b24      	ldr	r3, [pc, #144]	@ (8001578 <RotationControl_SetActualFieldDirection+0xa4>)
 80014e8:	f993 3000 	ldrsb.w	r3, [r3]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d010      	beq.n	8001512 <RotationControl_SetActualFieldDirection+0x3e>
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	dc28      	bgt.n	8001546 <RotationControl_SetActualFieldDirection+0x72>
 80014f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80014f8:	d027      	beq.n	800154a <RotationControl_SetActualFieldDirection+0x76>
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d123      	bne.n	8001546 <RotationControl_SetActualFieldDirection+0x72>
    {
        case FORWARD:
            pwm_counter += 1;
 80014fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001574 <RotationControl_SetActualFieldDirection+0xa0>)
 8001500:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001504:	b29b      	uxth	r3, r3
 8001506:	3301      	adds	r3, #1
 8001508:	b29b      	uxth	r3, r3
 800150a:	b21a      	sxth	r2, r3
 800150c:	4b19      	ldr	r3, [pc, #100]	@ (8001574 <RotationControl_SetActualFieldDirection+0xa0>)
 800150e:	801a      	strh	r2, [r3, #0]
            break;
 8001510:	e01c      	b.n	800154c <RotationControl_SetActualFieldDirection+0x78>
        case REVERSE:
            if(pwm_counter <= 0)
 8001512:	4b18      	ldr	r3, [pc, #96]	@ (8001574 <RotationControl_SetActualFieldDirection+0xa0>)
 8001514:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001518:	2b00      	cmp	r3, #0
 800151a:	dc0a      	bgt.n	8001532 <RotationControl_SetActualFieldDirection+0x5e>
            {
                /*
                 * Необходимо зациклить счетчик,
                 * чтобы не выйти за пределы массива ниже 0
                 */
                pwm_counter += (ROTATIONCONTROL_PWMPERIOD - 1);
 800151c:	4b15      	ldr	r3, [pc, #84]	@ (8001574 <RotationControl_SetActualFieldDirection+0xa0>)
 800151e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001522:	b29b      	uxth	r3, r3
 8001524:	f203 132b 	addw	r3, r3, #299	@ 0x12b
 8001528:	b29b      	uxth	r3, r3
 800152a:	b21a      	sxth	r2, r3
 800152c:	4b11      	ldr	r3, [pc, #68]	@ (8001574 <RotationControl_SetActualFieldDirection+0xa0>)
 800152e:	801a      	strh	r2, [r3, #0]
            }
            // Декремент в случае инверсного вращения
            else { pwm_counter -= 1; }
            break;
 8001530:	e00c      	b.n	800154c <RotationControl_SetActualFieldDirection+0x78>
            else { pwm_counter -= 1; }
 8001532:	4b10      	ldr	r3, [pc, #64]	@ (8001574 <RotationControl_SetActualFieldDirection+0xa0>)
 8001534:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001538:	b29b      	uxth	r3, r3
 800153a:	3b01      	subs	r3, #1
 800153c:	b29b      	uxth	r3, r3
 800153e:	b21a      	sxth	r2, r3
 8001540:	4b0c      	ldr	r3, [pc, #48]	@ (8001574 <RotationControl_SetActualFieldDirection+0xa0>)
 8001542:	801a      	strh	r2, [r3, #0]
            break;
 8001544:	e002      	b.n	800154c <RotationControl_SetActualFieldDirection+0x78>
         * что программа задает конкретное направление вращения.
         */
        case DIRECTION_ERROR:
            break;
        default:
            break;
 8001546:	bf00      	nop
 8001548:	e000      	b.n	800154c <RotationControl_SetActualFieldDirection+0x78>
            break;
 800154a:	bf00      	nop
    }
    // Предотвращение выхода за пределы массива
    pwm_counter = pwm_counter % ROTATIONCONTROL_PWMPERIOD;
 800154c:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <RotationControl_SetActualFieldDirection+0xa0>)
 800154e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001552:	4a0a      	ldr	r2, [pc, #40]	@ (800157c <RotationControl_SetActualFieldDirection+0xa8>)
 8001554:	fb82 1203 	smull	r1, r2, r2, r3
 8001558:	1151      	asrs	r1, r2, #5
 800155a:	17da      	asrs	r2, r3, #31
 800155c:	1a8a      	subs	r2, r1, r2
 800155e:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001562:	fb01 f202 	mul.w	r2, r1, r2
 8001566:	1a9b      	subs	r3, r3, r2
 8001568:	b21a      	sxth	r2, r3
 800156a:	4b02      	ldr	r3, [pc, #8]	@ (8001574 <RotationControl_SetActualFieldDirection+0xa0>)
 800156c:	801a      	strh	r2, [r3, #0]
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200007a2 	.word	0x200007a2
 8001578:	200007a4 	.word	0x200007a4
 800157c:	1b4e81b5 	.word	0x1b4e81b5

08001580 <RotationControl_SetSpinDirection>:

void
RotationControl_SetSpinDirection(
    speedTracker_spinDirection_t new_direction
)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]
    if((new_direction == FORWARD)   ||
 800158a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <RotationControl_SetSpinDirection+0x1a>
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d102      	bne.n	80015a0 <RotationControl_SetSpinDirection+0x20>
       (new_direction == REVERSE))
    {
        spin_direction = new_direction;
 800159a:	4a04      	ldr	r2, [pc, #16]	@ (80015ac <RotationControl_SetSpinDirection+0x2c>)
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	7013      	strb	r3, [r2, #0]
    }
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	200007a4 	.word	0x200007a4

080015b0 <RotationControl_SetControl>:

void
RotationControl_SetControl(float new_ctrl)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	ed87 0a01 	vstr	s0, [r7, #4]
    if(new_ctrl >= 0)
 80015ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80015be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c6:	db03      	blt.n	80015d0 <RotationControl_SetControl+0x20>
    {
        RotationControl_SetSpinDirection(FORWARD);
 80015c8:	2000      	movs	r0, #0
 80015ca:	f7ff ffd9 	bl	8001580 <RotationControl_SetSpinDirection>
 80015ce:	e002      	b.n	80015d6 <RotationControl_SetControl+0x26>
    }
    else
    {
        RotationControl_SetSpinDirection(REVERSE);
 80015d0:	2001      	movs	r0, #1
 80015d2:	f7ff ffd5 	bl	8001580 <RotationControl_SetSpinDirection>
    }
    CNTvalue = (uint16_t)(40000 *
        (1.f - ROTATIONCONTROL_MINSPEED / fabsf(new_ctrl)));
 80015d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80015da:	eeb0 7ae7 	vabs.f32	s14, s15
 80015de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80015e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80015ea:	ee77 7a67 	vsub.f32	s15, s14, s15
    CNTvalue = (uint16_t)(40000 *
 80015ee:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800160c <RotationControl_SetControl+0x5c>
 80015f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015fa:	ee17 3a90 	vmov	r3, s15
 80015fe:	b29a      	uxth	r2, r3
 8001600:	4b03      	ldr	r3, [pc, #12]	@ (8001610 <RotationControl_SetControl+0x60>)
 8001602:	801a      	strh	r2, [r3, #0]
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	471c4000 	.word	0x471c4000
 8001610:	200007a6 	.word	0x200007a6

08001614 <RotationControl_UpdateCNT>:

void
RotationControl_UpdateCNT()
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
    htim5.Instance->CNT = CNTvalue;
 8001618:	4b04      	ldr	r3, [pc, #16]	@ (800162c <RotationControl_UpdateCNT+0x18>)
 800161a:	881a      	ldrh	r2, [r3, #0]
 800161c:	4b04      	ldr	r3, [pc, #16]	@ (8001630 <RotationControl_UpdateCNT+0x1c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	200007a6 	.word	0x200007a6
 8001630:	200007f0 	.word	0x200007f0

08001634 <RotationControl_GetControl>:

float
RotationControl_GetControl()
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
    float abs_speed = ROTATIONCONTROL_MINSPEED *
        (40000.f / (40000 - CNTvalue));
 800163a:	4b12      	ldr	r3, [pc, #72]	@ (8001684 <RotationControl_GetControl+0x50>)
 800163c:	881b      	ldrh	r3, [r3, #0]
 800163e:	f5c3 431c 	rsb	r3, r3, #39936	@ 0x9c00
 8001642:	3340      	adds	r3, #64	@ 0x40
    float abs_speed = ROTATIONCONTROL_MINSPEED *
 8001644:	ee07 3a90 	vmov	s15, r3
 8001648:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800164c:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8001688 <RotationControl_GetControl+0x54>
 8001650:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001654:	edc7 7a01 	vstr	s15, [r7, #4]
    if(spin_direction == REVERSE) { abs_speed *= -1; }
 8001658:	4b0c      	ldr	r3, [pc, #48]	@ (800168c <RotationControl_GetControl+0x58>)
 800165a:	f993 3000 	ldrsb.w	r3, [r3]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d105      	bne.n	800166e <RotationControl_GetControl+0x3a>
 8001662:	edd7 7a01 	vldr	s15, [r7, #4]
 8001666:	eef1 7a67 	vneg.f32	s15, s15
 800166a:	edc7 7a01 	vstr	s15, [r7, #4]
    return abs_speed;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	ee07 3a90 	vmov	s15, r3
}
 8001674:	eeb0 0a67 	vmov.f32	s0, s15
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	200007a6 	.word	0x200007a6
 8001688:	471c4000 	.word	0x471c4000
 800168c:	200007a4 	.word	0x200007a4

08001690 <RotationControl_SetFieldDirectionByArrayIndex>:
 *         относительно друга на 2pi/3.
 * @param  uint16_t  Индекс для массива ШИМ-скважностей.
 */
static void
RotationControl_SetFieldDirectionByArrayIndex(uint16_t index)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	80fb      	strh	r3, [r7, #6]
    TIM8->CCR1 = (uint32_t)(pwm_arr[index] * factor);
 800169a:	88fb      	ldrh	r3, [r7, #6]
 800169c:	4a1f      	ldr	r2, [pc, #124]	@ (800171c <RotationControl_SetFieldDirectionByArrayIndex+0x8c>)
 800169e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016a2:	ee07 3a90 	vmov	s15, r3
 80016a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001720 <RotationControl_SetFieldDirectionByArrayIndex+0x90>)
 80016ac:	edd3 7a00 	vldr	s15, [r3]
 80016b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001724 <RotationControl_SetFieldDirectionByArrayIndex+0x94>)
 80016b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016ba:	ee17 2a90 	vmov	r2, s15
 80016be:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM8->CCR2 = (uint32_t)(pwm_arr[index+(uint16_t)(ROTATIONCONTROL_PWMPERIOD*1.f/3.f)] * factor);
 80016c0:	88fb      	ldrh	r3, [r7, #6]
 80016c2:	3364      	adds	r3, #100	@ 0x64
 80016c4:	4a15      	ldr	r2, [pc, #84]	@ (800171c <RotationControl_SetFieldDirectionByArrayIndex+0x8c>)
 80016c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016ca:	ee07 3a90 	vmov	s15, r3
 80016ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016d2:	4b13      	ldr	r3, [pc, #76]	@ (8001720 <RotationControl_SetFieldDirectionByArrayIndex+0x90>)
 80016d4:	edd3 7a00 	vldr	s15, [r3]
 80016d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016dc:	4b11      	ldr	r3, [pc, #68]	@ (8001724 <RotationControl_SetFieldDirectionByArrayIndex+0x94>)
 80016de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016e2:	ee17 2a90 	vmov	r2, s15
 80016e6:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM8->CCR3 = (uint32_t)(pwm_arr[index+(uint16_t)(ROTATIONCONTROL_PWMPERIOD*2.f/3.f)] * factor);
 80016e8:	88fb      	ldrh	r3, [r7, #6]
 80016ea:	33c8      	adds	r3, #200	@ 0xc8
 80016ec:	4a0b      	ldr	r2, [pc, #44]	@ (800171c <RotationControl_SetFieldDirectionByArrayIndex+0x8c>)
 80016ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016f2:	ee07 3a90 	vmov	s15, r3
 80016f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016fa:	4b09      	ldr	r3, [pc, #36]	@ (8001720 <RotationControl_SetFieldDirectionByArrayIndex+0x90>)
 80016fc:	edd3 7a00 	vldr	s15, [r3]
 8001700:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001704:	4b07      	ldr	r3, [pc, #28]	@ (8001724 <RotationControl_SetFieldDirectionByArrayIndex+0x94>)
 8001706:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800170a:	ee17 2a90 	vmov	r2, s15
 800170e:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	20000004 	.word	0x20000004
 8001720:	20000000 	.word	0x20000000
 8001724:	40010400 	.word	0x40010400

08001728 <RotationControl_SetPWMcounter>:

void
RotationControl_SetPWMcounter(int16_t value)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	80fb      	strh	r3, [r7, #6]
    while (value < 0) { value += ROTATIONCONTROL_PWMPERIOD; }
 8001732:	e004      	b.n	800173e <RotationControl_SetPWMcounter+0x16>
 8001734:	88fb      	ldrh	r3, [r7, #6]
 8001736:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 800173a:	b29b      	uxth	r3, r3
 800173c:	80fb      	strh	r3, [r7, #6]
 800173e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001742:	2b00      	cmp	r3, #0
 8001744:	dbf6      	blt.n	8001734 <RotationControl_SetPWMcounter+0xc>
    pwm_counter = (value % ROTATIONCONTROL_PWMPERIOD);
 8001746:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800174a:	4a0a      	ldr	r2, [pc, #40]	@ (8001774 <RotationControl_SetPWMcounter+0x4c>)
 800174c:	fb82 1203 	smull	r1, r2, r2, r3
 8001750:	1151      	asrs	r1, r2, #5
 8001752:	17da      	asrs	r2, r3, #31
 8001754:	1a8a      	subs	r2, r1, r2
 8001756:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800175a:	fb01 f202 	mul.w	r2, r1, r2
 800175e:	1a9b      	subs	r3, r3, r2
 8001760:	b21a      	sxth	r2, r3
 8001762:	4b05      	ldr	r3, [pc, #20]	@ (8001778 <RotationControl_SetPWMcounter+0x50>)
 8001764:	801a      	strh	r2, [r3, #0]
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	1b4e81b5 	.word	0x1b4e81b5
 8001778:	200007a2 	.word	0x200007a2

0800177c <HAL_TIM_IC_CaptureCallback>:
};


void
HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM2)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800178c:	d14d      	bne.n	800182a <HAL_TIM_IC_CaptureCallback+0xae>
    {
        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	7f1b      	ldrb	r3, [r3, #28]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d123      	bne.n	80017de <HAL_TIM_IC_CaptureCallback+0x62>
        {
            TIM2->CNT = 0;
 8001796:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800179a:	2200      	movs	r2, #0
 800179c:	625a      	str	r2, [r3, #36]	@ 0x24
            /*
             * Запись значений регистров счетчика
             * необходима для более корректных данных
             */
            speedTracker.count1 = TIM2->CCR2;
 800179e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017a4:	4a23      	ldr	r2, [pc, #140]	@ (8001834 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80017a6:	60d3      	str	r3, [r2, #12]
            speedTracker.count2 = TIM2->CCR3;
 80017a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017ae:	4a21      	ldr	r2, [pc, #132]	@ (8001834 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80017b0:	6113      	str	r3, [r2, #16]
            speedTracker.count3 = TIM2->CCR1;
 80017b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017b8:	4a1e      	ldr	r2, [pc, #120]	@ (8001834 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80017ba:	6153      	str	r3, [r2, #20]

            if(speedTracker.currentSector == SECTOR_3)
 80017bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001834 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80017be:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80017c2:	2b03      	cmp	r3, #3
 80017c4:	d103      	bne.n	80017ce <HAL_TIM_IC_CaptureCallback+0x52>
            {
                speedTracker.measuredDirection = FORWARD;
 80017c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001834 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	715a      	strb	r2, [r3, #5]
 80017cc:	e002      	b.n	80017d4 <HAL_TIM_IC_CaptureCallback+0x58>
            }
            else { speedTracker.measuredDirection = REVERSE; }
 80017ce:	4b19      	ldr	r3, [pc, #100]	@ (8001834 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	715a      	strb	r2, [r3, #5]
            speedTracker.currentSector = SECTOR_1;
 80017d4:	4b17      	ldr	r3, [pc, #92]	@ (8001834 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	711a      	strb	r2, [r3, #4]

            SpeedTracker_CalcFrequency();
 80017da:	f000 f82d 	bl	8001838 <SpeedTracker_CalcFrequency>
        }
        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	7f1b      	ldrb	r3, [r3, #28]
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d10e      	bne.n	8001804 <HAL_TIM_IC_CaptureCallback+0x88>
        {
            if(speedTracker.currentSector == SECTOR_1)
 80017e6:	4b13      	ldr	r3, [pc, #76]	@ (8001834 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80017e8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d103      	bne.n	80017f8 <HAL_TIM_IC_CaptureCallback+0x7c>
            {
                speedTracker.measuredDirection = FORWARD;
 80017f0:	4b10      	ldr	r3, [pc, #64]	@ (8001834 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	715a      	strb	r2, [r3, #5]
 80017f6:	e002      	b.n	80017fe <HAL_TIM_IC_CaptureCallback+0x82>
            }
            else { speedTracker.measuredDirection = REVERSE; }
 80017f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001834 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	715a      	strb	r2, [r3, #5]
            speedTracker.currentSector = SECTOR_2;
 80017fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001834 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001800:	2202      	movs	r2, #2
 8001802:	711a      	strb	r2, [r3, #4]
        }
        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	7f1b      	ldrb	r3, [r3, #28]
 8001808:	2b04      	cmp	r3, #4
 800180a:	d10e      	bne.n	800182a <HAL_TIM_IC_CaptureCallback+0xae>
        {
            if(speedTracker.currentSector == SECTOR_2)
 800180c:	4b09      	ldr	r3, [pc, #36]	@ (8001834 <HAL_TIM_IC_CaptureCallback+0xb8>)
 800180e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001812:	2b02      	cmp	r3, #2
 8001814:	d103      	bne.n	800181e <HAL_TIM_IC_CaptureCallback+0xa2>
            {
                speedTracker.measuredDirection = FORWARD;
 8001816:	4b07      	ldr	r3, [pc, #28]	@ (8001834 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001818:	2200      	movs	r2, #0
 800181a:	715a      	strb	r2, [r3, #5]
 800181c:	e002      	b.n	8001824 <HAL_TIM_IC_CaptureCallback+0xa8>
            }
            else { speedTracker.measuredDirection = REVERSE; }
 800181e:	4b05      	ldr	r3, [pc, #20]	@ (8001834 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001820:	2201      	movs	r2, #1
 8001822:	715a      	strb	r2, [r3, #5]
            speedTracker.currentSector = SECTOR_3;
 8001824:	4b03      	ldr	r3, [pc, #12]	@ (8001834 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001826:	2203      	movs	r2, #3
 8001828:	711a      	strb	r2, [r3, #4]
        }
    }
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	200004b8 	.word	0x200004b8

08001838 <SpeedTracker_CalcFrequency>:


static void
SpeedTracker_CalcFrequency()
{
 8001838:	b580      	push	{r7, lr}
 800183a:	ed2d 8b02 	vpush	{d8}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
    float pclk1Freq = SpeedTracker_GetPCLK1Freq();
 8001842:	f000 f8f1 	bl	8001a28 <SpeedTracker_GetPCLK1Freq>
 8001846:	ed87 0a02 	vstr	s0, [r7, #8]
    if(speedTracker.measuredDirection == FORWARD)
 800184a:	4b75      	ldr	r3, [pc, #468]	@ (8001a20 <SpeedTracker_CalcFrequency+0x1e8>)
 800184c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d12d      	bne.n	80018b0 <SpeedTracker_CalcFrequency+0x78>
    {
        speedTracker.t1 = -(speedTracker.count1 / pclk1Freq);
 8001854:	4b72      	ldr	r3, [pc, #456]	@ (8001a20 <SpeedTracker_CalcFrequency+0x1e8>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	ee07 3a90 	vmov	s15, r3
 800185c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001860:	ed97 7a02 	vldr	s14, [r7, #8]
 8001864:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001868:	eef1 7a67 	vneg.f32	s15, s15
 800186c:	4b6c      	ldr	r3, [pc, #432]	@ (8001a20 <SpeedTracker_CalcFrequency+0x1e8>)
 800186e:	edc3 7a06 	vstr	s15, [r3, #24]
        speedTracker.t2 = -(speedTracker.count2 / pclk1Freq);
 8001872:	4b6b      	ldr	r3, [pc, #428]	@ (8001a20 <SpeedTracker_CalcFrequency+0x1e8>)
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	ee07 3a90 	vmov	s15, r3
 800187a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800187e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001882:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001886:	eef1 7a67 	vneg.f32	s15, s15
 800188a:	4b65      	ldr	r3, [pc, #404]	@ (8001a20 <SpeedTracker_CalcFrequency+0x1e8>)
 800188c:	edc3 7a07 	vstr	s15, [r3, #28]
        speedTracker.t3 = -(speedTracker.count3 / pclk1Freq);
 8001890:	4b63      	ldr	r3, [pc, #396]	@ (8001a20 <SpeedTracker_CalcFrequency+0x1e8>)
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	ee07 3a90 	vmov	s15, r3
 8001898:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800189c:	ed97 7a02 	vldr	s14, [r7, #8]
 80018a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018a4:	eef1 7a67 	vneg.f32	s15, s15
 80018a8:	4b5d      	ldr	r3, [pc, #372]	@ (8001a20 <SpeedTracker_CalcFrequency+0x1e8>)
 80018aa:	edc3 7a08 	vstr	s15, [r3, #32]
 80018ae:	e031      	b.n	8001914 <SpeedTracker_CalcFrequency+0xdc>
    }
    else if(speedTracker.measuredDirection == REVERSE)
 80018b0:	4b5b      	ldr	r3, [pc, #364]	@ (8001a20 <SpeedTracker_CalcFrequency+0x1e8>)
 80018b2:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d12c      	bne.n	8001914 <SpeedTracker_CalcFrequency+0xdc>
    {
        speedTracker.t1 = -(speedTracker.count2 / pclk1Freq);
 80018ba:	4b59      	ldr	r3, [pc, #356]	@ (8001a20 <SpeedTracker_CalcFrequency+0x1e8>)
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	ee07 3a90 	vmov	s15, r3
 80018c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80018c6:	ed97 7a02 	vldr	s14, [r7, #8]
 80018ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018ce:	eef1 7a67 	vneg.f32	s15, s15
 80018d2:	4b53      	ldr	r3, [pc, #332]	@ (8001a20 <SpeedTracker_CalcFrequency+0x1e8>)
 80018d4:	edc3 7a06 	vstr	s15, [r3, #24]
        speedTracker.t2 = -(speedTracker.count1 / pclk1Freq);
 80018d8:	4b51      	ldr	r3, [pc, #324]	@ (8001a20 <SpeedTracker_CalcFrequency+0x1e8>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	ee07 3a90 	vmov	s15, r3
 80018e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80018e4:	ed97 7a02 	vldr	s14, [r7, #8]
 80018e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018ec:	eef1 7a67 	vneg.f32	s15, s15
 80018f0:	4b4b      	ldr	r3, [pc, #300]	@ (8001a20 <SpeedTracker_CalcFrequency+0x1e8>)
 80018f2:	edc3 7a07 	vstr	s15, [r3, #28]
        speedTracker.t3 = -(speedTracker.count3 / pclk1Freq);
 80018f6:	4b4a      	ldr	r3, [pc, #296]	@ (8001a20 <SpeedTracker_CalcFrequency+0x1e8>)
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	ee07 3a90 	vmov	s15, r3
 80018fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001902:	ed97 7a02 	vldr	s14, [r7, #8]
 8001906:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800190a:	eef1 7a67 	vneg.f32	s15, s15
 800190e:	4b44      	ldr	r3, [pc, #272]	@ (8001a20 <SpeedTracker_CalcFrequency+0x1e8>)
 8001910:	edc3 7a08 	vstr	s15, [r3, #32]
    }

    float numerator = -speedTracker.t1 / 6 - speedTracker.t2 / 3 - speedTracker.t3 / 2;
 8001914:	4b42      	ldr	r3, [pc, #264]	@ (8001a20 <SpeedTracker_CalcFrequency+0x1e8>)
 8001916:	edd3 7a06 	vldr	s15, [r3, #24]
 800191a:	eef1 7a67 	vneg.f32	s15, s15
 800191e:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 8001922:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001926:	4b3e      	ldr	r3, [pc, #248]	@ (8001a20 <SpeedTracker_CalcFrequency+0x1e8>)
 8001928:	edd3 6a07 	vldr	s13, [r3, #28]
 800192c:	eeb0 6a08 	vmov.f32	s12, #8	@ 0x40400000  3.0
 8001930:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001934:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001938:	4b39      	ldr	r3, [pc, #228]	@ (8001a20 <SpeedTracker_CalcFrequency+0x1e8>)
 800193a:	edd3 6a08 	vldr	s13, [r3, #32]
 800193e:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8001942:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001946:	ee77 7a67 	vsub.f32	s15, s14, s15
 800194a:	edc7 7a01 	vstr	s15, [r7, #4]
    float denumerator = powf(speedTracker.t1, 2) + powf(speedTracker.t2, 2) + powf(speedTracker.t3, 2);
 800194e:	4b34      	ldr	r3, [pc, #208]	@ (8001a20 <SpeedTracker_CalcFrequency+0x1e8>)
 8001950:	edd3 7a06 	vldr	s15, [r3, #24]
 8001954:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8001958:	eeb0 0a67 	vmov.f32	s0, s15
 800195c:	f005 fd69 	bl	8007432 <powf>
 8001960:	eeb0 8a40 	vmov.f32	s16, s0
 8001964:	4b2e      	ldr	r3, [pc, #184]	@ (8001a20 <SpeedTracker_CalcFrequency+0x1e8>)
 8001966:	edd3 7a07 	vldr	s15, [r3, #28]
 800196a:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800196e:	eeb0 0a67 	vmov.f32	s0, s15
 8001972:	f005 fd5e 	bl	8007432 <powf>
 8001976:	eef0 7a40 	vmov.f32	s15, s0
 800197a:	ee38 8a27 	vadd.f32	s16, s16, s15
 800197e:	4b28      	ldr	r3, [pc, #160]	@ (8001a20 <SpeedTracker_CalcFrequency+0x1e8>)
 8001980:	edd3 7a08 	vldr	s15, [r3, #32]
 8001984:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8001988:	eeb0 0a67 	vmov.f32	s0, s15
 800198c:	f005 fd51 	bl	8007432 <powf>
 8001990:	eef0 7a40 	vmov.f32	s15, s0
 8001994:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001998:	edc7 7a00 	vstr	s15, [r7]
    int8_t sign = 1;
 800199c:	2301      	movs	r3, #1
 800199e:	73fb      	strb	r3, [r7, #15]
    if(speedTracker.measuredDirection == REVERSE) { sign = -sign; }
 80019a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a20 <SpeedTracker_CalcFrequency+0x1e8>)
 80019a2:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d103      	bne.n	80019b2 <SpeedTracker_CalcFrequency+0x17a>
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
 80019ac:	425b      	negs	r3, r3
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	73fb      	strb	r3, [r7, #15]
     * При операции inf + float в TrajectoryControl происходит ошибка.
     *
     * 2e-5 [сек] это оценка denumerator при
     * самом быстром допустимом вращении маховика
     */
    if(denumerator <= 2e-5)
 80019b2:	6838      	ldr	r0, [r7, #0]
 80019b4:	f7fe fd6c 	bl	8000490 <__aeabi_f2d>
 80019b8:	a317      	add	r3, pc, #92	@ (adr r3, 8001a18 <SpeedTracker_CalcFrequency+0x1e0>)
 80019ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019be:	f7fe fe29 	bl	8000614 <__aeabi_dcmple>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d00d      	beq.n	80019e4 <SpeedTracker_CalcFrequency+0x1ac>
    {
        speedTracker.frequency = sign * SPEEDTRACKER_MAXSPEED;
 80019c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019cc:	ee07 3a90 	vmov	s15, r3
 80019d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019d4:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001a24 <SpeedTracker_CalcFrequency+0x1ec>
 80019d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019dc:	4b10      	ldr	r3, [pc, #64]	@ (8001a20 <SpeedTracker_CalcFrequency+0x1e8>)
 80019de:	edc3 7a00 	vstr	s15, [r3]
    }
    else { speedTracker.frequency = sign * numerator / denumerator; }
}
 80019e2:	e010      	b.n	8001a06 <SpeedTracker_CalcFrequency+0x1ce>
    else { speedTracker.frequency = sign * numerator / denumerator; }
 80019e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019e8:	ee07 3a90 	vmov	s15, r3
 80019ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80019f4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80019f8:	ed97 7a00 	vldr	s14, [r7]
 80019fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a00:	4b07      	ldr	r3, [pc, #28]	@ (8001a20 <SpeedTracker_CalcFrequency+0x1e8>)
 8001a02:	edc3 7a00 	vstr	s15, [r3]
}
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	ecbd 8b02 	vpop	{d8}
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	f3af 8000 	nop.w
 8001a18:	88e368f1 	.word	0x88e368f1
 8001a1c:	3ef4f8b5 	.word	0x3ef4f8b5
 8001a20:	200004b8 	.word	0x200004b8
 8001a24:	42c80000 	.word	0x42c80000

08001a28 <SpeedTracker_GetPCLK1Freq>:

static float
SpeedTracker_GetPCLK1Freq()
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
  /* Get PCLK1 frequency */
  uint32_t pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a2e:	f004 f81f 	bl	8005a70 <HAL_RCC_GetPCLK1Freq>
 8001a32:	6078      	str	r0, [r7, #4]

  /* Get PCLK1 prescaler */
  if((RCC->CFGR & RCC_CFGR_PPRE1) == 0)
 8001a34:	4b0b      	ldr	r3, [pc, #44]	@ (8001a64 <SpeedTracker_GetPCLK1Freq+0x3c>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d105      	bne.n	8001a4c <SpeedTracker_GetPCLK1Freq+0x24>
  {
    /* PCLK1 prescaler equal to 1 => TIMCLK = PCLK1 */
    return (float)(pclk1);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	ee07 3a90 	vmov	s15, r3
 8001a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a4a:	e005      	b.n	8001a58 <SpeedTracker_GetPCLK1Freq+0x30>
  }
  else
  {
    /* PCLK1 prescaler different from 1 => TIMCLK = 2 * PCLK1 */
    return (float)(2 * pclk1);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	ee07 3a90 	vmov	s15, r3
 8001a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
  }
}
 8001a58:	eeb0 0a67 	vmov.f32	s0, s15
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800

08001a68 <SpeedTracker_GetFrequency>:

float
SpeedTracker_GetFrequency()
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
    return speedTracker.frequency;
 8001a6c:	4b04      	ldr	r3, [pc, #16]	@ (8001a80 <SpeedTracker_GetFrequency+0x18>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	ee07 3a90 	vmov	s15, r3
}
 8001a74:	eeb0 0a67 	vmov.f32	s0, s15
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	200004b8 	.word	0x200004b8

08001a84 <SpeedTracker_GetDirection>:

speedTracker_spinDirection_t
SpeedTracker_GetDirection()
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
    return speedTracker.measuredDirection;
 8001a88:	4b03      	ldr	r3, [pc, #12]	@ (8001a98 <SpeedTracker_GetDirection+0x14>)
 8001a8a:	f993 3005 	ldrsb.w	r3, [r3, #5]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	200004b8 	.word	0x200004b8

08001a9c <SpeedTracker_GetSector>:

speedTracker_angleSector_t
SpeedTracker_GetSector()
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
    return speedTracker.currentSector;
 8001aa0:	4b03      	ldr	r3, [pc, #12]	@ (8001ab0 <SpeedTracker_GetSector+0x14>)
 8001aa2:	f993 3004 	ldrsb.w	r3, [r3, #4]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	200004b8 	.word	0x200004b8

08001ab4 <SpeedTracker_SetFrequencyToZero>:

void
SpeedTracker_SetFrequencyToZero(){
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
    speedTracker.frequency = 0.f;
 8001ab8:	4b04      	ldr	r3, [pc, #16]	@ (8001acc <SpeedTracker_SetFrequencyToZero+0x18>)
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	200004b8 	.word	0x200004b8

08001ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	607b      	str	r3, [r7, #4]
 8001ada:	4b10      	ldr	r3, [pc, #64]	@ (8001b1c <HAL_MspInit+0x4c>)
 8001adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ade:	4a0f      	ldr	r2, [pc, #60]	@ (8001b1c <HAL_MspInit+0x4c>)
 8001ae0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ae4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8001b1c <HAL_MspInit+0x4c>)
 8001ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aee:	607b      	str	r3, [r7, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	603b      	str	r3, [r7, #0]
 8001af6:	4b09      	ldr	r3, [pc, #36]	@ (8001b1c <HAL_MspInit+0x4c>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afa:	4a08      	ldr	r2, [pc, #32]	@ (8001b1c <HAL_MspInit+0x4c>)
 8001afc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b02:	4b06      	ldr	r3, [pc, #24]	@ (8001b1c <HAL_MspInit+0x4c>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b0a:	603b      	str	r3, [r7, #0]
 8001b0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40023800 	.word	0x40023800

08001b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b24:	bf00      	nop
 8001b26:	e7fd      	b.n	8001b24 <NMI_Handler+0x4>

08001b28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b2c:	bf00      	nop
 8001b2e:	e7fd      	b.n	8001b2c <HardFault_Handler+0x4>

08001b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b34:	bf00      	nop
 8001b36:	e7fd      	b.n	8001b34 <MemManage_Handler+0x4>

08001b38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b3c:	bf00      	nop
 8001b3e:	e7fd      	b.n	8001b3c <BusFault_Handler+0x4>

08001b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b44:	bf00      	nop
 8001b46:	e7fd      	b.n	8001b44 <UsageFault_Handler+0x4>

08001b48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
	
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */
	
  /* USER CODE END SVCall_IRQn 1 */
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b56:	b480      	push	{r7}
 8001b58:	af00      	add	r7, sp, #0
	
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */
	
  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
	
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */
	
  /* USER CODE END PendSV_IRQn 1 */
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	
    // Performs correction of the motor supply voltage
    //VoltageControl_FineCorrection();
    VoltageControl_GetActualVoltage();
 8001b76:	f001 f9e5 	bl	8002f44 <VoltageControl_GetActualVoltage>

    MotorSupervisor_UpdateRotorSyncFlag();
 8001b7a:	f7ff fc4f 	bl	800141c <MotorSupervisor_UpdateRotorSyncFlag>

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b7e:	f001 fae3 	bl	8003148 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  
  /* USER CODE END SysTick_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */
	
  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001b8c:	4802      	ldr	r0, [pc, #8]	@ (8001b98 <ADC_IRQHandler+0x10>)
 8001b8e:	f001 fccf 	bl	8003530 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */
  
  /* USER CODE END ADC_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	200005f8 	.word	0x200005f8

08001b9c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
	
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001ba0:	4802      	ldr	r0, [pc, #8]	@ (8001bac <CAN1_RX0_IRQHandler+0x10>)
 8001ba2:	f002 fb91 	bl	80042c8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000640 	.word	0x20000640

08001bb0 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001bb4:	4802      	ldr	r0, [pc, #8]	@ (8001bc0 <CAN1_SCE_IRQHandler+0x10>)
 8001bb6:	f002 fb87 	bl	80042c8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000640 	.word	0x20000640

08001bc4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bc8:	4802      	ldr	r0, [pc, #8]	@ (8001bd4 <TIM2_IRQHandler+0x10>)
 8001bca:	f004 faed 	bl	80061a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  
  /* USER CODE END TIM2_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	200007a8 	.word	0x200007a8

08001bd8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001bdc:	4805      	ldr	r0, [pc, #20]	@ (8001bf4 <TIM5_IRQHandler+0x1c>)
 8001bde:	f004 fae3 	bl	80061a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */
  
    RotationControl_UpdateCNT();
 8001be2:	f7ff fd17 	bl	8001614 <RotationControl_UpdateCNT>
    RotationControl_SetActualFieldDirection();
 8001be6:	f7ff fc75 	bl	80014d4 <RotationControl_SetActualFieldDirection>
    HAL_TIM_Base_Start_IT(&htim5);
 8001bea:	4802      	ldr	r0, [pc, #8]	@ (8001bf4 <TIM5_IRQHandler+0x1c>)
 8001bec:	f003 ffa4 	bl	8005b38 <HAL_TIM_Base_Start_IT>

  /* USER CODE END TIM5_IRQn 1 */
}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	200007f0 	.word	0x200007f0

08001bf8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001bfc:	4805      	ldr	r0, [pc, #20]	@ (8001c14 <TIM6_DAC_IRQHandler+0x1c>)
 8001bfe:	f002 ff1f 	bl	8004a40 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8001c02:	4805      	ldr	r0, [pc, #20]	@ (8001c18 <TIM6_DAC_IRQHandler+0x20>)
 8001c04:	f004 fad0 	bl	80061a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  
    TrajCtrl_SetVelocity();
 8001c08:	f000 fb14 	bl	8002234 <TrajCtrl_SetVelocity>
    TrajCtrl_EnableDisableTim6Interrupts();
 8001c0c:	f000 ffb6 	bl	8002b7c <TrajCtrl_EnableDisableTim6Interrupts>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000694 	.word	0x20000694
 8001c18:	20000838 	.word	0x20000838

08001c1c <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */
	
  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001c20:	4802      	ldr	r0, [pc, #8]	@ (8001c2c <CAN2_TX_IRQHandler+0x10>)
 8001c22:	f002 fb51 	bl	80042c8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */
  
  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000668 	.word	0x20000668

08001c30 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */
	
  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001c34:	4802      	ldr	r0, [pc, #8]	@ (8001c40 <CAN2_RX0_IRQHandler+0x10>)
 8001c36:	f002 fb47 	bl	80042c8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */
  
  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000668 	.word	0x20000668

08001c44 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */
	
  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001c48:	4802      	ldr	r0, [pc, #8]	@ (8001c54 <CAN2_RX1_IRQHandler+0x10>)
 8001c4a:	f002 fb3d 	bl	80042c8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */
  
  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000668 	.word	0x20000668

08001c58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c5c:	4b06      	ldr	r3, [pc, #24]	@ (8001c78 <SystemInit+0x20>)
 8001c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c62:	4a05      	ldr	r2, [pc, #20]	@ (8001c78 <SystemInit+0x20>)
 8001c64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08a      	sub	sp, #40	@ 0x28
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c82:	f107 0318 	add.w	r3, r7, #24
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]
 8001c8c:	609a      	str	r2, [r3, #8]
 8001c8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c90:	f107 0310 	add.w	r3, r7, #16
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c9a:	463b      	mov	r3, r7
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ca6:	4b37      	ldr	r3, [pc, #220]	@ (8001d84 <MX_TIM2_Init+0x108>)
 8001ca8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1-1;
 8001cae:	4b35      	ldr	r3, [pc, #212]	@ (8001d84 <MX_TIM2_Init+0x108>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb4:	4b33      	ldr	r3, [pc, #204]	@ (8001d84 <MX_TIM2_Init+0x108>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001cba:	4b32      	ldr	r3, [pc, #200]	@ (8001d84 <MX_TIM2_Init+0x108>)
 8001cbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001cc0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc2:	4b30      	ldr	r3, [pc, #192]	@ (8001d84 <MX_TIM2_Init+0x108>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc8:	4b2e      	ldr	r3, [pc, #184]	@ (8001d84 <MX_TIM2_Init+0x108>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cce:	482d      	ldr	r0, [pc, #180]	@ (8001d84 <MX_TIM2_Init+0x108>)
 8001cd0:	f003 fee2 	bl	8005a98 <HAL_TIM_Base_Init>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001cda:	f7ff fb99 	bl	8001410 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ce2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ce4:	f107 0318 	add.w	r3, r7, #24
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4826      	ldr	r0, [pc, #152]	@ (8001d84 <MX_TIM2_Init+0x108>)
 8001cec:	f004 fcaa 	bl	8006644 <HAL_TIM_ConfigClockSource>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001cf6:	f7ff fb8b 	bl	8001410 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001cfa:	4822      	ldr	r0, [pc, #136]	@ (8001d84 <MX_TIM2_Init+0x108>)
 8001cfc:	f004 f8d2 	bl	8005ea4 <HAL_TIM_IC_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001d06:	f7ff fb83 	bl	8001410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d12:	f107 0310 	add.w	r3, r7, #16
 8001d16:	4619      	mov	r1, r3
 8001d18:	481a      	ldr	r0, [pc, #104]	@ (8001d84 <MX_TIM2_Init+0x108>)
 8001d1a:	f005 fa83 	bl	8007224 <HAL_TIMEx_MasterConfigSynchronization>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001d24:	f7ff fb74 	bl	8001410 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001d30:	2300      	movs	r3, #0
 8001d32:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 4;
 8001d34:	2304      	movs	r3, #4
 8001d36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001d38:	463b      	mov	r3, r7
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4811      	ldr	r0, [pc, #68]	@ (8001d84 <MX_TIM2_Init+0x108>)
 8001d40:	f004 fb22 	bl	8006388 <HAL_TIM_IC_ConfigChannel>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001d4a:	f7ff fb61 	bl	8001410 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001d4e:	463b      	mov	r3, r7
 8001d50:	2204      	movs	r2, #4
 8001d52:	4619      	mov	r1, r3
 8001d54:	480b      	ldr	r0, [pc, #44]	@ (8001d84 <MX_TIM2_Init+0x108>)
 8001d56:	f004 fb17 	bl	8006388 <HAL_TIM_IC_ConfigChannel>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001d60:	f7ff fb56 	bl	8001410 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001d64:	463b      	mov	r3, r7
 8001d66:	2208      	movs	r2, #8
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4806      	ldr	r0, [pc, #24]	@ (8001d84 <MX_TIM2_Init+0x108>)
 8001d6c:	f004 fb0c 	bl	8006388 <HAL_TIM_IC_ConfigChannel>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_TIM2_Init+0xfe>
  {
    Error_Handler();
 8001d76:	f7ff fb4b 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d7a:	bf00      	nop
 8001d7c:	3728      	adds	r7, #40	@ 0x28
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	200007a8 	.word	0x200007a8

08001d88 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d8e:	f107 0308 	add.w	r3, r7, #8
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	605a      	str	r2, [r3, #4]
 8001d98:	609a      	str	r2, [r3, #8]
 8001d9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d9c:	463b      	mov	r3, r7
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001da4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e1c <MX_TIM5_Init+0x94>)
 8001da6:	4a1e      	ldr	r2, [pc, #120]	@ (8001e20 <MX_TIM5_Init+0x98>)
 8001da8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 2-1;
 8001daa:	4b1c      	ldr	r3, [pc, #112]	@ (8001e1c <MX_TIM5_Init+0x94>)
 8001dac:	2201      	movs	r2, #1
 8001dae:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e1c <MX_TIM5_Init+0x94>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 40000-1;
 8001db6:	4b19      	ldr	r3, [pc, #100]	@ (8001e1c <MX_TIM5_Init+0x94>)
 8001db8:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8001dbc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dbe:	4b17      	ldr	r3, [pc, #92]	@ (8001e1c <MX_TIM5_Init+0x94>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc4:	4b15      	ldr	r3, [pc, #84]	@ (8001e1c <MX_TIM5_Init+0x94>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001dca:	4814      	ldr	r0, [pc, #80]	@ (8001e1c <MX_TIM5_Init+0x94>)
 8001dcc:	f003 fe64 	bl	8005a98 <HAL_TIM_Base_Init>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001dd6:	f7ff fb1b 	bl	8001410 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dde:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001de0:	f107 0308 	add.w	r3, r7, #8
 8001de4:	4619      	mov	r1, r3
 8001de6:	480d      	ldr	r0, [pc, #52]	@ (8001e1c <MX_TIM5_Init+0x94>)
 8001de8:	f004 fc2c 	bl	8006644 <HAL_TIM_ConfigClockSource>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001df2:	f7ff fb0d 	bl	8001410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df6:	2300      	movs	r3, #0
 8001df8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001dfe:	463b      	mov	r3, r7
 8001e00:	4619      	mov	r1, r3
 8001e02:	4806      	ldr	r0, [pc, #24]	@ (8001e1c <MX_TIM5_Init+0x94>)
 8001e04:	f005 fa0e 	bl	8007224 <HAL_TIMEx_MasterConfigSynchronization>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001e0e:	f7ff faff 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001e12:	bf00      	nop
 8001e14:	3718      	adds	r7, #24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	200007f0 	.word	0x200007f0
 8001e20:	40000c00 	.word	0x40000c00

08001e24 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e2a:	463b      	mov	r3, r7
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001e32:	4b15      	ldr	r3, [pc, #84]	@ (8001e88 <MX_TIM6_Init+0x64>)
 8001e34:	4a15      	ldr	r2, [pc, #84]	@ (8001e8c <MX_TIM6_Init+0x68>)
 8001e36:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4800-1;
 8001e38:	4b13      	ldr	r3, [pc, #76]	@ (8001e88 <MX_TIM6_Init+0x64>)
 8001e3a:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 8001e3e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e40:	4b11      	ldr	r3, [pc, #68]	@ (8001e88 <MX_TIM6_Init+0x64>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200-1;
 8001e46:	4b10      	ldr	r3, [pc, #64]	@ (8001e88 <MX_TIM6_Init+0x64>)
 8001e48:	22c7      	movs	r2, #199	@ 0xc7
 8001e4a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001e88 <MX_TIM6_Init+0x64>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e52:	480d      	ldr	r0, [pc, #52]	@ (8001e88 <MX_TIM6_Init+0x64>)
 8001e54:	f003 fe20 	bl	8005a98 <HAL_TIM_Base_Init>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001e5e:	f7ff fad7 	bl	8001410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e62:	2300      	movs	r3, #0
 8001e64:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e6a:	463b      	mov	r3, r7
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4806      	ldr	r0, [pc, #24]	@ (8001e88 <MX_TIM6_Init+0x64>)
 8001e70:	f005 f9d8 	bl	8007224 <HAL_TIMEx_MasterConfigSynchronization>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001e7a:	f7ff fac9 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000838 	.word	0x20000838
 8001e8c:	40001000 	.word	0x40001000

08001e90 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b092      	sub	sp, #72	@ 0x48
 8001e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e96:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ea0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]
 8001eb0:	615a      	str	r2, [r3, #20]
 8001eb2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001eb4:	1d3b      	adds	r3, r7, #4
 8001eb6:	2220      	movs	r2, #32
 8001eb8:	2100      	movs	r1, #0
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f005 fe81 	bl	8007bc2 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001ec0:	4b3e      	ldr	r3, [pc, #248]	@ (8001fbc <MX_TIM8_Init+0x12c>)
 8001ec2:	4a3f      	ldr	r2, [pc, #252]	@ (8001fc0 <MX_TIM8_Init+0x130>)
 8001ec4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001ec6:	4b3d      	ldr	r3, [pc, #244]	@ (8001fbc <MX_TIM8_Init+0x12c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ecc:	4b3b      	ldr	r3, [pc, #236]	@ (8001fbc <MX_TIM8_Init+0x12c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 80-1;
 8001ed2:	4b3a      	ldr	r3, [pc, #232]	@ (8001fbc <MX_TIM8_Init+0x12c>)
 8001ed4:	224f      	movs	r2, #79	@ 0x4f
 8001ed6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ed8:	4b38      	ldr	r3, [pc, #224]	@ (8001fbc <MX_TIM8_Init+0x12c>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001ede:	4b37      	ldr	r3, [pc, #220]	@ (8001fbc <MX_TIM8_Init+0x12c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee4:	4b35      	ldr	r3, [pc, #212]	@ (8001fbc <MX_TIM8_Init+0x12c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001eea:	4834      	ldr	r0, [pc, #208]	@ (8001fbc <MX_TIM8_Init+0x12c>)
 8001eec:	f003 fec3 	bl	8005c76 <HAL_TIM_PWM_Init>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_TIM8_Init+0x6a>
  {
    Error_Handler();
 8001ef6:	f7ff fa8b 	bl	8001410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001efa:	2300      	movs	r3, #0
 8001efc:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001efe:	2300      	movs	r3, #0
 8001f00:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001f02:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001f06:	4619      	mov	r1, r3
 8001f08:	482c      	ldr	r0, [pc, #176]	@ (8001fbc <MX_TIM8_Init+0x12c>)
 8001f0a:	f005 f98b 	bl	8007224 <HAL_TIMEx_MasterConfigSynchronization>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_TIM8_Init+0x88>
  {
    Error_Handler();
 8001f14:	f7ff fa7c 	bl	8001410 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f18:	2360      	movs	r3, #96	@ 0x60
 8001f1a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001f20:	2302      	movs	r3, #2
 8001f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001f24:	2308      	movs	r3, #8
 8001f26:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f30:	2300      	movs	r3, #0
 8001f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f38:	2200      	movs	r2, #0
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	481f      	ldr	r0, [pc, #124]	@ (8001fbc <MX_TIM8_Init+0x12c>)
 8001f3e:	f004 fabf 	bl	80064c0 <HAL_TIM_PWM_ConfigChannel>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_TIM8_Init+0xbc>
  {
    Error_Handler();
 8001f48:	f7ff fa62 	bl	8001410 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f50:	2204      	movs	r2, #4
 8001f52:	4619      	mov	r1, r3
 8001f54:	4819      	ldr	r0, [pc, #100]	@ (8001fbc <MX_TIM8_Init+0x12c>)
 8001f56:	f004 fab3 	bl	80064c0 <HAL_TIM_PWM_ConfigChannel>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_TIM8_Init+0xd4>
  {
    Error_Handler();
 8001f60:	f7ff fa56 	bl	8001410 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f68:	2208      	movs	r2, #8
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4813      	ldr	r0, [pc, #76]	@ (8001fbc <MX_TIM8_Init+0x12c>)
 8001f6e:	f004 faa7 	bl	80064c0 <HAL_TIM_PWM_ConfigChannel>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_TIM8_Init+0xec>
  {
    Error_Handler();
 8001f78:	f7ff fa4a 	bl	8001410 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f80:	2300      	movs	r3, #0
 8001f82:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 6;
 8001f88:	2306      	movs	r3, #6
 8001f8a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f94:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f96:	2300      	movs	r3, #0
 8001f98:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001f9a:	1d3b      	adds	r3, r7, #4
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4807      	ldr	r0, [pc, #28]	@ (8001fbc <MX_TIM8_Init+0x12c>)
 8001fa0:	f005 f9bc 	bl	800731c <HAL_TIMEx_ConfigBreakDeadTime>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <MX_TIM8_Init+0x11e>
  {
    Error_Handler();
 8001faa:	f7ff fa31 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001fae:	4803      	ldr	r0, [pc, #12]	@ (8001fbc <MX_TIM8_Init+0x12c>)
 8001fb0:	f000 f8c4 	bl	800213c <HAL_TIM_MspPostInit>

}
 8001fb4:	bf00      	nop
 8001fb6:	3748      	adds	r7, #72	@ 0x48
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20000880 	.word	0x20000880
 8001fc0:	40010400 	.word	0x40010400

08001fc4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08c      	sub	sp, #48	@ 0x30
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fcc:	f107 031c 	add.w	r3, r7, #28
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fe4:	d144      	bne.n	8002070 <HAL_TIM_Base_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61bb      	str	r3, [r7, #24]
 8001fea:	4b3f      	ldr	r3, [pc, #252]	@ (80020e8 <HAL_TIM_Base_MspInit+0x124>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fee:	4a3e      	ldr	r2, [pc, #248]	@ (80020e8 <HAL_TIM_Base_MspInit+0x124>)
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ff6:	4b3c      	ldr	r3, [pc, #240]	@ (80020e8 <HAL_TIM_Base_MspInit+0x124>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	61bb      	str	r3, [r7, #24]
 8002000:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
 8002006:	4b38      	ldr	r3, [pc, #224]	@ (80020e8 <HAL_TIM_Base_MspInit+0x124>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200a:	4a37      	ldr	r2, [pc, #220]	@ (80020e8 <HAL_TIM_Base_MspInit+0x124>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	6313      	str	r3, [r2, #48]	@ 0x30
 8002012:	4b35      	ldr	r3, [pc, #212]	@ (80020e8 <HAL_TIM_Base_MspInit+0x124>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800201e:	2301      	movs	r3, #1
 8002020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002022:	2302      	movs	r3, #2
 8002024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002026:	2301      	movs	r3, #1
 8002028:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800202a:	2302      	movs	r3, #2
 800202c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800202e:	2301      	movs	r3, #1
 8002030:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002032:	f107 031c 	add.w	r3, r7, #28
 8002036:	4619      	mov	r1, r3
 8002038:	482c      	ldr	r0, [pc, #176]	@ (80020ec <HAL_TIM_Base_MspInit+0x128>)
 800203a:	f002 fdef 	bl	8004c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800203e:	2306      	movs	r3, #6
 8002040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002042:	2302      	movs	r3, #2
 8002044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002046:	2301      	movs	r3, #1
 8002048:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204a:	2300      	movs	r3, #0
 800204c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800204e:	2301      	movs	r3, #1
 8002050:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002052:	f107 031c 	add.w	r3, r7, #28
 8002056:	4619      	mov	r1, r3
 8002058:	4824      	ldr	r0, [pc, #144]	@ (80020ec <HAL_TIM_Base_MspInit+0x128>)
 800205a:	f002 fddf 	bl	8004c1c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800205e:	2200      	movs	r2, #0
 8002060:	2101      	movs	r1, #1
 8002062:	201c      	movs	r0, #28
 8002064:	f002 fc3d 	bl	80048e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002068:	201c      	movs	r0, #28
 800206a:	f002 fc56 	bl	800491a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800206e:	e036      	b.n	80020de <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM5)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a1e      	ldr	r2, [pc, #120]	@ (80020f0 <HAL_TIM_Base_MspInit+0x12c>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d116      	bne.n	80020a8 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	4b1a      	ldr	r3, [pc, #104]	@ (80020e8 <HAL_TIM_Base_MspInit+0x124>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002082:	4a19      	ldr	r2, [pc, #100]	@ (80020e8 <HAL_TIM_Base_MspInit+0x124>)
 8002084:	f043 0308 	orr.w	r3, r3, #8
 8002088:	6413      	str	r3, [r2, #64]	@ 0x40
 800208a:	4b17      	ldr	r3, [pc, #92]	@ (80020e8 <HAL_TIM_Base_MspInit+0x124>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208e:	f003 0308 	and.w	r3, r3, #8
 8002092:	613b      	str	r3, [r7, #16]
 8002094:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 4, 0);
 8002096:	2200      	movs	r2, #0
 8002098:	2104      	movs	r1, #4
 800209a:	2032      	movs	r0, #50	@ 0x32
 800209c:	f002 fc21 	bl	80048e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80020a0:	2032      	movs	r0, #50	@ 0x32
 80020a2:	f002 fc3a 	bl	800491a <HAL_NVIC_EnableIRQ>
}
 80020a6:	e01a      	b.n	80020de <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM6)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a11      	ldr	r2, [pc, #68]	@ (80020f4 <HAL_TIM_Base_MspInit+0x130>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d115      	bne.n	80020de <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	4b0c      	ldr	r3, [pc, #48]	@ (80020e8 <HAL_TIM_Base_MspInit+0x124>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ba:	4a0b      	ldr	r2, [pc, #44]	@ (80020e8 <HAL_TIM_Base_MspInit+0x124>)
 80020bc:	f043 0310 	orr.w	r3, r3, #16
 80020c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80020c2:	4b09      	ldr	r3, [pc, #36]	@ (80020e8 <HAL_TIM_Base_MspInit+0x124>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c6:	f003 0310 	and.w	r3, r3, #16
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80020ce:	2200      	movs	r2, #0
 80020d0:	2100      	movs	r1, #0
 80020d2:	2036      	movs	r0, #54	@ 0x36
 80020d4:	f002 fc05 	bl	80048e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80020d8:	2036      	movs	r0, #54	@ 0x36
 80020da:	f002 fc1e 	bl	800491a <HAL_NVIC_EnableIRQ>
}
 80020de:	bf00      	nop
 80020e0:	3730      	adds	r7, #48	@ 0x30
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40023800 	.word	0x40023800
 80020ec:	40020000 	.word	0x40020000
 80020f0:	40000c00 	.word	0x40000c00
 80020f4:	40001000 	.word	0x40001000

080020f8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a0b      	ldr	r2, [pc, #44]	@ (8002134 <HAL_TIM_PWM_MspInit+0x3c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d10d      	bne.n	8002126 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	4b0a      	ldr	r3, [pc, #40]	@ (8002138 <HAL_TIM_PWM_MspInit+0x40>)
 8002110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002112:	4a09      	ldr	r2, [pc, #36]	@ (8002138 <HAL_TIM_PWM_MspInit+0x40>)
 8002114:	f043 0302 	orr.w	r3, r3, #2
 8002118:	6453      	str	r3, [r2, #68]	@ 0x44
 800211a:	4b07      	ldr	r3, [pc, #28]	@ (8002138 <HAL_TIM_PWM_MspInit+0x40>)
 800211c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002126:	bf00      	nop
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	40010400 	.word	0x40010400
 8002138:	40023800 	.word	0x40023800

0800213c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08a      	sub	sp, #40	@ 0x28
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002144:	f107 0314 	add.w	r3, r7, #20
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	60da      	str	r2, [r3, #12]
 8002152:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a31      	ldr	r2, [pc, #196]	@ (8002220 <HAL_TIM_MspPostInit+0xe4>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d15b      	bne.n	8002216 <HAL_TIM_MspPostInit+0xda>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	613b      	str	r3, [r7, #16]
 8002162:	4b30      	ldr	r3, [pc, #192]	@ (8002224 <HAL_TIM_MspPostInit+0xe8>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002166:	4a2f      	ldr	r2, [pc, #188]	@ (8002224 <HAL_TIM_MspPostInit+0xe8>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	6313      	str	r3, [r2, #48]	@ 0x30
 800216e:	4b2d      	ldr	r3, [pc, #180]	@ (8002224 <HAL_TIM_MspPostInit+0xe8>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	613b      	str	r3, [r7, #16]
 8002178:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	4b29      	ldr	r3, [pc, #164]	@ (8002224 <HAL_TIM_MspPostInit+0xe8>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002182:	4a28      	ldr	r2, [pc, #160]	@ (8002224 <HAL_TIM_MspPostInit+0xe8>)
 8002184:	f043 0302 	orr.w	r3, r3, #2
 8002188:	6313      	str	r3, [r2, #48]	@ 0x30
 800218a:	4b26      	ldr	r3, [pc, #152]	@ (8002224 <HAL_TIM_MspPostInit+0xe8>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	4b22      	ldr	r3, [pc, #136]	@ (8002224 <HAL_TIM_MspPostInit+0xe8>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219e:	4a21      	ldr	r2, [pc, #132]	@ (8002224 <HAL_TIM_MspPostInit+0xe8>)
 80021a0:	f043 0304 	orr.w	r3, r3, #4
 80021a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002224 <HAL_TIM_MspPostInit+0xe8>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021aa:	f003 0304 	and.w	r3, r3, #4
 80021ae:	60bb      	str	r3, [r7, #8]
 80021b0:	68bb      	ldr	r3, [r7, #8]
    PB15     ------> TIM8_CH3N
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80021b2:	2380      	movs	r3, #128	@ 0x80
 80021b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b6:	2302      	movs	r3, #2
 80021b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021be:	2300      	movs	r3, #0
 80021c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80021c2:	2303      	movs	r3, #3
 80021c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c6:	f107 0314 	add.w	r3, r7, #20
 80021ca:	4619      	mov	r1, r3
 80021cc:	4816      	ldr	r0, [pc, #88]	@ (8002228 <HAL_TIM_MspPostInit+0xec>)
 80021ce:	f002 fd25 	bl	8004c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80021d2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80021d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d8:	2302      	movs	r3, #2
 80021da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e0:	2300      	movs	r3, #0
 80021e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80021e4:	2303      	movs	r3, #3
 80021e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e8:	f107 0314 	add.w	r3, r7, #20
 80021ec:	4619      	mov	r1, r3
 80021ee:	480f      	ldr	r0, [pc, #60]	@ (800222c <HAL_TIM_MspPostInit+0xf0>)
 80021f0:	f002 fd14 	bl	8004c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80021f4:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80021f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fa:	2302      	movs	r3, #2
 80021fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002202:	2300      	movs	r3, #0
 8002204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002206:	2303      	movs	r3, #3
 8002208:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800220a:	f107 0314 	add.w	r3, r7, #20
 800220e:	4619      	mov	r1, r3
 8002210:	4807      	ldr	r0, [pc, #28]	@ (8002230 <HAL_TIM_MspPostInit+0xf4>)
 8002212:	f002 fd03 	bl	8004c1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002216:	bf00      	nop
 8002218:	3728      	adds	r7, #40	@ 0x28
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40010400 	.word	0x40010400
 8002224:	40023800 	.word	0x40023800
 8002228:	40020000 	.word	0x40020000
 800222c:	40020400 	.word	0x40020400
 8002230:	40020800 	.word	0x40020800

08002234 <TrajCtrl_SetVelocity>:
TrajectoryControl_FindIndexForControl(float ctrl);


void
TrajCtrl_SetVelocity()
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
    RotationControl_SetControl(speed_arr[index]);
 8002238:	4b11      	ldr	r3, [pc, #68]	@ (8002280 <TrajCtrl_SetVelocity+0x4c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a11      	ldr	r2, [pc, #68]	@ (8002284 <TrajCtrl_SetVelocity+0x50>)
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	edd3 7a00 	vldr	s15, [r3]
 8002246:	eeb0 0a67 	vmov.f32	s0, s15
 800224a:	f7ff f9b1 	bl	80015b0 <RotationControl_SetControl>
    if (index >= speed_arr_len-1)
 800224e:	4b0e      	ldr	r3, [pc, #56]	@ (8002288 <TrajCtrl_SetVelocity+0x54>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	1e5a      	subs	r2, r3, #1
 8002254:	4b0a      	ldr	r3, [pc, #40]	@ (8002280 <TrajCtrl_SetVelocity+0x4c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	429a      	cmp	r2, r3
 800225a:	d809      	bhi.n	8002270 <TrajCtrl_SetVelocity+0x3c>
    {
        task_status           = TASKSTATUS_IDLE;
 800225c:	4b0b      	ldr	r3, [pc, #44]	@ (800228c <TrajCtrl_SetVelocity+0x58>)
 800225e:	2200      	movs	r2, #0
 8002260:	701a      	strb	r2, [r3, #0]
        enableDisableIT       = TIM6_IT_DISABLE;
 8002262:	4b0b      	ldr	r3, [pc, #44]	@ (8002290 <TrajCtrl_SetVelocity+0x5c>)
 8002264:	2200      	movs	r2, #0
 8002266:	701a      	strb	r2, [r3, #0]
        task_target.parameter = TARGET_NOTARGET;
 8002268:	4b0a      	ldr	r3, [pc, #40]	@ (8002294 <TrajCtrl_SetVelocity+0x60>)
 800226a:	2200      	movs	r2, #0
 800226c:	701a      	strb	r2, [r3, #0]
    }
    else { index += 1; }
}
 800226e:	e004      	b.n	800227a <TrajCtrl_SetVelocity+0x46>
    else { index += 1; }
 8002270:	4b03      	ldr	r3, [pc, #12]	@ (8002280 <TrajCtrl_SetVelocity+0x4c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	3301      	adds	r3, #1
 8002276:	4a02      	ldr	r2, [pc, #8]	@ (8002280 <TrajCtrl_SetVelocity+0x4c>)
 8002278:	6013      	str	r3, [r2, #0]
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	200028cc 	.word	0x200028cc
 8002284:	200008c8 	.word	0x200008c8
 8002288:	200028c8 	.word	0x200028c8
 800228c:	200028d0 	.word	0x200028d0
 8002290:	200004e0 	.word	0x200004e0
 8002294:	200004e4 	.word	0x200004e4

08002298 <TrajCtrl_ReachTargetSpeed>:

trajCtrl_taskStatus_t
TrajCtrl_ReachTargetSpeed(float target_speed)
{
 8002298:	b590      	push	{r4, r7, lr}
 800229a:	b08d      	sub	sp, #52	@ 0x34
 800229c:	af00      	add	r7, sp, #0
 800229e:	ed87 0a01 	vstr	s0, [r7, #4]
    // Остановка таймера на всякий случай:
    HAL_TIM_Base_Stop_IT(&htim6);
#endif

    // Стартовая скорость задается как измеренная с датчиков Холла
    float start_speed = SpeedTracker_GetFrequency();
 80022a2:	f7ff fbe1 	bl	8001a68 <SpeedTracker_GetFrequency>
 80022a6:	ed87 0a08 	vstr	s0, [r7, #32]

    // Установка переменной index на стартовое значение
    index = 0;
 80022aa:	4bb1      	ldr	r3, [pc, #708]	@ (8002570 <TrajCtrl_ReachTargetSpeed+0x2d8>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
    // Шаг изменения скорости
    float dw = 0.25f;
 80022b0:	f04f 537a 	mov.w	r3, #1048576000	@ 0x3e800000
 80022b4:	61fb      	str	r3, [r7, #28]
    // Ускорение для изменения скорости
    float acceleration = TRAJCTRL_DEFAULTACCELERATION;
 80022b6:	4baf      	ldr	r3, [pc, #700]	@ (8002574 <TrajCtrl_ReachTargetSpeed+0x2dc>)
 80022b8:	61bb      	str	r3, [r7, #24]
    // Переменная для планировщика траектории
    float inter_speed = start_speed;
 80022ba:	6a3b      	ldr	r3, [r7, #32]
 80022bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Время исполнения задачи [сек]
    float time = 0.f;
 80022be:	f04f 0300 	mov.w	r3, #0
 80022c2:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Ограничение заданной целевой скорости возможностями системы:
    if (target_speed > TRAJCTRL_MAXSPEED)
 80022c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80022c8:	ed9f 7aab 	vldr	s14, [pc, #684]	@ 8002578 <TrajCtrl_ReachTargetSpeed+0x2e0>
 80022cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d4:	dd02      	ble.n	80022dc <TrajCtrl_ReachTargetSpeed+0x44>
    { target_speed = TRAJCTRL_MAXSPEED; }
 80022d6:	4ba9      	ldr	r3, [pc, #676]	@ (800257c <TrajCtrl_ReachTargetSpeed+0x2e4>)
 80022d8:	607b      	str	r3, [r7, #4]
 80022da:	e031      	b.n	8002340 <TrajCtrl_ReachTargetSpeed+0xa8>
    else if (target_speed < -TRAJCTRL_MAXSPEED)
 80022dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80022e0:	ed9f 7aa7 	vldr	s14, [pc, #668]	@ 8002580 <TrajCtrl_ReachTargetSpeed+0x2e8>
 80022e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ec:	d502      	bpl.n	80022f4 <TrajCtrl_ReachTargetSpeed+0x5c>
    { target_speed = -TRAJCTRL_MAXSPEED; }
 80022ee:	4ba5      	ldr	r3, [pc, #660]	@ (8002584 <TrajCtrl_ReachTargetSpeed+0x2ec>)
 80022f0:	607b      	str	r3, [r7, #4]
 80022f2:	e025      	b.n	8002340 <TrajCtrl_ReachTargetSpeed+0xa8>
    else if ((target_speed < TRAJCTRL_MINSPEED)   &&
 80022f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80022f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80022fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002304:	d50a      	bpl.n	800231c <TrajCtrl_ReachTargetSpeed+0x84>
 8002306:	edd7 7a01 	vldr	s15, [r7, #4]
 800230a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800230e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002312:	db03      	blt.n	800231c <TrajCtrl_ReachTargetSpeed+0x84>
             (target_speed >= 0.f))
    { target_speed = TRAJCTRL_MINSPEED; }
 8002314:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002318:	607b      	str	r3, [r7, #4]
 800231a:	e011      	b.n	8002340 <TrajCtrl_ReachTargetSpeed+0xa8>
    else if ((target_speed > -TRAJCTRL_MINSPEED)  &&
 800231c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002320:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8002324:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800232c:	dd08      	ble.n	8002340 <TrajCtrl_ReachTargetSpeed+0xa8>
 800232e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002332:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800233a:	d501      	bpl.n	8002340 <TrajCtrl_ReachTargetSpeed+0xa8>
             (target_speed < 0.f))
    { target_speed = -TRAJCTRL_MINSPEED; }
 800233c:	4b92      	ldr	r3, [pc, #584]	@ (8002588 <TrajCtrl_ReachTargetSpeed+0x2f0>)
 800233e:	607b      	str	r3, [r7, #4]

    task_target.parameter = TARGET_VELOCITY;
 8002340:	4b92      	ldr	r3, [pc, #584]	@ (800258c <TrajCtrl_ReachTargetSpeed+0x2f4>)
 8002342:	2201      	movs	r2, #1
 8002344:	701a      	strb	r2, [r3, #0]
    task_target.speed = target_speed;
 8002346:	4a91      	ldr	r2, [pc, #580]	@ (800258c <TrajCtrl_ReachTargetSpeed+0x2f4>)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6053      	str	r3, [r2, #4]

    // Планировка траектории:
    for (uint8_t i = 0; i < 10; ++i)
 800234c:	2300      	movs	r3, #0
 800234e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002352:	e011      	b.n	8002378 <TrajCtrl_ReachTargetSpeed+0xe0>
    { speed_arr[i] = TrajCtrl_Speed2Ctrl(inter_speed); }
 8002354:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 8002358:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 800235c:	f000 fce6 	bl	8002d2c <TrajCtrl_Speed2Ctrl>
 8002360:	eef0 7a40 	vmov.f32	s15, s0
 8002364:	4a8a      	ldr	r2, [pc, #552]	@ (8002590 <TrajCtrl_ReachTargetSpeed+0x2f8>)
 8002366:	00a3      	lsls	r3, r4, #2
 8002368:	4413      	add	r3, r2
 800236a:	edc3 7a00 	vstr	s15, [r3]
    for (uint8_t i = 0; i < 10; ++i)
 800236e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002372:	3301      	adds	r3, #1
 8002374:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002378:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800237c:	2b09      	cmp	r3, #9
 800237e:	d9e9      	bls.n	8002354 <TrajCtrl_ReachTargetSpeed+0xbc>
    speed_arr_len = 10;
 8002380:	4b84      	ldr	r3, [pc, #528]	@ (8002594 <TrajCtrl_ReachTargetSpeed+0x2fc>)
 8002382:	220a      	movs	r2, #10
 8002384:	601a      	str	r2, [r3, #0]
    // Планировка траектории на случай start_speed < target_speed:
    if (start_speed < target_speed)
 8002386:	ed97 7a08 	vldr	s14, [r7, #32]
 800238a:	edd7 7a01 	vldr	s15, [r7, #4]
 800238e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002396:	f140 8095 	bpl.w	80024c4 <TrajCtrl_ReachTargetSpeed+0x22c>
    {
        time = (target_speed - start_speed) / acceleration;
 800239a:	ed97 7a01 	vldr	s14, [r7, #4]
 800239e:	edd7 7a08 	vldr	s15, [r7, #32]
 80023a2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80023a6:	ed97 7a06 	vldr	s14, [r7, #24]
 80023aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023ae:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        while (inter_speed < target_speed)
 80023b2:	e07c      	b.n	80024ae <TrajCtrl_ReachTargetSpeed+0x216>
        {
            if ((inter_speed >= 0.f)  &&
 80023b4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80023b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c0:	db17      	blt.n	80023f2 <TrajCtrl_ReachTargetSpeed+0x15a>
 80023c2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80023c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80023ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d2:	d50e      	bpl.n	80023f2 <TrajCtrl_ReachTargetSpeed+0x15a>
                (inter_speed < 1.f))
            { speed_arr[speed_arr_len-1] = TrajCtrl_Speed2Ctrl(1.f); }
 80023d4:	4b6f      	ldr	r3, [pc, #444]	@ (8002594 <TrajCtrl_ReachTargetSpeed+0x2fc>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	1e5c      	subs	r4, r3, #1
 80023da:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80023de:	f000 fca5 	bl	8002d2c <TrajCtrl_Speed2Ctrl>
 80023e2:	eef0 7a40 	vmov.f32	s15, s0
 80023e6:	4a6a      	ldr	r2, [pc, #424]	@ (8002590 <TrajCtrl_ReachTargetSpeed+0x2f8>)
 80023e8:	00a3      	lsls	r3, r4, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	edc3 7a00 	vstr	s15, [r3]
 80023f0:	e02c      	b.n	800244c <TrajCtrl_ReachTargetSpeed+0x1b4>
            else if (inter_speed < 0.f && inter_speed > -1.f)
 80023f2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80023f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023fe:	d517      	bpl.n	8002430 <TrajCtrl_ReachTargetSpeed+0x198>
 8002400:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002404:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8002408:	eef4 7ac7 	vcmpe.f32	s15, s14
 800240c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002410:	dd0e      	ble.n	8002430 <TrajCtrl_ReachTargetSpeed+0x198>
            { speed_arr[speed_arr_len-1] = TrajCtrl_Speed2Ctrl(-1.f); }
 8002412:	4b60      	ldr	r3, [pc, #384]	@ (8002594 <TrajCtrl_ReachTargetSpeed+0x2fc>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	1e5c      	subs	r4, r3, #1
 8002418:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 800241c:	f000 fc86 	bl	8002d2c <TrajCtrl_Speed2Ctrl>
 8002420:	eef0 7a40 	vmov.f32	s15, s0
 8002424:	4a5a      	ldr	r2, [pc, #360]	@ (8002590 <TrajCtrl_ReachTargetSpeed+0x2f8>)
 8002426:	00a3      	lsls	r3, r4, #2
 8002428:	4413      	add	r3, r2
 800242a:	edc3 7a00 	vstr	s15, [r3]
 800242e:	e00d      	b.n	800244c <TrajCtrl_ReachTargetSpeed+0x1b4>
            else
            { speed_arr[speed_arr_len-1] = TrajCtrl_Speed2Ctrl(inter_speed); }
 8002430:	4b58      	ldr	r3, [pc, #352]	@ (8002594 <TrajCtrl_ReachTargetSpeed+0x2fc>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	1e5c      	subs	r4, r3, #1
 8002436:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 800243a:	f000 fc77 	bl	8002d2c <TrajCtrl_Speed2Ctrl>
 800243e:	eef0 7a40 	vmov.f32	s15, s0
 8002442:	4a53      	ldr	r2, [pc, #332]	@ (8002590 <TrajCtrl_ReachTargetSpeed+0x2f8>)
 8002444:	00a3      	lsls	r3, r4, #2
 8002446:	4413      	add	r3, r2
 8002448:	edc3 7a00 	vstr	s15, [r3]
            inter_speed += dw;
 800244c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002450:	edd7 7a07 	vldr	s15, [r7, #28]
 8002454:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002458:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            speed_arr_len += 1;
 800245c:	4b4d      	ldr	r3, [pc, #308]	@ (8002594 <TrajCtrl_ReachTargetSpeed+0x2fc>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	3301      	adds	r3, #1
 8002462:	4a4c      	ldr	r2, [pc, #304]	@ (8002594 <TrajCtrl_ReachTargetSpeed+0x2fc>)
 8002464:	6013      	str	r3, [r2, #0]
            if ((inter_speed >= target_speed)  &&
 8002466:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800246a:	edd7 7a01 	vldr	s15, [r7, #4]
 800246e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002476:	db1a      	blt.n	80024ae <TrajCtrl_ReachTargetSpeed+0x216>
                (inter_speed < target_speed + dw))
 8002478:	ed97 7a01 	vldr	s14, [r7, #4]
 800247c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002480:	ee77 7a27 	vadd.f32	s15, s14, s15
            if ((inter_speed >= target_speed)  &&
 8002484:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002488:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800248c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002490:	d50d      	bpl.n	80024ae <TrajCtrl_ReachTargetSpeed+0x216>
            { speed_arr[speed_arr_len-1] = TrajCtrl_Speed2Ctrl(target_speed); }
 8002492:	4b40      	ldr	r3, [pc, #256]	@ (8002594 <TrajCtrl_ReachTargetSpeed+0x2fc>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	1e5c      	subs	r4, r3, #1
 8002498:	ed97 0a01 	vldr	s0, [r7, #4]
 800249c:	f000 fc46 	bl	8002d2c <TrajCtrl_Speed2Ctrl>
 80024a0:	eef0 7a40 	vmov.f32	s15, s0
 80024a4:	4a3a      	ldr	r2, [pc, #232]	@ (8002590 <TrajCtrl_ReachTargetSpeed+0x2f8>)
 80024a6:	00a3      	lsls	r3, r4, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	edc3 7a00 	vstr	s15, [r3]
        while (inter_speed < target_speed)
 80024ae:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80024b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80024b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024be:	f53f af79 	bmi.w	80023b4 <TrajCtrl_ReachTargetSpeed+0x11c>
 80024c2:	e0b2      	b.n	800262a <TrajCtrl_ReachTargetSpeed+0x392>
        }
    }
    // Планировка траектории на случай start_speed > target_speed:
    else if (start_speed > target_speed)
 80024c4:	ed97 7a08 	vldr	s14, [r7, #32]
 80024c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80024cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d4:	f340 80a9 	ble.w	800262a <TrajCtrl_ReachTargetSpeed+0x392>
    {
        time = (start_speed - target_speed) / acceleration;
 80024d8:	ed97 7a08 	vldr	s14, [r7, #32]
 80024dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80024e0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80024e4:	ed97 7a06 	vldr	s14, [r7, #24]
 80024e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024ec:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        while (inter_speed > target_speed)
 80024f0:	e091      	b.n	8002616 <TrajCtrl_ReachTargetSpeed+0x37e>
        {
            if ((inter_speed >= 0.f)  &&
 80024f2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80024f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024fe:	db17      	blt.n	8002530 <TrajCtrl_ReachTargetSpeed+0x298>
 8002500:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002504:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002508:	eef4 7ac7 	vcmpe.f32	s15, s14
 800250c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002510:	d50e      	bpl.n	8002530 <TrajCtrl_ReachTargetSpeed+0x298>
               (inter_speed < 1.f))
            { speed_arr[speed_arr_len-1] = TrajCtrl_Speed2Ctrl(1.f); }
 8002512:	4b20      	ldr	r3, [pc, #128]	@ (8002594 <TrajCtrl_ReachTargetSpeed+0x2fc>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	1e5c      	subs	r4, r3, #1
 8002518:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800251c:	f000 fc06 	bl	8002d2c <TrajCtrl_Speed2Ctrl>
 8002520:	eef0 7a40 	vmov.f32	s15, s0
 8002524:	4a1a      	ldr	r2, [pc, #104]	@ (8002590 <TrajCtrl_ReachTargetSpeed+0x2f8>)
 8002526:	00a3      	lsls	r3, r4, #2
 8002528:	4413      	add	r3, r2
 800252a:	edc3 7a00 	vstr	s15, [r3]
 800252e:	e041      	b.n	80025b4 <TrajCtrl_ReachTargetSpeed+0x31c>
            else if ((inter_speed < 0.f)  &&
 8002530:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002534:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800253c:	d52c      	bpl.n	8002598 <TrajCtrl_ReachTargetSpeed+0x300>
 800253e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002542:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8002546:	eef4 7ac7 	vcmpe.f32	s15, s14
 800254a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800254e:	dd23      	ble.n	8002598 <TrajCtrl_ReachTargetSpeed+0x300>
                    (inter_speed > -1.f))
            { speed_arr[speed_arr_len-1] = TrajCtrl_Speed2Ctrl(-1.f); }
 8002550:	4b10      	ldr	r3, [pc, #64]	@ (8002594 <TrajCtrl_ReachTargetSpeed+0x2fc>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	1e5c      	subs	r4, r3, #1
 8002556:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 800255a:	f000 fbe7 	bl	8002d2c <TrajCtrl_Speed2Ctrl>
 800255e:	eef0 7a40 	vmov.f32	s15, s0
 8002562:	4a0b      	ldr	r2, [pc, #44]	@ (8002590 <TrajCtrl_ReachTargetSpeed+0x2f8>)
 8002564:	00a3      	lsls	r3, r4, #2
 8002566:	4413      	add	r3, r2
 8002568:	edc3 7a00 	vstr	s15, [r3]
 800256c:	e022      	b.n	80025b4 <TrajCtrl_ReachTargetSpeed+0x31c>
 800256e:	bf00      	nop
 8002570:	200028cc 	.word	0x200028cc
 8002574:	40a00000 	.word	0x40a00000
 8002578:	42a00000 	.word	0x42a00000
 800257c:	42a00000 	.word	0x42a00000
 8002580:	c2a00000 	.word	0xc2a00000
 8002584:	c2a00000 	.word	0xc2a00000
 8002588:	bf800000 	.word	0xbf800000
 800258c:	200004e4 	.word	0x200004e4
 8002590:	200008c8 	.word	0x200008c8
 8002594:	200028c8 	.word	0x200028c8
            else
            { speed_arr[speed_arr_len-1] = TrajCtrl_Speed2Ctrl(inter_speed); }
 8002598:	4b4f      	ldr	r3, [pc, #316]	@ (80026d8 <TrajCtrl_ReachTargetSpeed+0x440>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	1e5c      	subs	r4, r3, #1
 800259e:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 80025a2:	f000 fbc3 	bl	8002d2c <TrajCtrl_Speed2Ctrl>
 80025a6:	eef0 7a40 	vmov.f32	s15, s0
 80025aa:	4a4c      	ldr	r2, [pc, #304]	@ (80026dc <TrajCtrl_ReachTargetSpeed+0x444>)
 80025ac:	00a3      	lsls	r3, r4, #2
 80025ae:	4413      	add	r3, r2
 80025b0:	edc3 7a00 	vstr	s15, [r3]
            inter_speed -= dw;
 80025b4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80025b8:	edd7 7a07 	vldr	s15, [r7, #28]
 80025bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025c0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            speed_arr_len += 1;
 80025c4:	4b44      	ldr	r3, [pc, #272]	@ (80026d8 <TrajCtrl_ReachTargetSpeed+0x440>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	3301      	adds	r3, #1
 80025ca:	4a43      	ldr	r2, [pc, #268]	@ (80026d8 <TrajCtrl_ReachTargetSpeed+0x440>)
 80025cc:	6013      	str	r3, [r2, #0]
            if ((inter_speed <= target_speed)  &&
 80025ce:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80025d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80025d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025de:	d81a      	bhi.n	8002616 <TrajCtrl_ReachTargetSpeed+0x37e>
                (inter_speed > target_speed - dw))
 80025e0:	ed97 7a01 	vldr	s14, [r7, #4]
 80025e4:	edd7 7a07 	vldr	s15, [r7, #28]
 80025e8:	ee77 7a67 	vsub.f32	s15, s14, s15
            if ((inter_speed <= target_speed)  &&
 80025ec:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80025f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f8:	dd0d      	ble.n	8002616 <TrajCtrl_ReachTargetSpeed+0x37e>
            { speed_arr[speed_arr_len-1] = TrajCtrl_Speed2Ctrl(target_speed); }
 80025fa:	4b37      	ldr	r3, [pc, #220]	@ (80026d8 <TrajCtrl_ReachTargetSpeed+0x440>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	1e5c      	subs	r4, r3, #1
 8002600:	ed97 0a01 	vldr	s0, [r7, #4]
 8002604:	f000 fb92 	bl	8002d2c <TrajCtrl_Speed2Ctrl>
 8002608:	eef0 7a40 	vmov.f32	s15, s0
 800260c:	4a33      	ldr	r2, [pc, #204]	@ (80026dc <TrajCtrl_ReachTargetSpeed+0x444>)
 800260e:	00a3      	lsls	r3, r4, #2
 8002610:	4413      	add	r3, r2
 8002612:	edc3 7a00 	vstr	s15, [r3]
        while (inter_speed > target_speed)
 8002616:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800261a:	edd7 7a01 	vldr	s15, [r7, #4]
 800261e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002626:	f73f af64 	bgt.w	80024f2 <TrajCtrl_ReachTargetSpeed+0x25a>
        }
    }

    uint16_t acceleraion_ARR = (uint16_t)(10000 * time / (speed_arr_len - 1) + 1);
 800262a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800262e:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80026e0 <TrajCtrl_ReachTargetSpeed+0x448>
 8002632:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002636:	4b28      	ldr	r3, [pc, #160]	@ (80026d8 <TrajCtrl_ReachTargetSpeed+0x440>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	3b01      	subs	r3, #1
 800263c:	ee07 3a90 	vmov	s15, r3
 8002640:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002644:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002648:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800264c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002650:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002654:	ee17 3a90 	vmov	r3, s15
 8002658:	82fb      	strh	r3, [r7, #22]
    // Настройка таймера, отвечающего за отработку траектории:
    TIM_MasterConfigTypeDef sMasterConfig = {
 800265a:	2300      	movs	r3, #0
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	2300      	movs	r3, #0
 8002660:	613b      	str	r3, [r7, #16]
        .MasterOutputTrigger = TIM_TRGO_RESET,
        .MasterSlaveMode     = TIM_MASTERSLAVEMODE_DISABLE
    };
    htim6.Instance = TIM6;
 8002662:	4b20      	ldr	r3, [pc, #128]	@ (80026e4 <TrajCtrl_ReachTargetSpeed+0x44c>)
 8002664:	4a20      	ldr	r2, [pc, #128]	@ (80026e8 <TrajCtrl_ReachTargetSpeed+0x450>)
 8002666:	601a      	str	r2, [r3, #0]
    htim6.Init.Prescaler = 4800-1;
 8002668:	4b1e      	ldr	r3, [pc, #120]	@ (80026e4 <TrajCtrl_ReachTargetSpeed+0x44c>)
 800266a:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 800266e:	605a      	str	r2, [r3, #4]
    htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002670:	4b1c      	ldr	r3, [pc, #112]	@ (80026e4 <TrajCtrl_ReachTargetSpeed+0x44c>)
 8002672:	2200      	movs	r2, #0
 8002674:	609a      	str	r2, [r3, #8]
    htim6.Init.Period = acceleraion_ARR-1;
 8002676:	8afb      	ldrh	r3, [r7, #22]
 8002678:	3b01      	subs	r3, #1
 800267a:	461a      	mov	r2, r3
 800267c:	4b19      	ldr	r3, [pc, #100]	@ (80026e4 <TrajCtrl_ReachTargetSpeed+0x44c>)
 800267e:	60da      	str	r2, [r3, #12]
    htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002680:	4b18      	ldr	r3, [pc, #96]	@ (80026e4 <TrajCtrl_ReachTargetSpeed+0x44c>)
 8002682:	2200      	movs	r2, #0
 8002684:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim6) != HAL_OK) { Error_Handler(); }
 8002686:	4817      	ldr	r0, [pc, #92]	@ (80026e4 <TrajCtrl_ReachTargetSpeed+0x44c>)
 8002688:	f003 fa06 	bl	8005a98 <HAL_TIM_Base_Init>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <TrajCtrl_ReachTargetSpeed+0x3fe>
 8002692:	f7fe febd 	bl	8001410 <Error_Handler>
    if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) { Error_Handler(); }
 8002696:	f107 030c 	add.w	r3, r7, #12
 800269a:	4619      	mov	r1, r3
 800269c:	4811      	ldr	r0, [pc, #68]	@ (80026e4 <TrajCtrl_ReachTargetSpeed+0x44c>)
 800269e:	f004 fdc1 	bl	8007224 <HAL_TIMEx_MasterConfigSynchronization>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <TrajCtrl_ReachTargetSpeed+0x414>
 80026a8:	f7fe feb2 	bl	8001410 <Error_Handler>

    // Начинаем отработку траектории
    // Подать питание на LTC3130 и датчики Холла
    VoltageControl_MotorHallEnable();
 80026ac:	2201      	movs	r2, #1
 80026ae:	2180      	movs	r1, #128	@ 0x80
 80026b0:	480e      	ldr	r0, [pc, #56]	@ (80026ec <TrajCtrl_ReachTargetSpeed+0x454>)
 80026b2:	f002 fc4f 	bl	8004f54 <HAL_GPIO_WritePin>
    // Старт контроля напряжения на выходе LTC3130
    //VoltageControl_Start();
    // Установка рабочего напряжения для ускорения
    //VoltageControl_UpdateTargetVoltage(12.f);
    // Включить вращение маховика
    RotationControl_Init();
 80026b6:	f7fe fee9 	bl	800148c <RotationControl_Init>

    // Планировщик скорости переводится в режим "занят"
    task_status = TASKSTATUS_BUSY;
 80026ba:	4b0d      	ldr	r3, [pc, #52]	@ (80026f0 <TrajCtrl_ReachTargetSpeed+0x458>)
 80026bc:	2201      	movs	r2, #1
 80026be:	701a      	strb	r2, [r3, #0]
    enableDisableIT = TIM6_IT_ENABLE;
 80026c0:	4b0c      	ldr	r3, [pc, #48]	@ (80026f4 <TrajCtrl_ReachTargetSpeed+0x45c>)
 80026c2:	2201      	movs	r2, #1
 80026c4:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(&htim6);
 80026c6:	4807      	ldr	r0, [pc, #28]	@ (80026e4 <TrajCtrl_ReachTargetSpeed+0x44c>)
 80026c8:	f003 fa36 	bl	8005b38 <HAL_TIM_Base_Start_IT>

    return TASK_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3734      	adds	r7, #52	@ 0x34
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd90      	pop	{r4, r7, pc}
 80026d6:	bf00      	nop
 80026d8:	200028c8 	.word	0x200028c8
 80026dc:	200008c8 	.word	0x200008c8
 80026e0:	461c4000 	.word	0x461c4000
 80026e4:	20000838 	.word	0x20000838
 80026e8:	40001000 	.word	0x40001000
 80026ec:	40020400 	.word	0x40020400
 80026f0:	200028d0 	.word	0x200028d0
 80026f4:	200004e0 	.word	0x200004e0

080026f8 <TrajCtrl_KeepAcceleration>:

trajCtrl_taskStatus_t
TrajCtrl_KeepAcceleration(float target_acceleration){
 80026f8:	b590      	push	{r4, r7, lr}
 80026fa:	b08d      	sub	sp, #52	@ 0x34
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	ed87 0a01 	vstr	s0, [r7, #4]

    // Остановка таймера на всякий случай:
    HAL_TIM_Base_Stop_IT(&htim6);
#endif
    // установка переменной index на стартовое значение
    index = 0;
 8002702:	4bbb      	ldr	r3, [pc, #748]	@ (80029f0 <TrajCtrl_KeepAcceleration+0x2f8>)
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
    // стартовая скорость задается как измеренная с датчиков Холла
    float start_speed = SpeedTracker_GetFrequency();
 8002708:	f7ff f9ae 	bl	8001a68 <SpeedTracker_GetFrequency>
 800270c:	ed87 0a06 	vstr	s0, [r7, #24]
    // шаг изменения скорости
    float dw = 0.25f;
 8002710:	f04f 537a 	mov.w	r3, #1048576000	@ 0x3e800000
 8002714:	617b      	str	r3, [r7, #20]
    // ускорение для изменения скорости
    float acceleration = target_acceleration;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // переменная для планировщика траектории
    float inter_speed = start_speed;
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	62bb      	str	r3, [r7, #40]	@ 0x28
    // время исполнения задачи [сек]
    float time = 0.f;
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	627b      	str	r3, [r7, #36]	@ 0x24
    float target_speed;

    // Ограничение заданной целевой скорости возможностями системы:
    if (target_acceleration >= 0.f)
 8002724:	edd7 7a01 	vldr	s15, [r7, #4]
 8002728:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800272c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002730:	db02      	blt.n	8002738 <TrajCtrl_KeepAcceleration+0x40>
    { target_speed = TRAJCTRL_MAXSPEED; }
 8002732:	4bb0      	ldr	r3, [pc, #704]	@ (80029f4 <TrajCtrl_KeepAcceleration+0x2fc>)
 8002734:	623b      	str	r3, [r7, #32]
 8002736:	e001      	b.n	800273c <TrajCtrl_KeepAcceleration+0x44>
    else
    { target_speed = -TRAJCTRL_MAXSPEED; }
 8002738:	4baf      	ldr	r3, [pc, #700]	@ (80029f8 <TrajCtrl_KeepAcceleration+0x300>)
 800273a:	623b      	str	r3, [r7, #32]

    // Ограничение заданного ускорения возможностями системы:
    if (acceleration > TRAJCTRL_MAXACCELERATION)
 800273c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002740:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8002744:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800274c:	dd03      	ble.n	8002756 <TrajCtrl_KeepAcceleration+0x5e>
    { acceleration = TRAJCTRL_MAXACCELERATION; }
 800274e:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8002752:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002754:	e031      	b.n	80027ba <TrajCtrl_KeepAcceleration+0xc2>

    else if (acceleration < -TRAJCTRL_MAXACCELERATION)
 8002756:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800275a:	eeba 7a00 	vmov.f32	s14, #160	@ 0xc1000000 -8.0
 800275e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002766:	d503      	bpl.n	8002770 <TrajCtrl_KeepAcceleration+0x78>
    { acceleration = -TRAJCTRL_MAXACCELERATION; }
 8002768:	f04f 4341 	mov.w	r3, #3238002688	@ 0xc1000000
 800276c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800276e:	e024      	b.n	80027ba <TrajCtrl_KeepAcceleration+0xc2>

    else if ((acceleration < TRAJCTRL_MINACCELERATION)  &&
 8002770:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002774:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 80029fc <TrajCtrl_KeepAcceleration+0x304>
 8002778:	eef4 7ac7 	vcmpe.f32	s15, s14
 800277c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002780:	d509      	bpl.n	8002796 <TrajCtrl_KeepAcceleration+0x9e>
 8002782:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002786:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800278a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800278e:	db02      	blt.n	8002796 <TrajCtrl_KeepAcceleration+0x9e>
             (acceleration >= 0.f))
    { acceleration = TRAJCTRL_MINACCELERATION; }
 8002790:	4b9b      	ldr	r3, [pc, #620]	@ (8002a00 <TrajCtrl_KeepAcceleration+0x308>)
 8002792:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002794:	e011      	b.n	80027ba <TrajCtrl_KeepAcceleration+0xc2>
    else if ((acceleration > -TRAJCTRL_MINACCELERATION)  &&
 8002796:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800279a:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8002a04 <TrajCtrl_KeepAcceleration+0x30c>
 800279e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a6:	dd08      	ble.n	80027ba <TrajCtrl_KeepAcceleration+0xc2>
 80027a8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80027ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b4:	d501      	bpl.n	80027ba <TrajCtrl_KeepAcceleration+0xc2>
             (acceleration < 0.f))
    { acceleration = -TRAJCTRL_MINACCELERATION; }
 80027b6:	4b94      	ldr	r3, [pc, #592]	@ (8002a08 <TrajCtrl_KeepAcceleration+0x310>)
 80027b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    task_target.parameter    = TARGET_ACCELERATION;
 80027ba:	4b94      	ldr	r3, [pc, #592]	@ (8002a0c <TrajCtrl_KeepAcceleration+0x314>)
 80027bc:	2202      	movs	r2, #2
 80027be:	701a      	strb	r2, [r3, #0]
    task_target.acceleration = target_acceleration;
 80027c0:	4a92      	ldr	r2, [pc, #584]	@ (8002a0c <TrajCtrl_KeepAcceleration+0x314>)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6093      	str	r3, [r2, #8]
    task_target.speed        = target_speed;
 80027c6:	4a91      	ldr	r2, [pc, #580]	@ (8002a0c <TrajCtrl_KeepAcceleration+0x314>)
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	6053      	str	r3, [r2, #4]

    // Планировка траектории:
    for (uint8_t i = 0; i < 10; ++i)
 80027cc:	2300      	movs	r3, #0
 80027ce:	77fb      	strb	r3, [r7, #31]
 80027d0:	e00e      	b.n	80027f0 <TrajCtrl_KeepAcceleration+0xf8>
    { speed_arr[i] = TrajCtrl_Speed2Ctrl(inter_speed); }
 80027d2:	7ffc      	ldrb	r4, [r7, #31]
 80027d4:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 80027d8:	f000 faa8 	bl	8002d2c <TrajCtrl_Speed2Ctrl>
 80027dc:	eef0 7a40 	vmov.f32	s15, s0
 80027e0:	4a8b      	ldr	r2, [pc, #556]	@ (8002a10 <TrajCtrl_KeepAcceleration+0x318>)
 80027e2:	00a3      	lsls	r3, r4, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	edc3 7a00 	vstr	s15, [r3]
    for (uint8_t i = 0; i < 10; ++i)
 80027ea:	7ffb      	ldrb	r3, [r7, #31]
 80027ec:	3301      	adds	r3, #1
 80027ee:	77fb      	strb	r3, [r7, #31]
 80027f0:	7ffb      	ldrb	r3, [r7, #31]
 80027f2:	2b09      	cmp	r3, #9
 80027f4:	d9ed      	bls.n	80027d2 <TrajCtrl_KeepAcceleration+0xda>
    speed_arr_len = 10;
 80027f6:	4b87      	ldr	r3, [pc, #540]	@ (8002a14 <TrajCtrl_KeepAcceleration+0x31c>)
 80027f8:	220a      	movs	r2, #10
 80027fa:	601a      	str	r2, [r3, #0]
    // Планировка траектории на случай start_speed < target_speed:
    if (start_speed < target_speed)
 80027fc:	ed97 7a06 	vldr	s14, [r7, #24]
 8002800:	edd7 7a08 	vldr	s15, [r7, #32]
 8002804:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800280c:	f140 8098 	bpl.w	8002940 <TrajCtrl_KeepAcceleration+0x248>
    {
        time = (target_speed - start_speed) / acceleration;
 8002810:	ed97 7a08 	vldr	s14, [r7, #32]
 8002814:	edd7 7a06 	vldr	s15, [r7, #24]
 8002818:	ee77 6a67 	vsub.f32	s13, s14, s15
 800281c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002820:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002824:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        speed_arr_len = 1;
 8002828:	4b7a      	ldr	r3, [pc, #488]	@ (8002a14 <TrajCtrl_KeepAcceleration+0x31c>)
 800282a:	2201      	movs	r2, #1
 800282c:	601a      	str	r2, [r3, #0]
        while (inter_speed < target_speed)
 800282e:	e07c      	b.n	800292a <TrajCtrl_KeepAcceleration+0x232>
        {
            if ((inter_speed >= 0.f)  &&
 8002830:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002834:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800283c:	db17      	blt.n	800286e <TrajCtrl_KeepAcceleration+0x176>
 800283e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002842:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002846:	eef4 7ac7 	vcmpe.f32	s15, s14
 800284a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800284e:	d50e      	bpl.n	800286e <TrajCtrl_KeepAcceleration+0x176>
                (inter_speed < 1.f))
            { speed_arr[speed_arr_len-1] = TrajCtrl_Speed2Ctrl(1.f); }
 8002850:	4b70      	ldr	r3, [pc, #448]	@ (8002a14 <TrajCtrl_KeepAcceleration+0x31c>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	1e5c      	subs	r4, r3, #1
 8002856:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800285a:	f000 fa67 	bl	8002d2c <TrajCtrl_Speed2Ctrl>
 800285e:	eef0 7a40 	vmov.f32	s15, s0
 8002862:	4a6b      	ldr	r2, [pc, #428]	@ (8002a10 <TrajCtrl_KeepAcceleration+0x318>)
 8002864:	00a3      	lsls	r3, r4, #2
 8002866:	4413      	add	r3, r2
 8002868:	edc3 7a00 	vstr	s15, [r3]
 800286c:	e02c      	b.n	80028c8 <TrajCtrl_KeepAcceleration+0x1d0>
            else if ((inter_speed < 0.f)  &&
 800286e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002872:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800287a:	d517      	bpl.n	80028ac <TrajCtrl_KeepAcceleration+0x1b4>
 800287c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002880:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8002884:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800288c:	dd0e      	ble.n	80028ac <TrajCtrl_KeepAcceleration+0x1b4>
                     (inter_speed > -1.f))
            { speed_arr[speed_arr_len-1] = TrajCtrl_Speed2Ctrl(-1.f); }
 800288e:	4b61      	ldr	r3, [pc, #388]	@ (8002a14 <TrajCtrl_KeepAcceleration+0x31c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	1e5c      	subs	r4, r3, #1
 8002894:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8002898:	f000 fa48 	bl	8002d2c <TrajCtrl_Speed2Ctrl>
 800289c:	eef0 7a40 	vmov.f32	s15, s0
 80028a0:	4a5b      	ldr	r2, [pc, #364]	@ (8002a10 <TrajCtrl_KeepAcceleration+0x318>)
 80028a2:	00a3      	lsls	r3, r4, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	edc3 7a00 	vstr	s15, [r3]
 80028aa:	e00d      	b.n	80028c8 <TrajCtrl_KeepAcceleration+0x1d0>
            else
            { speed_arr[speed_arr_len-1] = TrajCtrl_Speed2Ctrl(inter_speed); }
 80028ac:	4b59      	ldr	r3, [pc, #356]	@ (8002a14 <TrajCtrl_KeepAcceleration+0x31c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	1e5c      	subs	r4, r3, #1
 80028b2:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 80028b6:	f000 fa39 	bl	8002d2c <TrajCtrl_Speed2Ctrl>
 80028ba:	eef0 7a40 	vmov.f32	s15, s0
 80028be:	4a54      	ldr	r2, [pc, #336]	@ (8002a10 <TrajCtrl_KeepAcceleration+0x318>)
 80028c0:	00a3      	lsls	r3, r4, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	edc3 7a00 	vstr	s15, [r3]
            inter_speed += dw;
 80028c8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80028cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80028d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028d4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            speed_arr_len += 1;
 80028d8:	4b4e      	ldr	r3, [pc, #312]	@ (8002a14 <TrajCtrl_KeepAcceleration+0x31c>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	3301      	adds	r3, #1
 80028de:	4a4d      	ldr	r2, [pc, #308]	@ (8002a14 <TrajCtrl_KeepAcceleration+0x31c>)
 80028e0:	6013      	str	r3, [r2, #0]
            if ((inter_speed >= target_speed)  &&
 80028e2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80028e6:	edd7 7a08 	vldr	s15, [r7, #32]
 80028ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f2:	db1a      	blt.n	800292a <TrajCtrl_KeepAcceleration+0x232>
                (inter_speed < target_speed + dw))
 80028f4:	ed97 7a08 	vldr	s14, [r7, #32]
 80028f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80028fc:	ee77 7a27 	vadd.f32	s15, s14, s15
            if ((inter_speed >= target_speed)  &&
 8002900:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002904:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800290c:	d50d      	bpl.n	800292a <TrajCtrl_KeepAcceleration+0x232>
            { speed_arr[speed_arr_len-1] = TrajCtrl_Speed2Ctrl(target_speed); }
 800290e:	4b41      	ldr	r3, [pc, #260]	@ (8002a14 <TrajCtrl_KeepAcceleration+0x31c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	1e5c      	subs	r4, r3, #1
 8002914:	ed97 0a08 	vldr	s0, [r7, #32]
 8002918:	f000 fa08 	bl	8002d2c <TrajCtrl_Speed2Ctrl>
 800291c:	eef0 7a40 	vmov.f32	s15, s0
 8002920:	4a3b      	ldr	r2, [pc, #236]	@ (8002a10 <TrajCtrl_KeepAcceleration+0x318>)
 8002922:	00a3      	lsls	r3, r4, #2
 8002924:	4413      	add	r3, r2
 8002926:	edc3 7a00 	vstr	s15, [r3]
        while (inter_speed < target_speed)
 800292a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800292e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002932:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800293a:	f53f af79 	bmi.w	8002830 <TrajCtrl_KeepAcceleration+0x138>
 800293e:	e0b4      	b.n	8002aaa <TrajCtrl_KeepAcceleration+0x3b2>
        }
    }
    // Планировка траектории на случай start_speed > target_speed:
    else if (start_speed > target_speed)
 8002940:	ed97 7a06 	vldr	s14, [r7, #24]
 8002944:	edd7 7a08 	vldr	s15, [r7, #32]
 8002948:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800294c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002950:	f340 80ab 	ble.w	8002aaa <TrajCtrl_KeepAcceleration+0x3b2>
    {
        time = (target_speed - start_speed) / acceleration;
 8002954:	ed97 7a08 	vldr	s14, [r7, #32]
 8002958:	edd7 7a06 	vldr	s15, [r7, #24]
 800295c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002960:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002964:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002968:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        speed_arr_len = 1;
 800296c:	4b29      	ldr	r3, [pc, #164]	@ (8002a14 <TrajCtrl_KeepAcceleration+0x31c>)
 800296e:	2201      	movs	r2, #1
 8002970:	601a      	str	r2, [r3, #0]
        while (inter_speed > target_speed)
 8002972:	e090      	b.n	8002a96 <TrajCtrl_KeepAcceleration+0x39e>
        {
            if ((inter_speed >= 0.f)  &&
 8002974:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002978:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800297c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002980:	db17      	blt.n	80029b2 <TrajCtrl_KeepAcceleration+0x2ba>
 8002982:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002986:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800298a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800298e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002992:	d50e      	bpl.n	80029b2 <TrajCtrl_KeepAcceleration+0x2ba>
                (inter_speed < 1.f))
            { speed_arr[speed_arr_len-1] = TrajCtrl_Speed2Ctrl(1.f); }
 8002994:	4b1f      	ldr	r3, [pc, #124]	@ (8002a14 <TrajCtrl_KeepAcceleration+0x31c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	1e5c      	subs	r4, r3, #1
 800299a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800299e:	f000 f9c5 	bl	8002d2c <TrajCtrl_Speed2Ctrl>
 80029a2:	eef0 7a40 	vmov.f32	s15, s0
 80029a6:	4a1a      	ldr	r2, [pc, #104]	@ (8002a10 <TrajCtrl_KeepAcceleration+0x318>)
 80029a8:	00a3      	lsls	r3, r4, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	edc3 7a00 	vstr	s15, [r3]
 80029b0:	e040      	b.n	8002a34 <TrajCtrl_KeepAcceleration+0x33c>
            else if ((inter_speed < 0.f)  &&
 80029b2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80029b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029be:	d52b      	bpl.n	8002a18 <TrajCtrl_KeepAcceleration+0x320>
 80029c0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80029c4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80029c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029d0:	dd22      	ble.n	8002a18 <TrajCtrl_KeepAcceleration+0x320>
                     (inter_speed > -1.f))
            { speed_arr[speed_arr_len-1] = TrajCtrl_Speed2Ctrl(-1.f); }
 80029d2:	4b10      	ldr	r3, [pc, #64]	@ (8002a14 <TrajCtrl_KeepAcceleration+0x31c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	1e5c      	subs	r4, r3, #1
 80029d8:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 80029dc:	f000 f9a6 	bl	8002d2c <TrajCtrl_Speed2Ctrl>
 80029e0:	eef0 7a40 	vmov.f32	s15, s0
 80029e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002a10 <TrajCtrl_KeepAcceleration+0x318>)
 80029e6:	00a3      	lsls	r3, r4, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	edc3 7a00 	vstr	s15, [r3]
 80029ee:	e021      	b.n	8002a34 <TrajCtrl_KeepAcceleration+0x33c>
 80029f0:	200028cc 	.word	0x200028cc
 80029f4:	42a00000 	.word	0x42a00000
 80029f8:	c2a00000 	.word	0xc2a00000
 80029fc:	3dcccccd 	.word	0x3dcccccd
 8002a00:	3dcccccd 	.word	0x3dcccccd
 8002a04:	bdcccccd 	.word	0xbdcccccd
 8002a08:	bdcccccd 	.word	0xbdcccccd
 8002a0c:	200004e4 	.word	0x200004e4
 8002a10:	200008c8 	.word	0x200008c8
 8002a14:	200028c8 	.word	0x200028c8
            else
            { speed_arr[speed_arr_len-1] = TrajCtrl_Speed2Ctrl(inter_speed); }
 8002a18:	4b50      	ldr	r3, [pc, #320]	@ (8002b5c <TrajCtrl_KeepAcceleration+0x464>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	1e5c      	subs	r4, r3, #1
 8002a1e:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8002a22:	f000 f983 	bl	8002d2c <TrajCtrl_Speed2Ctrl>
 8002a26:	eef0 7a40 	vmov.f32	s15, s0
 8002a2a:	4a4d      	ldr	r2, [pc, #308]	@ (8002b60 <TrajCtrl_KeepAcceleration+0x468>)
 8002a2c:	00a3      	lsls	r3, r4, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	edc3 7a00 	vstr	s15, [r3]
            inter_speed -= dw;
 8002a34:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002a38:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a40:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            speed_arr_len += 1;
 8002a44:	4b45      	ldr	r3, [pc, #276]	@ (8002b5c <TrajCtrl_KeepAcceleration+0x464>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	4a44      	ldr	r2, [pc, #272]	@ (8002b5c <TrajCtrl_KeepAcceleration+0x464>)
 8002a4c:	6013      	str	r3, [r2, #0]
            if ((inter_speed <= target_speed)  &&
 8002a4e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002a52:	edd7 7a08 	vldr	s15, [r7, #32]
 8002a56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a5e:	d81a      	bhi.n	8002a96 <TrajCtrl_KeepAcceleration+0x39e>
                (inter_speed > target_speed - dw))
 8002a60:	ed97 7a08 	vldr	s14, [r7, #32]
 8002a64:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a68:	ee77 7a67 	vsub.f32	s15, s14, s15
            if ((inter_speed <= target_speed)  &&
 8002a6c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002a70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a78:	dd0d      	ble.n	8002a96 <TrajCtrl_KeepAcceleration+0x39e>
            { speed_arr[speed_arr_len-1] = TrajCtrl_Speed2Ctrl(target_speed); }
 8002a7a:	4b38      	ldr	r3, [pc, #224]	@ (8002b5c <TrajCtrl_KeepAcceleration+0x464>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	1e5c      	subs	r4, r3, #1
 8002a80:	ed97 0a08 	vldr	s0, [r7, #32]
 8002a84:	f000 f952 	bl	8002d2c <TrajCtrl_Speed2Ctrl>
 8002a88:	eef0 7a40 	vmov.f32	s15, s0
 8002a8c:	4a34      	ldr	r2, [pc, #208]	@ (8002b60 <TrajCtrl_KeepAcceleration+0x468>)
 8002a8e:	00a3      	lsls	r3, r4, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	edc3 7a00 	vstr	s15, [r3]
        while (inter_speed > target_speed)
 8002a96:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002a9a:	edd7 7a08 	vldr	s15, [r7, #32]
 8002a9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aa6:	f73f af65 	bgt.w	8002974 <TrajCtrl_KeepAcceleration+0x27c>
        }
    }

    uint16_t acceleraion_ARR = (uint16_t)(10000 * time / (speed_arr_len - 1) + 1);
 8002aaa:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002aae:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8002b64 <TrajCtrl_KeepAcceleration+0x46c>
 8002ab2:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002ab6:	4b29      	ldr	r3, [pc, #164]	@ (8002b5c <TrajCtrl_KeepAcceleration+0x464>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	3b01      	subs	r3, #1
 8002abc:	ee07 3a90 	vmov	s15, r3
 8002ac0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ac4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ac8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002acc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ad4:	ee17 3a90 	vmov	r3, s15
 8002ad8:	827b      	strh	r3, [r7, #18]
    // Настройка таймера, отвечающего за отработку траектории:
    TIM_MasterConfigTypeDef sMasterConfig = {
 8002ada:	2300      	movs	r3, #0
 8002adc:	60bb      	str	r3, [r7, #8]
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60fb      	str	r3, [r7, #12]
        .MasterOutputTrigger = TIM_TRGO_RESET,
        .MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE
    };
    htim6.Instance = TIM6;
 8002ae2:	4b21      	ldr	r3, [pc, #132]	@ (8002b68 <TrajCtrl_KeepAcceleration+0x470>)
 8002ae4:	4a21      	ldr	r2, [pc, #132]	@ (8002b6c <TrajCtrl_KeepAcceleration+0x474>)
 8002ae6:	601a      	str	r2, [r3, #0]
    htim6.Init.Prescaler = 4800-1;
 8002ae8:	4b1f      	ldr	r3, [pc, #124]	@ (8002b68 <TrajCtrl_KeepAcceleration+0x470>)
 8002aea:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 8002aee:	605a      	str	r2, [r3, #4]
    htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002af0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b68 <TrajCtrl_KeepAcceleration+0x470>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	609a      	str	r2, [r3, #8]
    htim6.Init.Period = acceleraion_ARR-1;
 8002af6:	8a7b      	ldrh	r3, [r7, #18]
 8002af8:	3b01      	subs	r3, #1
 8002afa:	461a      	mov	r2, r3
 8002afc:	4b1a      	ldr	r3, [pc, #104]	@ (8002b68 <TrajCtrl_KeepAcceleration+0x470>)
 8002afe:	60da      	str	r2, [r3, #12]
    htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b00:	4b19      	ldr	r3, [pc, #100]	@ (8002b68 <TrajCtrl_KeepAcceleration+0x470>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002b06:	4818      	ldr	r0, [pc, #96]	@ (8002b68 <TrajCtrl_KeepAcceleration+0x470>)
 8002b08:	f002 ffc6 	bl	8005a98 <HAL_TIM_Base_Init>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <TrajCtrl_KeepAcceleration+0x41e>
    { Error_Handler(); }
 8002b12:	f7fe fc7d 	bl	8001410 <Error_Handler>
    if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002b16:	f107 0308 	add.w	r3, r7, #8
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4812      	ldr	r0, [pc, #72]	@ (8002b68 <TrajCtrl_KeepAcceleration+0x470>)
 8002b1e:	f004 fb81 	bl	8007224 <HAL_TIMEx_MasterConfigSynchronization>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <TrajCtrl_KeepAcceleration+0x434>
    { Error_Handler(); }
 8002b28:	f7fe fc72 	bl	8001410 <Error_Handler>

    // Начинаем отработку траектории:
    // Подать питание на LTC3130 и датчики Холла
    VoltageControl_MotorHallEnable();
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	2180      	movs	r1, #128	@ 0x80
 8002b30:	480f      	ldr	r0, [pc, #60]	@ (8002b70 <TrajCtrl_KeepAcceleration+0x478>)
 8002b32:	f002 fa0f 	bl	8004f54 <HAL_GPIO_WritePin>
    // Старт контроля напряжения на выходе LTC3130
    VoltageControl_Start();
 8002b36:	f000 f9bb 	bl	8002eb0 <VoltageControl_Start>
    // Включить вращение маховика
    RotationControl_Init();
 8002b3a:	f7fe fca7 	bl	800148c <RotationControl_Init>

    // Планировщик скорости переводится в режим "занят"
    task_status = TASKSTATUS_BUSY;
 8002b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b74 <TrajCtrl_KeepAcceleration+0x47c>)
 8002b40:	2201      	movs	r2, #1
 8002b42:	701a      	strb	r2, [r3, #0]

    enableDisableIT = TIM6_IT_ENABLE;
 8002b44:	4b0c      	ldr	r3, [pc, #48]	@ (8002b78 <TrajCtrl_KeepAcceleration+0x480>)
 8002b46:	2201      	movs	r2, #1
 8002b48:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(&htim6);
 8002b4a:	4807      	ldr	r0, [pc, #28]	@ (8002b68 <TrajCtrl_KeepAcceleration+0x470>)
 8002b4c:	f002 fff4 	bl	8005b38 <HAL_TIM_Base_Start_IT>

    return TASK_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3734      	adds	r7, #52	@ 0x34
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd90      	pop	{r4, r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	200028c8 	.word	0x200028c8
 8002b60:	200008c8 	.word	0x200008c8
 8002b64:	461c4000 	.word	0x461c4000
 8002b68:	20000838 	.word	0x20000838
 8002b6c:	40001000 	.word	0x40001000
 8002b70:	40020400 	.word	0x40020400
 8002b74:	200028d0 	.word	0x200028d0
 8002b78:	200004e0 	.word	0x200004e0

08002b7c <TrajCtrl_EnableDisableTim6Interrupts>:
    task_status = TASKSTATUS_IDLE;
}

void
TrajCtrl_EnableDisableTim6Interrupts()
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
    switch(enableDisableIT)
 8002b80:	4b07      	ldr	r3, [pc, #28]	@ (8002ba0 <TrajCtrl_EnableDisableTim6Interrupts+0x24>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d005      	beq.n	8002b94 <TrajCtrl_EnableDisableTim6Interrupts+0x18>
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d107      	bne.n	8002b9c <TrajCtrl_EnableDisableTim6Interrupts+0x20>
    {
        case TIM6_IT_ENABLE:
            HAL_TIM_Base_Start_IT(&htim6);
 8002b8c:	4805      	ldr	r0, [pc, #20]	@ (8002ba4 <TrajCtrl_EnableDisableTim6Interrupts+0x28>)
 8002b8e:	f002 ffd3 	bl	8005b38 <HAL_TIM_Base_Start_IT>
            break;
 8002b92:	e003      	b.n	8002b9c <TrajCtrl_EnableDisableTim6Interrupts+0x20>
        case TIM6_IT_DISABLE:
            HAL_TIM_Base_Stop_IT(&htim6);
 8002b94:	4803      	ldr	r0, [pc, #12]	@ (8002ba4 <TrajCtrl_EnableDisableTim6Interrupts+0x28>)
 8002b96:	f003 f83f 	bl	8005c18 <HAL_TIM_Base_Stop_IT>
            break;
 8002b9a:	bf00      	nop
    }
}
 8002b9c:	bf00      	nop
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	200004e0 	.word	0x200004e0
 8002ba4:	20000838 	.word	0x20000838

08002ba8 <TrajCtrl_Ctrl2Speed>:

float
TrajCtrl_Ctrl2Speed(float ctrl)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	ed87 0a01 	vstr	s0, [r7, #4]
    float sign = 1.f;
 8002bb2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002bb6:	617b      	str	r3, [r7, #20]
    if (ctrl < 0.f)
 8002bb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bbc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc4:	d507      	bpl.n	8002bd6 <TrajCtrl_Ctrl2Speed+0x2e>
    {
        ctrl = -ctrl;
 8002bc6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bca:	eef1 7a67 	vneg.f32	s15, s15
 8002bce:	edc7 7a01 	vstr	s15, [r7, #4]
        sign = -1.f;
 8002bd2:	4b36      	ldr	r3, [pc, #216]	@ (8002cac <TrajCtrl_Ctrl2Speed+0x104>)
 8002bd4:	617b      	str	r3, [r7, #20]
    }
    uint16_t index = TrajectoryControl_FindIndexForControl(ctrl);
 8002bd6:	ed97 0a01 	vldr	s0, [r7, #4]
 8002bda:	f000 f92f 	bl	8002e3c <TrajectoryControl_FindIndexForControl>
 8002bde:	4603      	mov	r3, r0
 8002be0:	827b      	strh	r3, [r7, #18]
    float speed = (arr_speed[index] * arr_control[index+1] - arr_speed[index+1] * arr_control[index]) /
 8002be2:	8a7b      	ldrh	r3, [r7, #18]
 8002be4:	4a32      	ldr	r2, [pc, #200]	@ (8002cb0 <TrajCtrl_Ctrl2Speed+0x108>)
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	ed93 7a00 	vldr	s14, [r3]
 8002bee:	8a7b      	ldrh	r3, [r7, #18]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	4a30      	ldr	r2, [pc, #192]	@ (8002cb4 <TrajCtrl_Ctrl2Speed+0x10c>)
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	edd3 7a00 	vldr	s15, [r3]
 8002bfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c00:	8a7b      	ldrh	r3, [r7, #18]
 8002c02:	3301      	adds	r3, #1
 8002c04:	4a2a      	ldr	r2, [pc, #168]	@ (8002cb0 <TrajCtrl_Ctrl2Speed+0x108>)
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	edd3 6a00 	vldr	s13, [r3]
 8002c0e:	8a7b      	ldrh	r3, [r7, #18]
 8002c10:	4a28      	ldr	r2, [pc, #160]	@ (8002cb4 <TrajCtrl_Ctrl2Speed+0x10c>)
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	edd3 7a00 	vldr	s15, [r3]
 8002c1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c1e:	ee77 6a67 	vsub.f32	s13, s14, s15
                  (arr_control[index+1] - arr_control[index]) +
 8002c22:	8a7b      	ldrh	r3, [r7, #18]
 8002c24:	3301      	adds	r3, #1
 8002c26:	4a23      	ldr	r2, [pc, #140]	@ (8002cb4 <TrajCtrl_Ctrl2Speed+0x10c>)
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	ed93 7a00 	vldr	s14, [r3]
 8002c30:	8a7b      	ldrh	r3, [r7, #18]
 8002c32:	4a20      	ldr	r2, [pc, #128]	@ (8002cb4 <TrajCtrl_Ctrl2Speed+0x10c>)
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	edd3 7a00 	vldr	s15, [r3]
 8002c3c:	ee77 7a67 	vsub.f32	s15, s14, s15
    float speed = (arr_speed[index] * arr_control[index+1] - arr_speed[index+1] * arr_control[index]) /
 8002c40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  (arr_speed[index+1] - arr_speed[index]) /
 8002c44:	8a7b      	ldrh	r3, [r7, #18]
 8002c46:	3301      	adds	r3, #1
 8002c48:	4a19      	ldr	r2, [pc, #100]	@ (8002cb0 <TrajCtrl_Ctrl2Speed+0x108>)
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	edd3 6a00 	vldr	s13, [r3]
 8002c52:	8a7b      	ldrh	r3, [r7, #18]
 8002c54:	4a16      	ldr	r2, [pc, #88]	@ (8002cb0 <TrajCtrl_Ctrl2Speed+0x108>)
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	edd3 7a00 	vldr	s15, [r3]
 8002c5e:	ee36 6ae7 	vsub.f32	s12, s13, s15
                  (arr_control[index+1] - arr_control[index]) * ctrl;
 8002c62:	8a7b      	ldrh	r3, [r7, #18]
 8002c64:	3301      	adds	r3, #1
 8002c66:	4a13      	ldr	r2, [pc, #76]	@ (8002cb4 <TrajCtrl_Ctrl2Speed+0x10c>)
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	edd3 6a00 	vldr	s13, [r3]
 8002c70:	8a7b      	ldrh	r3, [r7, #18]
 8002c72:	4a10      	ldr	r2, [pc, #64]	@ (8002cb4 <TrajCtrl_Ctrl2Speed+0x10c>)
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	edd3 7a00 	vldr	s15, [r3]
 8002c7c:	ee76 7ae7 	vsub.f32	s15, s13, s15
                  (arr_speed[index+1] - arr_speed[index]) /
 8002c80:	eec6 6a27 	vdiv.f32	s13, s12, s15
                  (arr_control[index+1] - arr_control[index]) * ctrl;
 8002c84:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c88:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float speed = (arr_speed[index] * arr_control[index+1] - arr_speed[index+1] * arr_control[index]) /
 8002c8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c90:	edc7 7a03 	vstr	s15, [r7, #12]
    return sign * speed;
 8002c94:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c98:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c9c:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002ca0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ca4:	3718      	adds	r7, #24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	bf800000 	.word	0xbf800000
 8002cb0:	200004f0 	.word	0x200004f0
 8002cb4:	20000534 	.word	0x20000534

08002cb8 <TrajectoryControl_FindIndexForSpeed>:

static uint16_t
TrajectoryControl_FindIndexForSpeed(float w)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	ed87 0a01 	vstr	s0, [r7, #4]
    uint16_t index = 0;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	81fb      	strh	r3, [r7, #14]
    if (w < arr_speed[0])
 8002cc6:	4b18      	ldr	r3, [pc, #96]	@ (8002d28 <TrajectoryControl_FindIndexForSpeed+0x70>)
 8002cc8:	edd3 7a00 	vldr	s15, [r3]
 8002ccc:	ed97 7a01 	vldr	s14, [r7, #4]
 8002cd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd8:	d501      	bpl.n	8002cde <TrajectoryControl_FindIndexForSpeed+0x26>
    { return index; }
 8002cda:	89fb      	ldrh	r3, [r7, #14]
 8002cdc:	e01e      	b.n	8002d1c <TrajectoryControl_FindIndexForSpeed+0x64>
    if (w > arr_speed[16])
 8002cde:	4b12      	ldr	r3, [pc, #72]	@ (8002d28 <TrajectoryControl_FindIndexForSpeed+0x70>)
 8002ce0:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002ce4:	ed97 7a01 	vldr	s14, [r7, #4]
 8002ce8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf0:	dd01      	ble.n	8002cf6 <TrajectoryControl_FindIndexForSpeed+0x3e>
    { return ARR_LENGTH - 2; }
 8002cf2:	230f      	movs	r3, #15
 8002cf4:	e012      	b.n	8002d1c <TrajectoryControl_FindIndexForSpeed+0x64>
    while (arr_speed[index+1] < w)
 8002cf6:	e002      	b.n	8002cfe <TrajectoryControl_FindIndexForSpeed+0x46>
    { index += 1; }
 8002cf8:	89fb      	ldrh	r3, [r7, #14]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	81fb      	strh	r3, [r7, #14]
    while (arr_speed[index+1] < w)
 8002cfe:	89fb      	ldrh	r3, [r7, #14]
 8002d00:	3301      	adds	r3, #1
 8002d02:	4a09      	ldr	r2, [pc, #36]	@ (8002d28 <TrajectoryControl_FindIndexForSpeed+0x70>)
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4413      	add	r3, r2
 8002d08:	edd3 7a00 	vldr	s15, [r3]
 8002d0c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d18:	dcee      	bgt.n	8002cf8 <TrajectoryControl_FindIndexForSpeed+0x40>
    return index;
 8002d1a:	89fb      	ldrh	r3, [r7, #14]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	200004f0 	.word	0x200004f0

08002d2c <TrajCtrl_Speed2Ctrl>:

static float
TrajCtrl_Speed2Ctrl(float w)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	ed87 0a01 	vstr	s0, [r7, #4]
    float sign = 1.f;
 8002d36:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002d3a:	617b      	str	r3, [r7, #20]
    if (w < 0.f)
 8002d3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d48:	d507      	bpl.n	8002d5a <TrajCtrl_Speed2Ctrl+0x2e>
    {
        w *= -1;
 8002d4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d4e:	eef1 7a67 	vneg.f32	s15, s15
 8002d52:	edc7 7a01 	vstr	s15, [r7, #4]
        sign = -1.f;
 8002d56:	4b36      	ldr	r3, [pc, #216]	@ (8002e30 <TrajCtrl_Speed2Ctrl+0x104>)
 8002d58:	617b      	str	r3, [r7, #20]
    }
    uint16_t index = TrajectoryControl_FindIndexForSpeed(w);
 8002d5a:	ed97 0a01 	vldr	s0, [r7, #4]
 8002d5e:	f7ff ffab 	bl	8002cb8 <TrajectoryControl_FindIndexForSpeed>
 8002d62:	4603      	mov	r3, r0
 8002d64:	827b      	strh	r3, [r7, #18]
    float control = (arr_control[index] * arr_speed[index+1] - arr_control[index+1] * arr_speed[index]) /
 8002d66:	8a7b      	ldrh	r3, [r7, #18]
 8002d68:	4a32      	ldr	r2, [pc, #200]	@ (8002e34 <TrajCtrl_Speed2Ctrl+0x108>)
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4413      	add	r3, r2
 8002d6e:	ed93 7a00 	vldr	s14, [r3]
 8002d72:	8a7b      	ldrh	r3, [r7, #18]
 8002d74:	3301      	adds	r3, #1
 8002d76:	4a30      	ldr	r2, [pc, #192]	@ (8002e38 <TrajCtrl_Speed2Ctrl+0x10c>)
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	edd3 7a00 	vldr	s15, [r3]
 8002d80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d84:	8a7b      	ldrh	r3, [r7, #18]
 8002d86:	3301      	adds	r3, #1
 8002d88:	4a2a      	ldr	r2, [pc, #168]	@ (8002e34 <TrajCtrl_Speed2Ctrl+0x108>)
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	edd3 6a00 	vldr	s13, [r3]
 8002d92:	8a7b      	ldrh	r3, [r7, #18]
 8002d94:	4a28      	ldr	r2, [pc, #160]	@ (8002e38 <TrajCtrl_Speed2Ctrl+0x10c>)
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	edd3 7a00 	vldr	s15, [r3]
 8002d9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002da2:	ee77 6a67 	vsub.f32	s13, s14, s15
                    (arr_speed[index+1] - arr_speed[index]) +
 8002da6:	8a7b      	ldrh	r3, [r7, #18]
 8002da8:	3301      	adds	r3, #1
 8002daa:	4a23      	ldr	r2, [pc, #140]	@ (8002e38 <TrajCtrl_Speed2Ctrl+0x10c>)
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	ed93 7a00 	vldr	s14, [r3]
 8002db4:	8a7b      	ldrh	r3, [r7, #18]
 8002db6:	4a20      	ldr	r2, [pc, #128]	@ (8002e38 <TrajCtrl_Speed2Ctrl+0x10c>)
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	edd3 7a00 	vldr	s15, [r3]
 8002dc0:	ee77 7a67 	vsub.f32	s15, s14, s15
    float control = (arr_control[index] * arr_speed[index+1] - arr_control[index+1] * arr_speed[index]) /
 8002dc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                    (arr_control[index+1] - arr_control[index]) /
 8002dc8:	8a7b      	ldrh	r3, [r7, #18]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	4a19      	ldr	r2, [pc, #100]	@ (8002e34 <TrajCtrl_Speed2Ctrl+0x108>)
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	edd3 6a00 	vldr	s13, [r3]
 8002dd6:	8a7b      	ldrh	r3, [r7, #18]
 8002dd8:	4a16      	ldr	r2, [pc, #88]	@ (8002e34 <TrajCtrl_Speed2Ctrl+0x108>)
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	edd3 7a00 	vldr	s15, [r3]
 8002de2:	ee36 6ae7 	vsub.f32	s12, s13, s15
                    (arr_speed[index+1] - arr_speed[index]) * w;
 8002de6:	8a7b      	ldrh	r3, [r7, #18]
 8002de8:	3301      	adds	r3, #1
 8002dea:	4a13      	ldr	r2, [pc, #76]	@ (8002e38 <TrajCtrl_Speed2Ctrl+0x10c>)
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	edd3 6a00 	vldr	s13, [r3]
 8002df4:	8a7b      	ldrh	r3, [r7, #18]
 8002df6:	4a10      	ldr	r2, [pc, #64]	@ (8002e38 <TrajCtrl_Speed2Ctrl+0x10c>)
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	edd3 7a00 	vldr	s15, [r3]
 8002e00:	ee76 7ae7 	vsub.f32	s15, s13, s15
                    (arr_control[index+1] - arr_control[index]) /
 8002e04:	eec6 6a27 	vdiv.f32	s13, s12, s15
                    (arr_speed[index+1] - arr_speed[index]) * w;
 8002e08:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float control = (arr_control[index] * arr_speed[index+1] - arr_control[index+1] * arr_speed[index]) /
 8002e10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e14:	edc7 7a03 	vstr	s15, [r7, #12]
    return sign * control;
 8002e18:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e20:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002e24:	eeb0 0a67 	vmov.f32	s0, s15
 8002e28:	3718      	adds	r7, #24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	bf800000 	.word	0xbf800000
 8002e34:	20000534 	.word	0x20000534
 8002e38:	200004f0 	.word	0x200004f0

08002e3c <TrajectoryControl_FindIndexForControl>:

static uint16_t
TrajectoryControl_FindIndexForControl(float ctrl)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	ed87 0a01 	vstr	s0, [r7, #4]
    uint16_t index = 0;
 8002e46:	2300      	movs	r3, #0
 8002e48:	81fb      	strh	r3, [r7, #14]
    if (ctrl < arr_control[0])
 8002e4a:	4b18      	ldr	r3, [pc, #96]	@ (8002eac <TrajectoryControl_FindIndexForControl+0x70>)
 8002e4c:	edd3 7a00 	vldr	s15, [r3]
 8002e50:	ed97 7a01 	vldr	s14, [r7, #4]
 8002e54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e5c:	d501      	bpl.n	8002e62 <TrajectoryControl_FindIndexForControl+0x26>
    { return index; }
 8002e5e:	89fb      	ldrh	r3, [r7, #14]
 8002e60:	e01e      	b.n	8002ea0 <TrajectoryControl_FindIndexForControl+0x64>
    if (ctrl > arr_control[16])
 8002e62:	4b12      	ldr	r3, [pc, #72]	@ (8002eac <TrajectoryControl_FindIndexForControl+0x70>)
 8002e64:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002e68:	ed97 7a01 	vldr	s14, [r7, #4]
 8002e6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e74:	dd01      	ble.n	8002e7a <TrajectoryControl_FindIndexForControl+0x3e>
    { return ARR_LENGTH - 2; }
 8002e76:	230f      	movs	r3, #15
 8002e78:	e012      	b.n	8002ea0 <TrajectoryControl_FindIndexForControl+0x64>
    while (arr_control[index+1] < ctrl)
 8002e7a:	e002      	b.n	8002e82 <TrajectoryControl_FindIndexForControl+0x46>
    { index += 1; }
 8002e7c:	89fb      	ldrh	r3, [r7, #14]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	81fb      	strh	r3, [r7, #14]
    while (arr_control[index+1] < ctrl)
 8002e82:	89fb      	ldrh	r3, [r7, #14]
 8002e84:	3301      	adds	r3, #1
 8002e86:	4a09      	ldr	r2, [pc, #36]	@ (8002eac <TrajectoryControl_FindIndexForControl+0x70>)
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4413      	add	r3, r2
 8002e8c:	edd3 7a00 	vldr	s15, [r3]
 8002e90:	ed97 7a01 	vldr	s14, [r7, #4]
 8002e94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e9c:	dcee      	bgt.n	8002e7c <TrajectoryControl_FindIndexForControl+0x40>
    return index;
 8002e9e:	89fb      	ldrh	r3, [r7, #14]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3714      	adds	r7, #20
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr
 8002eac:	20000534 	.word	0x20000534

08002eb0 <VoltageControl_Start>:
static float
TargetVoltage2DAC(float targetVoltage);

void
VoltageControl_Start()
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
    // Enable buck-boost converter
    LTC3130IMSE_Enable();
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	2108      	movs	r1, #8
 8002eba:	481e      	ldr	r0, [pc, #120]	@ (8002f34 <VoltageControl_Start+0x84>)
 8002ebc:	f002 f84a 	bl	8004f54 <HAL_GPIO_WritePin>
    HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	481d      	ldr	r0, [pc, #116]	@ (8002f38 <VoltageControl_Start+0x88>)
 8002ec4:	f001 fd65 	bl	8004992 <HAL_DAC_Start>

    float coarse_value = TargetVoltage2DAC(voltageControl.targetVoltage);
 8002ec8:	4b1c      	ldr	r3, [pc, #112]	@ (8002f3c <VoltageControl_Start+0x8c>)
 8002eca:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ece:	eeb0 0a67 	vmov.f32	s0, s15
 8002ed2:	f000 f8a3 	bl	800301c <TargetVoltage2DAC>
 8002ed6:	ed87 0a01 	vstr	s0, [r7, #4]

    // Preventing DAC value under(over)flow
    if(coarse_value < 0) { voltageControl.dacValue = 0; }
 8002eda:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ede:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee6:	d503      	bpl.n	8002ef0 <VoltageControl_Start+0x40>
 8002ee8:	4b14      	ldr	r3, [pc, #80]	@ (8002f3c <VoltageControl_Start+0x8c>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	e015      	b.n	8002f1c <VoltageControl_Start+0x6c>
    else if(coarse_value > 4095) { voltageControl.dacValue = 4095; }
 8002ef0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ef4:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8002f40 <VoltageControl_Start+0x90>
 8002ef8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f00:	dd04      	ble.n	8002f0c <VoltageControl_Start+0x5c>
 8002f02:	4b0e      	ldr	r3, [pc, #56]	@ (8002f3c <VoltageControl_Start+0x8c>)
 8002f04:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	e007      	b.n	8002f1c <VoltageControl_Start+0x6c>
    else { voltageControl.dacValue = (uint32_t)coarse_value; }
 8002f0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f14:	ee17 2a90 	vmov	r2, s15
 8002f18:	4b08      	ldr	r3, [pc, #32]	@ (8002f3c <VoltageControl_Start+0x8c>)
 8002f1a:	601a      	str	r2, [r3, #0]

    HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, voltageControl.dacValue);
 8002f1c:	4b07      	ldr	r3, [pc, #28]	@ (8002f3c <VoltageControl_Start+0x8c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2200      	movs	r2, #0
 8002f22:	2100      	movs	r1, #0
 8002f24:	4804      	ldr	r0, [pc, #16]	@ (8002f38 <VoltageControl_Start+0x88>)
 8002f26:	f001 fde1 	bl	8004aec <HAL_DAC_SetValue>
}
 8002f2a:	bf00      	nop
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40020400 	.word	0x40020400
 8002f38:	20000694 	.word	0x20000694
 8002f3c:	20000578 	.word	0x20000578
 8002f40:	457ff000 	.word	0x457ff000

08002f44 <VoltageControl_GetActualVoltage>:
    HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, voltageControl.dacValue);
}

void
VoltageControl_GetActualVoltage()
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
    uint32_t adc = GetADCValue(ADC_CHANNEL_13);
 8002f4a:	200d      	movs	r0, #13
 8002f4c:	f000 f83c 	bl	8002fc8 <GetADCValue>
 8002f50:	60f8      	str	r0, [r7, #12]
    // ADC value for VREFINT
    uint32_t vrefADC = GetADCValue(ADC_CHANNEL_VREFINT);
 8002f52:	2011      	movs	r0, #17
 8002f54:	f000 f838 	bl	8002fc8 <GetADCValue>
 8002f58:	60b8      	str	r0, [r7, #8]
    // Reference voltage on VDDA pin (Volts)
    float vrefint = (float)__LL_ADC_CALC_VREFANALOG_VOLTAGE(vrefADC, LL_ADC_RESOLUTION_12B) / 1000.f;
 8002f5a:	4b16      	ldr	r3, [pc, #88]	@ (8002fb4 <VoltageControl_GetActualVoltage+0x70>)
 8002f5c:	881b      	ldrh	r3, [r3, #0]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8002f64:	fb03 f202 	mul.w	r2, r3, r2
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6e:	ee07 3a90 	vmov	s15, r3
 8002f72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f76:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8002fb8 <VoltageControl_GetActualVoltage+0x74>
 8002f7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f7e:	edc7 7a01 	vstr	s15, [r7, #4]

    // Boost-converter OUT voltage (12-bits, 450 board)
    voltageControl.invertorVoltage = (float)(adc / 4096.f * vrefint * ADC_VOLTAGE_DIVIDER_RATIO);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	ee07 3a90 	vmov	s15, r3
 8002f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f8c:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8002fbc <VoltageControl_GetActualVoltage+0x78>
 8002f90:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002f94:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f9c:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002fc0 <VoltageControl_GetActualVoltage+0x7c>
 8002fa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fa4:	4b07      	ldr	r3, [pc, #28]	@ (8002fc4 <VoltageControl_GetActualVoltage+0x80>)
 8002fa6:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8002faa:	bf00      	nop
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	1fff7a2a 	.word	0x1fff7a2a
 8002fb8:	447a0000 	.word	0x447a0000
 8002fbc:	45800000 	.word	0x45800000
 8002fc0:	40a08399 	.word	0x40a08399
 8002fc4:	20000578 	.word	0x20000578

08002fc8 <GetADCValue>:
  * @param   channel  ADC channel
  * @retval  result   ADC value obtained by ADC conversion
  */
static uint32_t
GetADCValue(uint32_t channel)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b088      	sub	sp, #32
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
    uint32_t result = 0;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	61fb      	str	r3, [r7, #28]
    ADC_ChannelConfTypeDef sConfig = {
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	2301      	movs	r3, #1
 8002fda:	613b      	str	r3, [r7, #16]
 8002fdc:	2304      	movs	r3, #4
 8002fde:	617b      	str	r3, [r7, #20]
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	61bb      	str	r3, [r7, #24]
        .Rank = 1,
        .SamplingTime = ADC_SAMPLETIME_84CYCLES,
        .Offset = 0  // Optional
    };

    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8002fe4:	f107 030c 	add.w	r3, r7, #12
 8002fe8:	4619      	mov	r1, r3
 8002fea:	480b      	ldr	r0, [pc, #44]	@ (8003018 <GetADCValue+0x50>)
 8002fec:	f000 fbdc 	bl	80037a8 <HAL_ADC_ConfigChannel>
    HAL_ADC_Start(&hadc1);
 8002ff0:	4809      	ldr	r0, [pc, #36]	@ (8003018 <GetADCValue+0x50>)
 8002ff2:	f000 f90d 	bl	8003210 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 100);
 8002ff6:	2164      	movs	r1, #100	@ 0x64
 8002ff8:	4807      	ldr	r0, [pc, #28]	@ (8003018 <GetADCValue+0x50>)
 8002ffa:	f000 fa0e 	bl	800341a <HAL_ADC_PollForConversion>
    result = HAL_ADC_GetValue(&hadc1);
 8002ffe:	4806      	ldr	r0, [pc, #24]	@ (8003018 <GetADCValue+0x50>)
 8003000:	f000 fba6 	bl	8003750 <HAL_ADC_GetValue>
 8003004:	61f8      	str	r0, [r7, #28]
    HAL_ADC_Stop(&hadc1);
 8003006:	4804      	ldr	r0, [pc, #16]	@ (8003018 <GetADCValue+0x50>)
 8003008:	f000 f9d4 	bl	80033b4 <HAL_ADC_Stop>

    return result;
 800300c:	69fb      	ldr	r3, [r7, #28]
}
 800300e:	4618      	mov	r0, r3
 8003010:	3720      	adds	r7, #32
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	200005f8 	.word	0x200005f8

0800301c <TargetVoltage2DAC>:
 *        Coefficient are selected from the resistive
 *        connection between the FB pin and the DAC.
 */
static float
TargetVoltage2DAC(float targetVoltage)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	ed87 0a01 	vstr	s0, [r7, #4]
    return TARGETVOLTAGE_VOLT2DAC_COEF1 + TARGETVOLTAGE_VOLT2DAC_COEF2 * targetVoltage;
 8003026:	edd7 7a01 	vldr	s15, [r7, #4]
 800302a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003048 <TargetVoltage2DAC+0x2c>
 800302e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003032:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800304c <TargetVoltage2DAC+0x30>
 8003036:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800303a:	eeb0 0a67 	vmov.f32	s0, s15
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	c40e21ec 	.word	0xc40e21ec
 800304c:	45fd8ecd 	.word	0x45fd8ecd

08003050 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003050:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003088 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003054:	f7fe fe00 	bl	8001c58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003058:	480c      	ldr	r0, [pc, #48]	@ (800308c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800305a:	490d      	ldr	r1, [pc, #52]	@ (8003090 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800305c:	4a0d      	ldr	r2, [pc, #52]	@ (8003094 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800305e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003060:	e002      	b.n	8003068 <LoopCopyDataInit>

08003062 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003062:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003064:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003066:	3304      	adds	r3, #4

08003068 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003068:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800306a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800306c:	d3f9      	bcc.n	8003062 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800306e:	4a0a      	ldr	r2, [pc, #40]	@ (8003098 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003070:	4c0a      	ldr	r4, [pc, #40]	@ (800309c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003072:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003074:	e001      	b.n	800307a <LoopFillZerobss>

08003076 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003076:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003078:	3204      	adds	r2, #4

0800307a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800307a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800307c:	d3fb      	bcc.n	8003076 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800307e:	f004 fdaf 	bl	8007be0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003082:	f7fe f857 	bl	8001134 <main>
  bx  lr    
 8003086:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003088:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800308c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003090:	200005dc 	.word	0x200005dc
  ldr r2, =_sidata
 8003094:	08007c80 	.word	0x08007c80
  ldr r2, =_sbss
 8003098:	200005dc 	.word	0x200005dc
  ldr r4, =_ebss
 800309c:	20002a10 	.word	0x20002a10

080030a0 <CAN1_RX1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030a0:	e7fe      	b.n	80030a0 <CAN1_RX1_IRQHandler>
	...

080030a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030a8:	4b0e      	ldr	r3, [pc, #56]	@ (80030e4 <HAL_Init+0x40>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a0d      	ldr	r2, [pc, #52]	@ (80030e4 <HAL_Init+0x40>)
 80030ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030b4:	4b0b      	ldr	r3, [pc, #44]	@ (80030e4 <HAL_Init+0x40>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a0a      	ldr	r2, [pc, #40]	@ (80030e4 <HAL_Init+0x40>)
 80030ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030c0:	4b08      	ldr	r3, [pc, #32]	@ (80030e4 <HAL_Init+0x40>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a07      	ldr	r2, [pc, #28]	@ (80030e4 <HAL_Init+0x40>)
 80030c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030cc:	2003      	movs	r0, #3
 80030ce:	f001 fbfd 	bl	80048cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030d2:	200f      	movs	r0, #15
 80030d4:	f000 f808 	bl	80030e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030d8:	f7fe fcfa 	bl	8001ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40023c00 	.word	0x40023c00

080030e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030f0:	4b12      	ldr	r3, [pc, #72]	@ (800313c <HAL_InitTick+0x54>)
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	4b12      	ldr	r3, [pc, #72]	@ (8003140 <HAL_InitTick+0x58>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	4619      	mov	r1, r3
 80030fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003102:	fbb2 f3f3 	udiv	r3, r2, r3
 8003106:	4618      	mov	r0, r3
 8003108:	f001 fc15 	bl	8004936 <HAL_SYSTICK_Config>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e00e      	b.n	8003134 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b0f      	cmp	r3, #15
 800311a:	d80a      	bhi.n	8003132 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800311c:	2200      	movs	r2, #0
 800311e:	6879      	ldr	r1, [r7, #4]
 8003120:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003124:	f001 fbdd 	bl	80048e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003128:	4a06      	ldr	r2, [pc, #24]	@ (8003144 <HAL_InitTick+0x5c>)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800312e:	2300      	movs	r3, #0
 8003130:	e000      	b.n	8003134 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
}
 8003134:	4618      	mov	r0, r3
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	200004dc 	.word	0x200004dc
 8003140:	20000588 	.word	0x20000588
 8003144:	20000584 	.word	0x20000584

08003148 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800314c:	4b06      	ldr	r3, [pc, #24]	@ (8003168 <HAL_IncTick+0x20>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	461a      	mov	r2, r3
 8003152:	4b06      	ldr	r3, [pc, #24]	@ (800316c <HAL_IncTick+0x24>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4413      	add	r3, r2
 8003158:	4a04      	ldr	r2, [pc, #16]	@ (800316c <HAL_IncTick+0x24>)
 800315a:	6013      	str	r3, [r2, #0]
}
 800315c:	bf00      	nop
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	20000588 	.word	0x20000588
 800316c:	200028d4 	.word	0x200028d4

08003170 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  return uwTick;
 8003174:	4b03      	ldr	r3, [pc, #12]	@ (8003184 <HAL_GetTick+0x14>)
 8003176:	681b      	ldr	r3, [r3, #0]
}
 8003178:	4618      	mov	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	200028d4 	.word	0x200028d4

08003188 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003190:	2300      	movs	r3, #0
 8003192:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e033      	b.n	8003206 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d109      	bne.n	80031ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7fd fc2a 	bl	8000a00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031be:	f003 0310 	and.w	r3, r3, #16
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d118      	bne.n	80031f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ca:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80031ce:	f023 0302 	bic.w	r3, r3, #2
 80031d2:	f043 0202 	orr.w	r2, r3, #2
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 fc06 	bl	80039ec <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ea:	f023 0303 	bic.w	r3, r3, #3
 80031ee:	f043 0201 	orr.w	r2, r3, #1
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	641a      	str	r2, [r3, #64]	@ 0x40
 80031f6:	e001      	b.n	80031fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003204:	7bfb      	ldrb	r3, [r7, #15]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
	...

08003210 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003218:	2300      	movs	r3, #0
 800321a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003222:	2b01      	cmp	r3, #1
 8003224:	d101      	bne.n	800322a <HAL_ADC_Start+0x1a>
 8003226:	2302      	movs	r3, #2
 8003228:	e0b2      	b.n	8003390 <HAL_ADC_Start+0x180>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b01      	cmp	r3, #1
 800323e:	d018      	beq.n	8003272 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689a      	ldr	r2, [r3, #8]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0201 	orr.w	r2, r2, #1
 800324e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003250:	4b52      	ldr	r3, [pc, #328]	@ (800339c <HAL_ADC_Start+0x18c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a52      	ldr	r2, [pc, #328]	@ (80033a0 <HAL_ADC_Start+0x190>)
 8003256:	fba2 2303 	umull	r2, r3, r2, r3
 800325a:	0c9a      	lsrs	r2, r3, #18
 800325c:	4613      	mov	r3, r2
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	4413      	add	r3, r2
 8003262:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003264:	e002      	b.n	800326c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	3b01      	subs	r3, #1
 800326a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1f9      	bne.n	8003266 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b01      	cmp	r3, #1
 800327e:	d17a      	bne.n	8003376 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003284:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003288:	f023 0301 	bic.w	r3, r3, #1
 800328c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d007      	beq.n	80032b2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80032aa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032be:	d106      	bne.n	80032ce <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c4:	f023 0206 	bic.w	r2, r3, #6
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	645a      	str	r2, [r3, #68]	@ 0x44
 80032cc:	e002      	b.n	80032d4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032dc:	4b31      	ldr	r3, [pc, #196]	@ (80033a4 <HAL_ADC_Start+0x194>)
 80032de:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80032e8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f003 031f 	and.w	r3, r3, #31
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d12a      	bne.n	800334c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a2b      	ldr	r2, [pc, #172]	@ (80033a8 <HAL_ADC_Start+0x198>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d015      	beq.n	800332c <HAL_ADC_Start+0x11c>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a29      	ldr	r2, [pc, #164]	@ (80033ac <HAL_ADC_Start+0x19c>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d105      	bne.n	8003316 <HAL_ADC_Start+0x106>
 800330a:	4b26      	ldr	r3, [pc, #152]	@ (80033a4 <HAL_ADC_Start+0x194>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f003 031f 	and.w	r3, r3, #31
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00a      	beq.n	800332c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a25      	ldr	r2, [pc, #148]	@ (80033b0 <HAL_ADC_Start+0x1a0>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d136      	bne.n	800338e <HAL_ADC_Start+0x17e>
 8003320:	4b20      	ldr	r3, [pc, #128]	@ (80033a4 <HAL_ADC_Start+0x194>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f003 0310 	and.w	r3, r3, #16
 8003328:	2b00      	cmp	r3, #0
 800332a:	d130      	bne.n	800338e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d129      	bne.n	800338e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003348:	609a      	str	r2, [r3, #8]
 800334a:	e020      	b.n	800338e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a15      	ldr	r2, [pc, #84]	@ (80033a8 <HAL_ADC_Start+0x198>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d11b      	bne.n	800338e <HAL_ADC_Start+0x17e>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d114      	bne.n	800338e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689a      	ldr	r2, [r3, #8]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003372:	609a      	str	r2, [r3, #8]
 8003374:	e00b      	b.n	800338e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337a:	f043 0210 	orr.w	r2, r3, #16
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003386:	f043 0201 	orr.w	r2, r3, #1
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3714      	adds	r7, #20
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	200004dc 	.word	0x200004dc
 80033a0:	431bde83 	.word	0x431bde83
 80033a4:	40012300 	.word	0x40012300
 80033a8:	40012000 	.word	0x40012000
 80033ac:	40012100 	.word	0x40012100
 80033b0:	40012200 	.word	0x40012200

080033b4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d101      	bne.n	80033ca <HAL_ADC_Stop+0x16>
 80033c6:	2302      	movs	r3, #2
 80033c8:	e021      	b.n	800340e <HAL_ADC_Stop+0x5a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 0201 	bic.w	r2, r2, #1
 80033e0:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d109      	bne.n	8003404 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80033f8:	f023 0301 	bic.w	r3, r3, #1
 80033fc:	f043 0201 	orr.w	r2, r3, #1
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b084      	sub	sp, #16
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
 8003422:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003432:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003436:	d113      	bne.n	8003460 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003442:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003446:	d10b      	bne.n	8003460 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344c:	f043 0220 	orr.w	r2, r3, #32
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e063      	b.n	8003528 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003460:	f7ff fe86 	bl	8003170 <HAL_GetTick>
 8003464:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003466:	e021      	b.n	80034ac <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800346e:	d01d      	beq.n	80034ac <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d007      	beq.n	8003486 <HAL_ADC_PollForConversion+0x6c>
 8003476:	f7ff fe7b 	bl	8003170 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	429a      	cmp	r2, r3
 8003484:	d212      	bcs.n	80034ac <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b02      	cmp	r3, #2
 8003492:	d00b      	beq.n	80034ac <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003498:	f043 0204 	orr.w	r2, r3, #4
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e03d      	b.n	8003528 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d1d6      	bne.n	8003468 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f06f 0212 	mvn.w	r2, #18
 80034c2:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d123      	bne.n	8003526 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d11f      	bne.n	8003526 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ec:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d006      	beq.n	8003502 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d111      	bne.n	8003526 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003506:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003512:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d105      	bne.n	8003526 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351e:	f043 0201 	orr.w	r2, r3, #1
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	617b      	str	r3, [r7, #20]
 800353c:	2300      	movs	r3, #0
 800353e:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	f003 0320 	and.w	r3, r3, #32
 800355e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d049      	beq.n	80035fa <HAL_ADC_IRQHandler+0xca>
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d046      	beq.n	80035fa <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003570:	f003 0310 	and.w	r3, r3, #16
 8003574:	2b00      	cmp	r3, #0
 8003576:	d105      	bne.n	8003584 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d12b      	bne.n	80035ea <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003596:	2b00      	cmp	r3, #0
 8003598:	d127      	bne.n	80035ea <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d006      	beq.n	80035b6 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d119      	bne.n	80035ea <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0220 	bic.w	r2, r2, #32
 80035c4:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ca:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d105      	bne.n	80035ea <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e2:	f043 0201 	orr.w	r2, r3, #1
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f8bd 	bl	800376a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f06f 0212 	mvn.w	r2, #18
 80035f8:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003608:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d057      	beq.n	80036c0 <HAL_ADC_IRQHandler+0x190>
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d054      	beq.n	80036c0 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361a:	f003 0310 	and.w	r3, r3, #16
 800361e:	2b00      	cmp	r3, #0
 8003620:	d105      	bne.n	800362e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003626:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d139      	bne.n	80036b0 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003642:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003646:	2b00      	cmp	r3, #0
 8003648:	d006      	beq.n	8003658 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003654:	2b00      	cmp	r3, #0
 8003656:	d12b      	bne.n	80036b0 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003662:	2b00      	cmp	r3, #0
 8003664:	d124      	bne.n	80036b0 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003670:	2b00      	cmp	r3, #0
 8003672:	d11d      	bne.n	80036b0 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003678:	2b00      	cmp	r3, #0
 800367a:	d119      	bne.n	80036b0 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800368a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003690:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d105      	bne.n	80036b0 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a8:	f043 0201 	orr.w	r2, r3, #1
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 fa97 	bl	8003be4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f06f 020c 	mvn.w	r2, #12
 80036be:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ce:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d017      	beq.n	8003706 <HAL_ADC_IRQHandler+0x1d6>
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d014      	beq.n	8003706 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d10d      	bne.n	8003706 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ee:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f841 	bl	800377e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f06f 0201 	mvn.w	r2, #1
 8003704:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f003 0320 	and.w	r3, r3, #32
 800370c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003714:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d015      	beq.n	8003748 <HAL_ADC_IRQHandler+0x218>
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d012      	beq.n	8003748 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003726:	f043 0202 	orr.w	r2, r3, #2
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f06f 0220 	mvn.w	r2, #32
 8003736:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 f82a 	bl	8003792 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f06f 0220 	mvn.w	r2, #32
 8003746:	601a      	str	r2, [r3, #0]
  }
}
 8003748:	bf00      	nop
 800374a:	3718      	adds	r7, #24
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800375e:	4618      	mov	r0, r3
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800376a:	b480      	push	{r7}
 800376c:	b083      	sub	sp, #12
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003772:	bf00      	nop
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003792:	b480      	push	{r7}
 8003794:	b083      	sub	sp, #12
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800379a:	bf00      	nop
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
	...

080037a8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80037b2:	2300      	movs	r3, #0
 80037b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d101      	bne.n	80037c4 <HAL_ADC_ConfigChannel+0x1c>
 80037c0:	2302      	movs	r3, #2
 80037c2:	e105      	b.n	80039d0 <HAL_ADC_ConfigChannel+0x228>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b09      	cmp	r3, #9
 80037d2:	d925      	bls.n	8003820 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68d9      	ldr	r1, [r3, #12]
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	b29b      	uxth	r3, r3
 80037e0:	461a      	mov	r2, r3
 80037e2:	4613      	mov	r3, r2
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	4413      	add	r3, r2
 80037e8:	3b1e      	subs	r3, #30
 80037ea:	2207      	movs	r2, #7
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	43da      	mvns	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	400a      	ands	r2, r1
 80037f8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68d9      	ldr	r1, [r3, #12]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	b29b      	uxth	r3, r3
 800380a:	4618      	mov	r0, r3
 800380c:	4603      	mov	r3, r0
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	4403      	add	r3, r0
 8003812:	3b1e      	subs	r3, #30
 8003814:	409a      	lsls	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	60da      	str	r2, [r3, #12]
 800381e:	e022      	b.n	8003866 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6919      	ldr	r1, [r3, #16]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	b29b      	uxth	r3, r3
 800382c:	461a      	mov	r2, r3
 800382e:	4613      	mov	r3, r2
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	4413      	add	r3, r2
 8003834:	2207      	movs	r2, #7
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	43da      	mvns	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	400a      	ands	r2, r1
 8003842:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6919      	ldr	r1, [r3, #16]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	689a      	ldr	r2, [r3, #8]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	b29b      	uxth	r3, r3
 8003854:	4618      	mov	r0, r3
 8003856:	4603      	mov	r3, r0
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	4403      	add	r3, r0
 800385c:	409a      	lsls	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2b06      	cmp	r3, #6
 800386c:	d824      	bhi.n	80038b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	4613      	mov	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4413      	add	r3, r2
 800387e:	3b05      	subs	r3, #5
 8003880:	221f      	movs	r2, #31
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	43da      	mvns	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	400a      	ands	r2, r1
 800388e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	b29b      	uxth	r3, r3
 800389c:	4618      	mov	r0, r3
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	4613      	mov	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4413      	add	r3, r2
 80038a8:	3b05      	subs	r3, #5
 80038aa:	fa00 f203 	lsl.w	r2, r0, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80038b6:	e04c      	b.n	8003952 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b0c      	cmp	r3, #12
 80038be:	d824      	bhi.n	800390a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	4613      	mov	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4413      	add	r3, r2
 80038d0:	3b23      	subs	r3, #35	@ 0x23
 80038d2:	221f      	movs	r2, #31
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	43da      	mvns	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	400a      	ands	r2, r1
 80038e0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	4618      	mov	r0, r3
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	4613      	mov	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4413      	add	r3, r2
 80038fa:	3b23      	subs	r3, #35	@ 0x23
 80038fc:	fa00 f203 	lsl.w	r2, r0, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	631a      	str	r2, [r3, #48]	@ 0x30
 8003908:	e023      	b.n	8003952 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	4613      	mov	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	3b41      	subs	r3, #65	@ 0x41
 800391c:	221f      	movs	r2, #31
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	43da      	mvns	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	400a      	ands	r2, r1
 800392a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	b29b      	uxth	r3, r3
 8003938:	4618      	mov	r0, r3
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	4613      	mov	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	4413      	add	r3, r2
 8003944:	3b41      	subs	r3, #65	@ 0x41
 8003946:	fa00 f203 	lsl.w	r2, r0, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003952:	4b22      	ldr	r3, [pc, #136]	@ (80039dc <HAL_ADC_ConfigChannel+0x234>)
 8003954:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a21      	ldr	r2, [pc, #132]	@ (80039e0 <HAL_ADC_ConfigChannel+0x238>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d109      	bne.n	8003974 <HAL_ADC_ConfigChannel+0x1cc>
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b12      	cmp	r3, #18
 8003966:	d105      	bne.n	8003974 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a19      	ldr	r2, [pc, #100]	@ (80039e0 <HAL_ADC_ConfigChannel+0x238>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d123      	bne.n	80039c6 <HAL_ADC_ConfigChannel+0x21e>
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b10      	cmp	r3, #16
 8003984:	d003      	beq.n	800398e <HAL_ADC_ConfigChannel+0x1e6>
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2b11      	cmp	r3, #17
 800398c:	d11b      	bne.n	80039c6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2b10      	cmp	r3, #16
 80039a0:	d111      	bne.n	80039c6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80039a2:	4b10      	ldr	r3, [pc, #64]	@ (80039e4 <HAL_ADC_ConfigChannel+0x23c>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a10      	ldr	r2, [pc, #64]	@ (80039e8 <HAL_ADC_ConfigChannel+0x240>)
 80039a8:	fba2 2303 	umull	r2, r3, r2, r3
 80039ac:	0c9a      	lsrs	r2, r3, #18
 80039ae:	4613      	mov	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4413      	add	r3, r2
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80039b8:	e002      	b.n	80039c0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	3b01      	subs	r3, #1
 80039be:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1f9      	bne.n	80039ba <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3714      	adds	r7, #20
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr
 80039dc:	40012300 	.word	0x40012300
 80039e0:	40012000 	.word	0x40012000
 80039e4:	200004dc 	.word	0x200004dc
 80039e8:	431bde83 	.word	0x431bde83

080039ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039f4:	4b79      	ldr	r3, [pc, #484]	@ (8003bdc <ADC_Init+0x1f0>)
 80039f6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6859      	ldr	r1, [r3, #4]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	021a      	lsls	r2, r3, #8
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003a44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6859      	ldr	r1, [r3, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689a      	ldr	r2, [r3, #8]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689a      	ldr	r2, [r3, #8]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6899      	ldr	r1, [r3, #8]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a7e:	4a58      	ldr	r2, [pc, #352]	@ (8003be0 <ADC_Init+0x1f4>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d022      	beq.n	8003aca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689a      	ldr	r2, [r3, #8]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003a92:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6899      	ldr	r1, [r3, #8]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003ab4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6899      	ldr	r1, [r3, #8]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	609a      	str	r2, [r3, #8]
 8003ac8:	e00f      	b.n	8003aea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003ad8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003ae8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 0202 	bic.w	r2, r2, #2
 8003af8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	6899      	ldr	r1, [r3, #8]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	7e1b      	ldrb	r3, [r3, #24]
 8003b04:	005a      	lsls	r2, r3, #1
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d01b      	beq.n	8003b50 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b26:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003b36:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6859      	ldr	r1, [r3, #4]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b42:	3b01      	subs	r3, #1
 8003b44:	035a      	lsls	r2, r3, #13
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	605a      	str	r2, [r3, #4]
 8003b4e:	e007      	b.n	8003b60 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685a      	ldr	r2, [r3, #4]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b5e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003b6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	051a      	lsls	r2, r3, #20
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003b94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6899      	ldr	r1, [r3, #8]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003ba2:	025a      	lsls	r2, r3, #9
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	689a      	ldr	r2, [r3, #8]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6899      	ldr	r1, [r3, #8]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	029a      	lsls	r2, r3, #10
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	609a      	str	r2, [r3, #8]
}
 8003bd0:	bf00      	nop
 8003bd2:	3714      	adds	r7, #20
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr
 8003bdc:	40012300 	.word	0x40012300
 8003be0:	0f000001 	.word	0x0f000001

08003be4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e0ed      	b.n	8003de6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d102      	bne.n	8003c1c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7fc ffe4 	bl	8000be4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f042 0201 	orr.w	r2, r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c2c:	f7ff faa0 	bl	8003170 <HAL_GetTick>
 8003c30:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003c32:	e012      	b.n	8003c5a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c34:	f7ff fa9c 	bl	8003170 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b0a      	cmp	r3, #10
 8003c40:	d90b      	bls.n	8003c5a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c46:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2205      	movs	r2, #5
 8003c52:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e0c5      	b.n	8003de6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0e5      	beq.n	8003c34 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 0202 	bic.w	r2, r2, #2
 8003c76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c78:	f7ff fa7a 	bl	8003170 <HAL_GetTick>
 8003c7c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003c7e:	e012      	b.n	8003ca6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c80:	f7ff fa76 	bl	8003170 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b0a      	cmp	r3, #10
 8003c8c:	d90b      	bls.n	8003ca6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c92:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2205      	movs	r2, #5
 8003c9e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e09f      	b.n	8003de6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1e5      	bne.n	8003c80 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	7e1b      	ldrb	r3, [r3, #24]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d108      	bne.n	8003cce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003cca:	601a      	str	r2, [r3, #0]
 8003ccc:	e007      	b.n	8003cde <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003cdc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	7e5b      	ldrb	r3, [r3, #25]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d108      	bne.n	8003cf8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	e007      	b.n	8003d08 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d06:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	7e9b      	ldrb	r3, [r3, #26]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d108      	bne.n	8003d22 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0220 	orr.w	r2, r2, #32
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	e007      	b.n	8003d32 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 0220 	bic.w	r2, r2, #32
 8003d30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	7edb      	ldrb	r3, [r3, #27]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d108      	bne.n	8003d4c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 0210 	bic.w	r2, r2, #16
 8003d48:	601a      	str	r2, [r3, #0]
 8003d4a:	e007      	b.n	8003d5c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f042 0210 	orr.w	r2, r2, #16
 8003d5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	7f1b      	ldrb	r3, [r3, #28]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d108      	bne.n	8003d76 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f042 0208 	orr.w	r2, r2, #8
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	e007      	b.n	8003d86 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 0208 	bic.w	r2, r2, #8
 8003d84:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	7f5b      	ldrb	r3, [r3, #29]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d108      	bne.n	8003da0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f042 0204 	orr.w	r2, r2, #4
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	e007      	b.n	8003db0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 0204 	bic.w	r2, r2, #4
 8003dae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689a      	ldr	r2, [r3, #8]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	431a      	orrs	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	ea42 0103 	orr.w	r1, r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	1e5a      	subs	r2, r3, #1
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
	...

08003df0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b087      	sub	sp, #28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e06:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003e08:	7cfb      	ldrb	r3, [r7, #19]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d003      	beq.n	8003e16 <HAL_CAN_ConfigFilter+0x26>
 8003e0e:	7cfb      	ldrb	r3, [r7, #19]
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	f040 80be 	bne.w	8003f92 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003e16:	4b65      	ldr	r3, [pc, #404]	@ (8003fac <HAL_CAN_ConfigFilter+0x1bc>)
 8003e18:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003e20:	f043 0201 	orr.w	r2, r3, #1
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003e30:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e44:	021b      	lsls	r3, r3, #8
 8003e46:	431a      	orrs	r2, r3
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	f003 031f 	and.w	r3, r3, #31
 8003e56:	2201      	movs	r2, #1
 8003e58:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	43db      	mvns	r3, r3
 8003e68:	401a      	ands	r2, r3
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	69db      	ldr	r3, [r3, #28]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d123      	bne.n	8003ec0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	43db      	mvns	r3, r3
 8003e82:	401a      	ands	r2, r3
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003e9a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	3248      	adds	r2, #72	@ 0x48
 8003ea0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003eb4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003eb6:	6979      	ldr	r1, [r7, #20]
 8003eb8:	3348      	adds	r3, #72	@ 0x48
 8003eba:	00db      	lsls	r3, r3, #3
 8003ebc:	440b      	add	r3, r1
 8003ebe:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	69db      	ldr	r3, [r3, #28]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d122      	bne.n	8003f0e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003ee8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	3248      	adds	r2, #72	@ 0x48
 8003eee:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003f02:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003f04:	6979      	ldr	r1, [r7, #20]
 8003f06:	3348      	adds	r3, #72	@ 0x48
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	440b      	add	r3, r1
 8003f0c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d109      	bne.n	8003f2a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	43db      	mvns	r3, r3
 8003f20:	401a      	ands	r2, r3
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8003f28:	e007      	b.n	8003f3a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	431a      	orrs	r2, r3
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d109      	bne.n	8003f56 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	43db      	mvns	r3, r3
 8003f4c:	401a      	ands	r2, r3
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8003f54:	e007      	b.n	8003f66 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d107      	bne.n	8003f7e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	431a      	orrs	r2, r3
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003f84:	f023 0201 	bic.w	r2, r3, #1
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	e006      	b.n	8003fa0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f96:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
  }
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	371c      	adds	r7, #28
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	40006400 	.word	0x40006400

08003fb0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d12e      	bne.n	8004022 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0201 	bic.w	r2, r2, #1
 8003fda:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003fdc:	f7ff f8c8 	bl	8003170 <HAL_GetTick>
 8003fe0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003fe2:	e012      	b.n	800400a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003fe4:	f7ff f8c4 	bl	8003170 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b0a      	cmp	r3, #10
 8003ff0:	d90b      	bls.n	800400a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2205      	movs	r2, #5
 8004002:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e012      	b.n	8004030 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1e5      	bne.n	8003fe4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800401e:	2300      	movs	r3, #0
 8004020:	e006      	b.n	8004030 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004026:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
  }
}
 8004030:	4618      	mov	r0, r3
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004038:	b480      	push	{r7}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
 8004044:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f893 3020 	ldrb.w	r3, [r3, #32]
 800404c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800404e:	7dfb      	ldrb	r3, [r7, #23]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d003      	beq.n	800405c <HAL_CAN_GetRxMessage+0x24>
 8004054:	7dfb      	ldrb	r3, [r7, #23]
 8004056:	2b02      	cmp	r3, #2
 8004058:	f040 8103 	bne.w	8004262 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10e      	bne.n	8004080 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	f003 0303 	and.w	r3, r3, #3
 800406c:	2b00      	cmp	r3, #0
 800406e:	d116      	bne.n	800409e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004074:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e0f7      	b.n	8004270 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	f003 0303 	and.w	r3, r3, #3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d107      	bne.n	800409e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004092:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e0e8      	b.n	8004270 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	331b      	adds	r3, #27
 80040a6:	011b      	lsls	r3, r3, #4
 80040a8:	4413      	add	r3, r2
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0204 	and.w	r2, r3, #4
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10c      	bne.n	80040d6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	331b      	adds	r3, #27
 80040c4:	011b      	lsls	r3, r3, #4
 80040c6:	4413      	add	r3, r2
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	0d5b      	lsrs	r3, r3, #21
 80040cc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	e00b      	b.n	80040ee <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	331b      	adds	r3, #27
 80040de:	011b      	lsls	r3, r3, #4
 80040e0:	4413      	add	r3, r2
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	08db      	lsrs	r3, r3, #3
 80040e6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	331b      	adds	r3, #27
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	4413      	add	r3, r2
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0202 	and.w	r2, r3, #2
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	331b      	adds	r3, #27
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	4413      	add	r3, r2
 8004110:	3304      	adds	r3, #4
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0308 	and.w	r3, r3, #8
 8004118:	2b00      	cmp	r3, #0
 800411a:	d003      	beq.n	8004124 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2208      	movs	r2, #8
 8004120:	611a      	str	r2, [r3, #16]
 8004122:	e00b      	b.n	800413c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	331b      	adds	r3, #27
 800412c:	011b      	lsls	r3, r3, #4
 800412e:	4413      	add	r3, r2
 8004130:	3304      	adds	r3, #4
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 020f 	and.w	r2, r3, #15
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	331b      	adds	r3, #27
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	4413      	add	r3, r2
 8004148:	3304      	adds	r3, #4
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	0a1b      	lsrs	r3, r3, #8
 800414e:	b2da      	uxtb	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	331b      	adds	r3, #27
 800415c:	011b      	lsls	r3, r3, #4
 800415e:	4413      	add	r3, r2
 8004160:	3304      	adds	r3, #4
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	0c1b      	lsrs	r3, r3, #16
 8004166:	b29a      	uxth	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	011b      	lsls	r3, r3, #4
 8004174:	4413      	add	r3, r2
 8004176:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	b2da      	uxtb	r2, r3
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	4413      	add	r3, r2
 800418c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	0a1a      	lsrs	r2, r3, #8
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	3301      	adds	r3, #1
 8004198:	b2d2      	uxtb	r2, r2
 800419a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	011b      	lsls	r3, r3, #4
 80041a4:	4413      	add	r3, r2
 80041a6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	0c1a      	lsrs	r2, r3, #16
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	3302      	adds	r3, #2
 80041b2:	b2d2      	uxtb	r2, r2
 80041b4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	011b      	lsls	r3, r3, #4
 80041be:	4413      	add	r3, r2
 80041c0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	0e1a      	lsrs	r2, r3, #24
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	3303      	adds	r3, #3
 80041cc:	b2d2      	uxtb	r2, r2
 80041ce:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	011b      	lsls	r3, r3, #4
 80041d8:	4413      	add	r3, r2
 80041da:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	3304      	adds	r3, #4
 80041e4:	b2d2      	uxtb	r2, r2
 80041e6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	011b      	lsls	r3, r3, #4
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	0a1a      	lsrs	r2, r3, #8
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	3305      	adds	r3, #5
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	011b      	lsls	r3, r3, #4
 800420a:	4413      	add	r3, r2
 800420c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	0c1a      	lsrs	r2, r3, #16
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	3306      	adds	r3, #6
 8004218:	b2d2      	uxtb	r2, r2
 800421a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	4413      	add	r3, r2
 8004226:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	0e1a      	lsrs	r2, r3, #24
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	3307      	adds	r3, #7
 8004232:	b2d2      	uxtb	r2, r2
 8004234:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d108      	bne.n	800424e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68da      	ldr	r2, [r3, #12]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f042 0220 	orr.w	r2, r2, #32
 800424a:	60da      	str	r2, [r3, #12]
 800424c:	e007      	b.n	800425e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	691a      	ldr	r2, [r3, #16]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f042 0220 	orr.w	r2, r2, #32
 800425c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800425e:	2300      	movs	r3, #0
 8004260:	e006      	b.n	8004270 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004266:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
  }
}
 8004270:	4618      	mov	r0, r3
 8004272:	371c      	adds	r7, #28
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 3020 	ldrb.w	r3, [r3, #32]
 800428c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800428e:	7bfb      	ldrb	r3, [r7, #15]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d002      	beq.n	800429a <HAL_CAN_ActivateNotification+0x1e>
 8004294:	7bfb      	ldrb	r3, [r7, #15]
 8004296:	2b02      	cmp	r3, #2
 8004298:	d109      	bne.n	80042ae <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	6959      	ldr	r1, [r3, #20]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80042aa:	2300      	movs	r3, #0
 80042ac:	e006      	b.n	80042bc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
  }
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b08a      	sub	sp, #40	@ 0x28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80042d0:	2300      	movs	r3, #0
 80042d2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004304:	6a3b      	ldr	r3, [r7, #32]
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	d07c      	beq.n	8004408 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b00      	cmp	r3, #0
 8004316:	d023      	beq.n	8004360 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2201      	movs	r2, #1
 800431e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f983 	bl	8004636 <HAL_CAN_TxMailbox0CompleteCallback>
 8004330:	e016      	b.n	8004360 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	f003 0304 	and.w	r3, r3, #4
 8004338:	2b00      	cmp	r3, #0
 800433a:	d004      	beq.n	8004346 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800433c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004342:	627b      	str	r3, [r7, #36]	@ 0x24
 8004344:	e00c      	b.n	8004360 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	f003 0308 	and.w	r3, r3, #8
 800434c:	2b00      	cmp	r3, #0
 800434e:	d004      	beq.n	800435a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004352:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004356:	627b      	str	r3, [r7, #36]	@ 0x24
 8004358:	e002      	b.n	8004360 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f989 	bl	8004672 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004366:	2b00      	cmp	r3, #0
 8004368:	d024      	beq.n	80043b4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004372:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f963 	bl	800464a <HAL_CAN_TxMailbox1CompleteCallback>
 8004384:	e016      	b.n	80043b4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800438c:	2b00      	cmp	r3, #0
 800438e:	d004      	beq.n	800439a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004392:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004396:	627b      	str	r3, [r7, #36]	@ 0x24
 8004398:	e00c      	b.n	80043b4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d004      	beq.n	80043ae <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80043a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80043aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80043ac:	e002      	b.n	80043b4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f969 	bl	8004686 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d024      	beq.n	8004408 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80043c6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f943 	bl	800465e <HAL_CAN_TxMailbox2CompleteCallback>
 80043d8:	e016      	b.n	8004408 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d004      	beq.n	80043ee <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80043e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80043ec:	e00c      	b.n	8004408 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d004      	beq.n	8004402 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80043f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004400:	e002      	b.n	8004408 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 f949 	bl	800469a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	f003 0308 	and.w	r3, r3, #8
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00c      	beq.n	800442c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f003 0310 	and.w	r3, r3, #16
 8004418:	2b00      	cmp	r3, #0
 800441a:	d007      	beq.n	800442c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800441c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004422:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2210      	movs	r2, #16
 800442a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800442c:	6a3b      	ldr	r3, [r7, #32]
 800442e:	f003 0304 	and.w	r3, r3, #4
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00b      	beq.n	800444e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f003 0308 	and.w	r3, r3, #8
 800443c:	2b00      	cmp	r3, #0
 800443e:	d006      	beq.n	800444e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2208      	movs	r2, #8
 8004446:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 f930 	bl	80046ae <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800444e:	6a3b      	ldr	r3, [r7, #32]
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d009      	beq.n	800446c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	f003 0303 	and.w	r3, r3, #3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d002      	beq.n	800446c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7fc fe12 	bl	8001090 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800446c:	6a3b      	ldr	r3, [r7, #32]
 800446e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00c      	beq.n	8004490 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	f003 0310 	and.w	r3, r3, #16
 800447c:	2b00      	cmp	r3, #0
 800447e:	d007      	beq.n	8004490 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004482:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004486:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2210      	movs	r2, #16
 800448e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004490:	6a3b      	ldr	r3, [r7, #32]
 8004492:	f003 0320 	and.w	r3, r3, #32
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00b      	beq.n	80044b2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	f003 0308 	and.w	r3, r3, #8
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d006      	beq.n	80044b2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2208      	movs	r2, #8
 80044aa:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 f912 	bl	80046d6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80044b2:	6a3b      	ldr	r3, [r7, #32]
 80044b4:	f003 0310 	and.w	r3, r3, #16
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d009      	beq.n	80044d0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	f003 0303 	and.w	r3, r3, #3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d002      	beq.n	80044d0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f8f9 	bl	80046c2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80044d0:	6a3b      	ldr	r3, [r7, #32]
 80044d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00b      	beq.n	80044f2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	f003 0310 	and.w	r3, r3, #16
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d006      	beq.n	80044f2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2210      	movs	r2, #16
 80044ea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f8fc 	bl	80046ea <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80044f2:	6a3b      	ldr	r3, [r7, #32]
 80044f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00b      	beq.n	8004514 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	f003 0308 	and.w	r3, r3, #8
 8004502:	2b00      	cmp	r3, #0
 8004504:	d006      	beq.n	8004514 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2208      	movs	r2, #8
 800450c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f8f5 	bl	80046fe <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004514:	6a3b      	ldr	r3, [r7, #32]
 8004516:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d07b      	beq.n	8004616 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	f003 0304 	and.w	r3, r3, #4
 8004524:	2b00      	cmp	r3, #0
 8004526:	d072      	beq.n	800460e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800452e:	2b00      	cmp	r3, #0
 8004530:	d008      	beq.n	8004544 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004538:	2b00      	cmp	r3, #0
 800453a:	d003      	beq.n	8004544 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800453c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453e:	f043 0301 	orr.w	r3, r3, #1
 8004542:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004544:	6a3b      	ldr	r3, [r7, #32]
 8004546:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800454a:	2b00      	cmp	r3, #0
 800454c:	d008      	beq.n	8004560 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004554:	2b00      	cmp	r3, #0
 8004556:	d003      	beq.n	8004560 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800455a:	f043 0302 	orr.w	r3, r3, #2
 800455e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004560:	6a3b      	ldr	r3, [r7, #32]
 8004562:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004566:	2b00      	cmp	r3, #0
 8004568:	d008      	beq.n	800457c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004570:	2b00      	cmp	r3, #0
 8004572:	d003      	beq.n	800457c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004576:	f043 0304 	orr.w	r3, r3, #4
 800457a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800457c:	6a3b      	ldr	r3, [r7, #32]
 800457e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004582:	2b00      	cmp	r3, #0
 8004584:	d043      	beq.n	800460e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800458c:	2b00      	cmp	r3, #0
 800458e:	d03e      	beq.n	800460e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004596:	2b60      	cmp	r3, #96	@ 0x60
 8004598:	d02b      	beq.n	80045f2 <HAL_CAN_IRQHandler+0x32a>
 800459a:	2b60      	cmp	r3, #96	@ 0x60
 800459c:	d82e      	bhi.n	80045fc <HAL_CAN_IRQHandler+0x334>
 800459e:	2b50      	cmp	r3, #80	@ 0x50
 80045a0:	d022      	beq.n	80045e8 <HAL_CAN_IRQHandler+0x320>
 80045a2:	2b50      	cmp	r3, #80	@ 0x50
 80045a4:	d82a      	bhi.n	80045fc <HAL_CAN_IRQHandler+0x334>
 80045a6:	2b40      	cmp	r3, #64	@ 0x40
 80045a8:	d019      	beq.n	80045de <HAL_CAN_IRQHandler+0x316>
 80045aa:	2b40      	cmp	r3, #64	@ 0x40
 80045ac:	d826      	bhi.n	80045fc <HAL_CAN_IRQHandler+0x334>
 80045ae:	2b30      	cmp	r3, #48	@ 0x30
 80045b0:	d010      	beq.n	80045d4 <HAL_CAN_IRQHandler+0x30c>
 80045b2:	2b30      	cmp	r3, #48	@ 0x30
 80045b4:	d822      	bhi.n	80045fc <HAL_CAN_IRQHandler+0x334>
 80045b6:	2b10      	cmp	r3, #16
 80045b8:	d002      	beq.n	80045c0 <HAL_CAN_IRQHandler+0x2f8>
 80045ba:	2b20      	cmp	r3, #32
 80045bc:	d005      	beq.n	80045ca <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80045be:	e01d      	b.n	80045fc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80045c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c2:	f043 0308 	orr.w	r3, r3, #8
 80045c6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80045c8:	e019      	b.n	80045fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80045ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045cc:	f043 0310 	orr.w	r3, r3, #16
 80045d0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80045d2:	e014      	b.n	80045fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80045d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d6:	f043 0320 	orr.w	r3, r3, #32
 80045da:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80045dc:	e00f      	b.n	80045fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80045de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045e4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80045e6:	e00a      	b.n	80045fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80045e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045ee:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80045f0:	e005      	b.n	80045fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80045f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045f8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80045fa:	e000      	b.n	80045fe <HAL_CAN_IRQHandler+0x336>
            break;
 80045fc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	699a      	ldr	r2, [r3, #24]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800460c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2204      	movs	r2, #4
 8004614:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004618:	2b00      	cmp	r3, #0
 800461a:	d008      	beq.n	800462e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004622:	431a      	orrs	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f7fc fd5f 	bl	80010ec <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800462e:	bf00      	nop
 8004630:	3728      	adds	r7, #40	@ 0x28
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004636:	b480      	push	{r7}
 8004638:	b083      	sub	sp, #12
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800463e:	bf00      	nop
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800465e:	b480      	push	{r7}
 8004660:	b083      	sub	sp, #12
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004666:	bf00      	nop
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr

08004672 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004672:	b480      	push	{r7}
 8004674:	b083      	sub	sp, #12
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800467a:	bf00      	nop
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004686:	b480      	push	{r7}
 8004688:	b083      	sub	sp, #12
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800469a:	b480      	push	{r7}
 800469c:	b083      	sub	sp, #12
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80046a2:	bf00      	nop
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b083      	sub	sp, #12
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80046c2:	b480      	push	{r7}
 80046c4:	b083      	sub	sp, #12
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80046ca:	bf00      	nop
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr

080046d6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b083      	sub	sp, #12
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80046de:	bf00      	nop
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b083      	sub	sp, #12
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80046f2:	bf00      	nop
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80046fe:	b480      	push	{r7}
 8004700:	b083      	sub	sp, #12
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004706:	bf00      	nop
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 8004712:	b480      	push	{r7}
 8004714:	b083      	sub	sp, #12
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 800471e:	4618      	mov	r0, r3
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
	...

0800472c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f003 0307 	and.w	r3, r3, #7
 800473a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800473c:	4b0c      	ldr	r3, [pc, #48]	@ (8004770 <__NVIC_SetPriorityGrouping+0x44>)
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004748:	4013      	ands	r3, r2
 800474a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004754:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004758:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800475c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800475e:	4a04      	ldr	r2, [pc, #16]	@ (8004770 <__NVIC_SetPriorityGrouping+0x44>)
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	60d3      	str	r3, [r2, #12]
}
 8004764:	bf00      	nop
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	e000ed00 	.word	0xe000ed00

08004774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004778:	4b04      	ldr	r3, [pc, #16]	@ (800478c <__NVIC_GetPriorityGrouping+0x18>)
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	0a1b      	lsrs	r3, r3, #8
 800477e:	f003 0307 	and.w	r3, r3, #7
}
 8004782:	4618      	mov	r0, r3
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr
 800478c:	e000ed00 	.word	0xe000ed00

08004790 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	4603      	mov	r3, r0
 8004798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800479a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	db0b      	blt.n	80047ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047a2:	79fb      	ldrb	r3, [r7, #7]
 80047a4:	f003 021f 	and.w	r2, r3, #31
 80047a8:	4907      	ldr	r1, [pc, #28]	@ (80047c8 <__NVIC_EnableIRQ+0x38>)
 80047aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ae:	095b      	lsrs	r3, r3, #5
 80047b0:	2001      	movs	r0, #1
 80047b2:	fa00 f202 	lsl.w	r2, r0, r2
 80047b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80047ba:	bf00      	nop
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	e000e100 	.word	0xe000e100

080047cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	4603      	mov	r3, r0
 80047d4:	6039      	str	r1, [r7, #0]
 80047d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	db0a      	blt.n	80047f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	490c      	ldr	r1, [pc, #48]	@ (8004818 <__NVIC_SetPriority+0x4c>)
 80047e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ea:	0112      	lsls	r2, r2, #4
 80047ec:	b2d2      	uxtb	r2, r2
 80047ee:	440b      	add	r3, r1
 80047f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047f4:	e00a      	b.n	800480c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	b2da      	uxtb	r2, r3
 80047fa:	4908      	ldr	r1, [pc, #32]	@ (800481c <__NVIC_SetPriority+0x50>)
 80047fc:	79fb      	ldrb	r3, [r7, #7]
 80047fe:	f003 030f 	and.w	r3, r3, #15
 8004802:	3b04      	subs	r3, #4
 8004804:	0112      	lsls	r2, r2, #4
 8004806:	b2d2      	uxtb	r2, r2
 8004808:	440b      	add	r3, r1
 800480a:	761a      	strb	r2, [r3, #24]
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr
 8004818:	e000e100 	.word	0xe000e100
 800481c:	e000ed00 	.word	0xe000ed00

08004820 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004820:	b480      	push	{r7}
 8004822:	b089      	sub	sp, #36	@ 0x24
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f003 0307 	and.w	r3, r3, #7
 8004832:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	f1c3 0307 	rsb	r3, r3, #7
 800483a:	2b04      	cmp	r3, #4
 800483c:	bf28      	it	cs
 800483e:	2304      	movcs	r3, #4
 8004840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	3304      	adds	r3, #4
 8004846:	2b06      	cmp	r3, #6
 8004848:	d902      	bls.n	8004850 <NVIC_EncodePriority+0x30>
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	3b03      	subs	r3, #3
 800484e:	e000      	b.n	8004852 <NVIC_EncodePriority+0x32>
 8004850:	2300      	movs	r3, #0
 8004852:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004854:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	fa02 f303 	lsl.w	r3, r2, r3
 800485e:	43da      	mvns	r2, r3
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	401a      	ands	r2, r3
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004868:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	fa01 f303 	lsl.w	r3, r1, r3
 8004872:	43d9      	mvns	r1, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004878:	4313      	orrs	r3, r2
         );
}
 800487a:	4618      	mov	r0, r3
 800487c:	3724      	adds	r7, #36	@ 0x24
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
	...

08004888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	3b01      	subs	r3, #1
 8004894:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004898:	d301      	bcc.n	800489e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800489a:	2301      	movs	r3, #1
 800489c:	e00f      	b.n	80048be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800489e:	4a0a      	ldr	r2, [pc, #40]	@ (80048c8 <SysTick_Config+0x40>)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	3b01      	subs	r3, #1
 80048a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048a6:	210f      	movs	r1, #15
 80048a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80048ac:	f7ff ff8e 	bl	80047cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048b0:	4b05      	ldr	r3, [pc, #20]	@ (80048c8 <SysTick_Config+0x40>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048b6:	4b04      	ldr	r3, [pc, #16]	@ (80048c8 <SysTick_Config+0x40>)
 80048b8:	2207      	movs	r2, #7
 80048ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	e000e010 	.word	0xe000e010

080048cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7ff ff29 	bl	800472c <__NVIC_SetPriorityGrouping>
}
 80048da:	bf00      	nop
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b086      	sub	sp, #24
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	4603      	mov	r3, r0
 80048ea:	60b9      	str	r1, [r7, #8]
 80048ec:	607a      	str	r2, [r7, #4]
 80048ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80048f0:	2300      	movs	r3, #0
 80048f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048f4:	f7ff ff3e 	bl	8004774 <__NVIC_GetPriorityGrouping>
 80048f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	68b9      	ldr	r1, [r7, #8]
 80048fe:	6978      	ldr	r0, [r7, #20]
 8004900:	f7ff ff8e 	bl	8004820 <NVIC_EncodePriority>
 8004904:	4602      	mov	r2, r0
 8004906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800490a:	4611      	mov	r1, r2
 800490c:	4618      	mov	r0, r3
 800490e:	f7ff ff5d 	bl	80047cc <__NVIC_SetPriority>
}
 8004912:	bf00      	nop
 8004914:	3718      	adds	r7, #24
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b082      	sub	sp, #8
 800491e:	af00      	add	r7, sp, #0
 8004920:	4603      	mov	r3, r0
 8004922:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004928:	4618      	mov	r0, r3
 800492a:	f7ff ff31 	bl	8004790 <__NVIC_EnableIRQ>
}
 800492e:	bf00      	nop
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b082      	sub	sp, #8
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7ff ffa2 	bl	8004888 <SysTick_Config>
 8004944:	4603      	mov	r3, r0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3708      	adds	r7, #8
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b082      	sub	sp, #8
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e014      	b.n	800498a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	791b      	ldrb	r3, [r3, #4]
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d105      	bne.n	8004976 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f7fc fa29 	bl	8000dc8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2202      	movs	r2, #2
 800497a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004992:	b480      	push	{r7}
 8004994:	b083      	sub	sp, #12
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
 800499a:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e046      	b.n	8004a34 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	795b      	ldrb	r3, [r3, #5]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d101      	bne.n	80049b2 <HAL_DAC_Start+0x20>
 80049ae:	2302      	movs	r3, #2
 80049b0:	e040      	b.n	8004a34 <HAL_DAC_Start+0xa2>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	6819      	ldr	r1, [r3, #0]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	f003 0310 	and.w	r3, r3, #16
 80049ca:	2201      	movs	r2, #1
 80049cc:	409a      	lsls	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d10f      	bne.n	80049fc <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 80049e6:	2b3c      	cmp	r3, #60	@ 0x3c
 80049e8:	d11d      	bne.n	8004a26 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f042 0201 	orr.w	r2, r2, #1
 80049f8:	605a      	str	r2, [r3, #4]
 80049fa:	e014      	b.n	8004a26 <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	f003 0310 	and.w	r3, r3, #16
 8004a0c:	213c      	movs	r1, #60	@ 0x3c
 8004a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d107      	bne.n	8004a26 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f042 0202 	orr.w	r2, r2, #2
 8004a24:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a56:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d01d      	beq.n	8004a9e <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d018      	beq.n	8004a9e <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2204      	movs	r2, #4
 8004a70:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	f043 0201 	orr.w	r2, r3, #1
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004a86:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004a96:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f851 	bl	8004b40 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d01d      	beq.n	8004ae4 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d018      	beq.n	8004ae4 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2204      	movs	r2, #4
 8004ab6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	f043 0202 	orr.w	r2, r3, #2
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004acc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8004adc:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f891 	bl	8004c06 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8004ae4:	bf00      	nop
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b087      	sub	sp, #28
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
 8004af8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004afa:	2300      	movs	r3, #0
 8004afc:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d101      	bne.n	8004b08 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e015      	b.n	8004b34 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d105      	bne.n	8004b20 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4413      	add	r3, r2
 8004b1a:	3308      	adds	r3, #8
 8004b1c:	617b      	str	r3, [r7, #20]
 8004b1e:	e004      	b.n	8004b2a <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4413      	add	r3, r2
 8004b26:	3314      	adds	r3, #20
 8004b28:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	371c      	adds	r7, #28
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b089      	sub	sp, #36	@ 0x24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b60:	2300      	movs	r3, #0
 8004b62:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d002      	beq.n	8004b70 <HAL_DAC_ConfigChannel+0x1c>
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e042      	b.n	8004bfa <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	795b      	ldrb	r3, [r3, #5]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d101      	bne.n	8004b80 <HAL_DAC_ConfigChannel+0x2c>
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	e03c      	b.n	8004bfa <HAL_DAC_ConfigChannel+0xa6>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2201      	movs	r2, #1
 8004b84:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2202      	movs	r2, #2
 8004b8a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f003 0310 	and.w	r3, r3, #16
 8004b9a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8004b9e:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8004ba2:	43db      	mvns	r3, r3
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f003 0310 	and.w	r3, r3, #16
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6819      	ldr	r1, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f003 0310 	and.w	r3, r3, #16
 8004bdc:	22c0      	movs	r2, #192	@ 0xc0
 8004bde:	fa02 f303 	lsl.w	r3, r2, r3
 8004be2:	43da      	mvns	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	400a      	ands	r2, r1
 8004bea:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004bf8:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3724      	adds	r7, #36	@ 0x24
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b083      	sub	sp, #12
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004c0e:	bf00      	nop
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
	...

08004c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b089      	sub	sp, #36	@ 0x24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c26:	2300      	movs	r3, #0
 8004c28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c32:	2300      	movs	r3, #0
 8004c34:	61fb      	str	r3, [r7, #28]
 8004c36:	e16b      	b.n	8004f10 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c38:	2201      	movs	r2, #1
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	4013      	ands	r3, r2
 8004c4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	f040 815a 	bne.w	8004f0a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f003 0303 	and.w	r3, r3, #3
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d005      	beq.n	8004c6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d130      	bne.n	8004cd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	005b      	lsls	r3, r3, #1
 8004c78:	2203      	movs	r2, #3
 8004c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7e:	43db      	mvns	r3, r3
 8004c80:	69ba      	ldr	r2, [r7, #24]
 8004c82:	4013      	ands	r3, r2
 8004c84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	68da      	ldr	r2, [r3, #12]
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c92:	69ba      	ldr	r2, [r7, #24]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	69ba      	ldr	r2, [r7, #24]
 8004c9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cac:	43db      	mvns	r3, r3
 8004cae:	69ba      	ldr	r2, [r7, #24]
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	091b      	lsrs	r3, r3, #4
 8004cba:	f003 0201 	and.w	r2, r3, #1
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc4:	69ba      	ldr	r2, [r7, #24]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	69ba      	ldr	r2, [r7, #24]
 8004cce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f003 0303 	and.w	r3, r3, #3
 8004cd8:	2b03      	cmp	r3, #3
 8004cda:	d017      	beq.n	8004d0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	005b      	lsls	r3, r3, #1
 8004ce6:	2203      	movs	r2, #3
 8004ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cec:	43db      	mvns	r3, r3
 8004cee:	69ba      	ldr	r2, [r7, #24]
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	689a      	ldr	r2, [r3, #8]
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f003 0303 	and.w	r3, r3, #3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d123      	bne.n	8004d60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	08da      	lsrs	r2, r3, #3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	3208      	adds	r2, #8
 8004d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	f003 0307 	and.w	r3, r3, #7
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	220f      	movs	r2, #15
 8004d30:	fa02 f303 	lsl.w	r3, r2, r3
 8004d34:	43db      	mvns	r3, r3
 8004d36:	69ba      	ldr	r2, [r7, #24]
 8004d38:	4013      	ands	r3, r2
 8004d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	691a      	ldr	r2, [r3, #16]
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	f003 0307 	and.w	r3, r3, #7
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	08da      	lsrs	r2, r3, #3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	3208      	adds	r2, #8
 8004d5a:	69b9      	ldr	r1, [r7, #24]
 8004d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	005b      	lsls	r3, r3, #1
 8004d6a:	2203      	movs	r2, #3
 8004d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d70:	43db      	mvns	r3, r3
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	4013      	ands	r3, r2
 8004d76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f003 0203 	and.w	r2, r3, #3
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	005b      	lsls	r3, r3, #1
 8004d84:	fa02 f303 	lsl.w	r3, r2, r3
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	69ba      	ldr	r2, [r7, #24]
 8004d92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f000 80b4 	beq.w	8004f0a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004da2:	2300      	movs	r3, #0
 8004da4:	60fb      	str	r3, [r7, #12]
 8004da6:	4b60      	ldr	r3, [pc, #384]	@ (8004f28 <HAL_GPIO_Init+0x30c>)
 8004da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004daa:	4a5f      	ldr	r2, [pc, #380]	@ (8004f28 <HAL_GPIO_Init+0x30c>)
 8004dac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004db0:	6453      	str	r3, [r2, #68]	@ 0x44
 8004db2:	4b5d      	ldr	r3, [pc, #372]	@ (8004f28 <HAL_GPIO_Init+0x30c>)
 8004db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004db6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004dba:	60fb      	str	r3, [r7, #12]
 8004dbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004dbe:	4a5b      	ldr	r2, [pc, #364]	@ (8004f2c <HAL_GPIO_Init+0x310>)
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	089b      	lsrs	r3, r3, #2
 8004dc4:	3302      	adds	r3, #2
 8004dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	f003 0303 	and.w	r3, r3, #3
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	220f      	movs	r2, #15
 8004dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dda:	43db      	mvns	r3, r3
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	4013      	ands	r3, r2
 8004de0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a52      	ldr	r2, [pc, #328]	@ (8004f30 <HAL_GPIO_Init+0x314>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d02b      	beq.n	8004e42 <HAL_GPIO_Init+0x226>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a51      	ldr	r2, [pc, #324]	@ (8004f34 <HAL_GPIO_Init+0x318>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d025      	beq.n	8004e3e <HAL_GPIO_Init+0x222>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a50      	ldr	r2, [pc, #320]	@ (8004f38 <HAL_GPIO_Init+0x31c>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d01f      	beq.n	8004e3a <HAL_GPIO_Init+0x21e>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a4f      	ldr	r2, [pc, #316]	@ (8004f3c <HAL_GPIO_Init+0x320>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d019      	beq.n	8004e36 <HAL_GPIO_Init+0x21a>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a4e      	ldr	r2, [pc, #312]	@ (8004f40 <HAL_GPIO_Init+0x324>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d013      	beq.n	8004e32 <HAL_GPIO_Init+0x216>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a4d      	ldr	r2, [pc, #308]	@ (8004f44 <HAL_GPIO_Init+0x328>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d00d      	beq.n	8004e2e <HAL_GPIO_Init+0x212>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a4c      	ldr	r2, [pc, #304]	@ (8004f48 <HAL_GPIO_Init+0x32c>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d007      	beq.n	8004e2a <HAL_GPIO_Init+0x20e>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a4b      	ldr	r2, [pc, #300]	@ (8004f4c <HAL_GPIO_Init+0x330>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d101      	bne.n	8004e26 <HAL_GPIO_Init+0x20a>
 8004e22:	2307      	movs	r3, #7
 8004e24:	e00e      	b.n	8004e44 <HAL_GPIO_Init+0x228>
 8004e26:	2308      	movs	r3, #8
 8004e28:	e00c      	b.n	8004e44 <HAL_GPIO_Init+0x228>
 8004e2a:	2306      	movs	r3, #6
 8004e2c:	e00a      	b.n	8004e44 <HAL_GPIO_Init+0x228>
 8004e2e:	2305      	movs	r3, #5
 8004e30:	e008      	b.n	8004e44 <HAL_GPIO_Init+0x228>
 8004e32:	2304      	movs	r3, #4
 8004e34:	e006      	b.n	8004e44 <HAL_GPIO_Init+0x228>
 8004e36:	2303      	movs	r3, #3
 8004e38:	e004      	b.n	8004e44 <HAL_GPIO_Init+0x228>
 8004e3a:	2302      	movs	r3, #2
 8004e3c:	e002      	b.n	8004e44 <HAL_GPIO_Init+0x228>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e000      	b.n	8004e44 <HAL_GPIO_Init+0x228>
 8004e42:	2300      	movs	r3, #0
 8004e44:	69fa      	ldr	r2, [r7, #28]
 8004e46:	f002 0203 	and.w	r2, r2, #3
 8004e4a:	0092      	lsls	r2, r2, #2
 8004e4c:	4093      	lsls	r3, r2
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e54:	4935      	ldr	r1, [pc, #212]	@ (8004f2c <HAL_GPIO_Init+0x310>)
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	089b      	lsrs	r3, r3, #2
 8004e5a:	3302      	adds	r3, #2
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e62:	4b3b      	ldr	r3, [pc, #236]	@ (8004f50 <HAL_GPIO_Init+0x334>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	43db      	mvns	r3, r3
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	4013      	ands	r3, r2
 8004e70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004e7e:	69ba      	ldr	r2, [r7, #24]
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e86:	4a32      	ldr	r2, [pc, #200]	@ (8004f50 <HAL_GPIO_Init+0x334>)
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e8c:	4b30      	ldr	r3, [pc, #192]	@ (8004f50 <HAL_GPIO_Init+0x334>)
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	43db      	mvns	r3, r3
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	4013      	ands	r3, r2
 8004e9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d003      	beq.n	8004eb0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004eb0:	4a27      	ldr	r2, [pc, #156]	@ (8004f50 <HAL_GPIO_Init+0x334>)
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004eb6:	4b26      	ldr	r3, [pc, #152]	@ (8004f50 <HAL_GPIO_Init+0x334>)
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	43db      	mvns	r3, r3
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004eda:	4a1d      	ldr	r2, [pc, #116]	@ (8004f50 <HAL_GPIO_Init+0x334>)
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8004f50 <HAL_GPIO_Init+0x334>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	43db      	mvns	r3, r3
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	4013      	ands	r3, r2
 8004eee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d003      	beq.n	8004f04 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f04:	4a12      	ldr	r2, [pc, #72]	@ (8004f50 <HAL_GPIO_Init+0x334>)
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	61fb      	str	r3, [r7, #28]
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	2b0f      	cmp	r3, #15
 8004f14:	f67f ae90 	bls.w	8004c38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f18:	bf00      	nop
 8004f1a:	bf00      	nop
 8004f1c:	3724      	adds	r7, #36	@ 0x24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	40023800 	.word	0x40023800
 8004f2c:	40013800 	.word	0x40013800
 8004f30:	40020000 	.word	0x40020000
 8004f34:	40020400 	.word	0x40020400
 8004f38:	40020800 	.word	0x40020800
 8004f3c:	40020c00 	.word	0x40020c00
 8004f40:	40021000 	.word	0x40021000
 8004f44:	40021400 	.word	0x40021400
 8004f48:	40021800 	.word	0x40021800
 8004f4c:	40021c00 	.word	0x40021c00
 8004f50:	40013c00 	.word	0x40013c00

08004f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	807b      	strh	r3, [r7, #2]
 8004f60:	4613      	mov	r3, r2
 8004f62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f64:	787b      	ldrb	r3, [r7, #1]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f6a:	887a      	ldrh	r2, [r7, #2]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f70:	e003      	b.n	8004f7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f72:	887b      	ldrh	r3, [r7, #2]
 8004f74:	041a      	lsls	r2, r3, #16
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	619a      	str	r2, [r3, #24]
}
 8004f7a:	bf00      	nop
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
	...

08004f88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d101      	bne.n	8004f9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e12b      	b.n	80051f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d106      	bne.n	8004fb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7fc f826 	bl	8001000 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2224      	movs	r2, #36	@ 0x24
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f022 0201 	bic.w	r2, r2, #1
 8004fca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004fda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004fea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004fec:	f000 fd40 	bl	8005a70 <HAL_RCC_GetPCLK1Freq>
 8004ff0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	4a81      	ldr	r2, [pc, #516]	@ (80051fc <HAL_I2C_Init+0x274>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d807      	bhi.n	800500c <HAL_I2C_Init+0x84>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	4a80      	ldr	r2, [pc, #512]	@ (8005200 <HAL_I2C_Init+0x278>)
 8005000:	4293      	cmp	r3, r2
 8005002:	bf94      	ite	ls
 8005004:	2301      	movls	r3, #1
 8005006:	2300      	movhi	r3, #0
 8005008:	b2db      	uxtb	r3, r3
 800500a:	e006      	b.n	800501a <HAL_I2C_Init+0x92>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	4a7d      	ldr	r2, [pc, #500]	@ (8005204 <HAL_I2C_Init+0x27c>)
 8005010:	4293      	cmp	r3, r2
 8005012:	bf94      	ite	ls
 8005014:	2301      	movls	r3, #1
 8005016:	2300      	movhi	r3, #0
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d001      	beq.n	8005022 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e0e7      	b.n	80051f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	4a78      	ldr	r2, [pc, #480]	@ (8005208 <HAL_I2C_Init+0x280>)
 8005026:	fba2 2303 	umull	r2, r3, r2, r3
 800502a:	0c9b      	lsrs	r3, r3, #18
 800502c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	430a      	orrs	r2, r1
 8005040:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6a1b      	ldr	r3, [r3, #32]
 8005048:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	4a6a      	ldr	r2, [pc, #424]	@ (80051fc <HAL_I2C_Init+0x274>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d802      	bhi.n	800505c <HAL_I2C_Init+0xd4>
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	3301      	adds	r3, #1
 800505a:	e009      	b.n	8005070 <HAL_I2C_Init+0xe8>
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005062:	fb02 f303 	mul.w	r3, r2, r3
 8005066:	4a69      	ldr	r2, [pc, #420]	@ (800520c <HAL_I2C_Init+0x284>)
 8005068:	fba2 2303 	umull	r2, r3, r2, r3
 800506c:	099b      	lsrs	r3, r3, #6
 800506e:	3301      	adds	r3, #1
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	6812      	ldr	r2, [r2, #0]
 8005074:	430b      	orrs	r3, r1
 8005076:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	69db      	ldr	r3, [r3, #28]
 800507e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005082:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	495c      	ldr	r1, [pc, #368]	@ (80051fc <HAL_I2C_Init+0x274>)
 800508c:	428b      	cmp	r3, r1
 800508e:	d819      	bhi.n	80050c4 <HAL_I2C_Init+0x13c>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	1e59      	subs	r1, r3, #1
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	005b      	lsls	r3, r3, #1
 800509a:	fbb1 f3f3 	udiv	r3, r1, r3
 800509e:	1c59      	adds	r1, r3, #1
 80050a0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80050a4:	400b      	ands	r3, r1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00a      	beq.n	80050c0 <HAL_I2C_Init+0x138>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	1e59      	subs	r1, r3, #1
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	005b      	lsls	r3, r3, #1
 80050b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80050b8:	3301      	adds	r3, #1
 80050ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050be:	e051      	b.n	8005164 <HAL_I2C_Init+0x1dc>
 80050c0:	2304      	movs	r3, #4
 80050c2:	e04f      	b.n	8005164 <HAL_I2C_Init+0x1dc>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d111      	bne.n	80050f0 <HAL_I2C_Init+0x168>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	1e58      	subs	r0, r3, #1
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6859      	ldr	r1, [r3, #4]
 80050d4:	460b      	mov	r3, r1
 80050d6:	005b      	lsls	r3, r3, #1
 80050d8:	440b      	add	r3, r1
 80050da:	fbb0 f3f3 	udiv	r3, r0, r3
 80050de:	3301      	adds	r3, #1
 80050e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	bf0c      	ite	eq
 80050e8:	2301      	moveq	r3, #1
 80050ea:	2300      	movne	r3, #0
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	e012      	b.n	8005116 <HAL_I2C_Init+0x18e>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	1e58      	subs	r0, r3, #1
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6859      	ldr	r1, [r3, #4]
 80050f8:	460b      	mov	r3, r1
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	440b      	add	r3, r1
 80050fe:	0099      	lsls	r1, r3, #2
 8005100:	440b      	add	r3, r1
 8005102:	fbb0 f3f3 	udiv	r3, r0, r3
 8005106:	3301      	adds	r3, #1
 8005108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800510c:	2b00      	cmp	r3, #0
 800510e:	bf0c      	ite	eq
 8005110:	2301      	moveq	r3, #1
 8005112:	2300      	movne	r3, #0
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <HAL_I2C_Init+0x196>
 800511a:	2301      	movs	r3, #1
 800511c:	e022      	b.n	8005164 <HAL_I2C_Init+0x1dc>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10e      	bne.n	8005144 <HAL_I2C_Init+0x1bc>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	1e58      	subs	r0, r3, #1
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6859      	ldr	r1, [r3, #4]
 800512e:	460b      	mov	r3, r1
 8005130:	005b      	lsls	r3, r3, #1
 8005132:	440b      	add	r3, r1
 8005134:	fbb0 f3f3 	udiv	r3, r0, r3
 8005138:	3301      	adds	r3, #1
 800513a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800513e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005142:	e00f      	b.n	8005164 <HAL_I2C_Init+0x1dc>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	1e58      	subs	r0, r3, #1
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6859      	ldr	r1, [r3, #4]
 800514c:	460b      	mov	r3, r1
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	440b      	add	r3, r1
 8005152:	0099      	lsls	r1, r3, #2
 8005154:	440b      	add	r3, r1
 8005156:	fbb0 f3f3 	udiv	r3, r0, r3
 800515a:	3301      	adds	r3, #1
 800515c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005160:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005164:	6879      	ldr	r1, [r7, #4]
 8005166:	6809      	ldr	r1, [r1, #0]
 8005168:	4313      	orrs	r3, r2
 800516a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	69da      	ldr	r2, [r3, #28]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	431a      	orrs	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	430a      	orrs	r2, r1
 8005186:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005192:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	6911      	ldr	r1, [r2, #16]
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	68d2      	ldr	r2, [r2, #12]
 800519e:	4311      	orrs	r1, r2
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	6812      	ldr	r2, [r2, #0]
 80051a4:	430b      	orrs	r3, r1
 80051a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	695a      	ldr	r2, [r3, #20]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	431a      	orrs	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	430a      	orrs	r2, r1
 80051c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f042 0201 	orr.w	r2, r2, #1
 80051d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2220      	movs	r2, #32
 80051de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	000186a0 	.word	0x000186a0
 8005200:	001e847f 	.word	0x001e847f
 8005204:	003d08ff 	.word	0x003d08ff
 8005208:	431bde83 	.word	0x431bde83
 800520c:	10624dd3 	.word	0x10624dd3

08005210 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b086      	sub	sp, #24
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e267      	b.n	80056f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b00      	cmp	r3, #0
 800522c:	d075      	beq.n	800531a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800522e:	4b88      	ldr	r3, [pc, #544]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 030c 	and.w	r3, r3, #12
 8005236:	2b04      	cmp	r3, #4
 8005238:	d00c      	beq.n	8005254 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800523a:	4b85      	ldr	r3, [pc, #532]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005242:	2b08      	cmp	r3, #8
 8005244:	d112      	bne.n	800526c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005246:	4b82      	ldr	r3, [pc, #520]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800524e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005252:	d10b      	bne.n	800526c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005254:	4b7e      	ldr	r3, [pc, #504]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d05b      	beq.n	8005318 <HAL_RCC_OscConfig+0x108>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d157      	bne.n	8005318 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e242      	b.n	80056f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005274:	d106      	bne.n	8005284 <HAL_RCC_OscConfig+0x74>
 8005276:	4b76      	ldr	r3, [pc, #472]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a75      	ldr	r2, [pc, #468]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 800527c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005280:	6013      	str	r3, [r2, #0]
 8005282:	e01d      	b.n	80052c0 <HAL_RCC_OscConfig+0xb0>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800528c:	d10c      	bne.n	80052a8 <HAL_RCC_OscConfig+0x98>
 800528e:	4b70      	ldr	r3, [pc, #448]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a6f      	ldr	r2, [pc, #444]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 8005294:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005298:	6013      	str	r3, [r2, #0]
 800529a:	4b6d      	ldr	r3, [pc, #436]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a6c      	ldr	r2, [pc, #432]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 80052a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052a4:	6013      	str	r3, [r2, #0]
 80052a6:	e00b      	b.n	80052c0 <HAL_RCC_OscConfig+0xb0>
 80052a8:	4b69      	ldr	r3, [pc, #420]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a68      	ldr	r2, [pc, #416]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 80052ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052b2:	6013      	str	r3, [r2, #0]
 80052b4:	4b66      	ldr	r3, [pc, #408]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a65      	ldr	r2, [pc, #404]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 80052ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d013      	beq.n	80052f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052c8:	f7fd ff52 	bl	8003170 <HAL_GetTick>
 80052cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ce:	e008      	b.n	80052e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052d0:	f7fd ff4e 	bl	8003170 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b64      	cmp	r3, #100	@ 0x64
 80052dc:	d901      	bls.n	80052e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e207      	b.n	80056f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052e2:	4b5b      	ldr	r3, [pc, #364]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d0f0      	beq.n	80052d0 <HAL_RCC_OscConfig+0xc0>
 80052ee:	e014      	b.n	800531a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052f0:	f7fd ff3e 	bl	8003170 <HAL_GetTick>
 80052f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052f6:	e008      	b.n	800530a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052f8:	f7fd ff3a 	bl	8003170 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	2b64      	cmp	r3, #100	@ 0x64
 8005304:	d901      	bls.n	800530a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e1f3      	b.n	80056f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800530a:	4b51      	ldr	r3, [pc, #324]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1f0      	bne.n	80052f8 <HAL_RCC_OscConfig+0xe8>
 8005316:	e000      	b.n	800531a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d063      	beq.n	80053ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005326:	4b4a      	ldr	r3, [pc, #296]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f003 030c 	and.w	r3, r3, #12
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00b      	beq.n	800534a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005332:	4b47      	ldr	r3, [pc, #284]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800533a:	2b08      	cmp	r3, #8
 800533c:	d11c      	bne.n	8005378 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800533e:	4b44      	ldr	r3, [pc, #272]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d116      	bne.n	8005378 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800534a:	4b41      	ldr	r3, [pc, #260]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b00      	cmp	r3, #0
 8005354:	d005      	beq.n	8005362 <HAL_RCC_OscConfig+0x152>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d001      	beq.n	8005362 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e1c7      	b.n	80056f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005362:	4b3b      	ldr	r3, [pc, #236]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	00db      	lsls	r3, r3, #3
 8005370:	4937      	ldr	r1, [pc, #220]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 8005372:	4313      	orrs	r3, r2
 8005374:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005376:	e03a      	b.n	80053ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d020      	beq.n	80053c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005380:	4b34      	ldr	r3, [pc, #208]	@ (8005454 <HAL_RCC_OscConfig+0x244>)
 8005382:	2201      	movs	r2, #1
 8005384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005386:	f7fd fef3 	bl	8003170 <HAL_GetTick>
 800538a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800538c:	e008      	b.n	80053a0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800538e:	f7fd feef 	bl	8003170 <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	2b02      	cmp	r3, #2
 800539a:	d901      	bls.n	80053a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e1a8      	b.n	80056f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053a0:	4b2b      	ldr	r3, [pc, #172]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0302 	and.w	r3, r3, #2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d0f0      	beq.n	800538e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ac:	4b28      	ldr	r3, [pc, #160]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	00db      	lsls	r3, r3, #3
 80053ba:	4925      	ldr	r1, [pc, #148]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	600b      	str	r3, [r1, #0]
 80053c0:	e015      	b.n	80053ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053c2:	4b24      	ldr	r3, [pc, #144]	@ (8005454 <HAL_RCC_OscConfig+0x244>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c8:	f7fd fed2 	bl	8003170 <HAL_GetTick>
 80053cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053ce:	e008      	b.n	80053e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053d0:	f7fd fece 	bl	8003170 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e187      	b.n	80056f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053e2:	4b1b      	ldr	r3, [pc, #108]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1f0      	bne.n	80053d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0308 	and.w	r3, r3, #8
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d036      	beq.n	8005468 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d016      	beq.n	8005430 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005402:	4b15      	ldr	r3, [pc, #84]	@ (8005458 <HAL_RCC_OscConfig+0x248>)
 8005404:	2201      	movs	r2, #1
 8005406:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005408:	f7fd feb2 	bl	8003170 <HAL_GetTick>
 800540c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800540e:	e008      	b.n	8005422 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005410:	f7fd feae 	bl	8003170 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	2b02      	cmp	r3, #2
 800541c:	d901      	bls.n	8005422 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e167      	b.n	80056f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005422:	4b0b      	ldr	r3, [pc, #44]	@ (8005450 <HAL_RCC_OscConfig+0x240>)
 8005424:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d0f0      	beq.n	8005410 <HAL_RCC_OscConfig+0x200>
 800542e:	e01b      	b.n	8005468 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005430:	4b09      	ldr	r3, [pc, #36]	@ (8005458 <HAL_RCC_OscConfig+0x248>)
 8005432:	2200      	movs	r2, #0
 8005434:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005436:	f7fd fe9b 	bl	8003170 <HAL_GetTick>
 800543a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800543c:	e00e      	b.n	800545c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800543e:	f7fd fe97 	bl	8003170 <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	2b02      	cmp	r3, #2
 800544a:	d907      	bls.n	800545c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e150      	b.n	80056f2 <HAL_RCC_OscConfig+0x4e2>
 8005450:	40023800 	.word	0x40023800
 8005454:	42470000 	.word	0x42470000
 8005458:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800545c:	4b88      	ldr	r3, [pc, #544]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 800545e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005460:	f003 0302 	and.w	r3, r3, #2
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1ea      	bne.n	800543e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	2b00      	cmp	r3, #0
 8005472:	f000 8097 	beq.w	80055a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005476:	2300      	movs	r3, #0
 8005478:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800547a:	4b81      	ldr	r3, [pc, #516]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 800547c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800547e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10f      	bne.n	80054a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005486:	2300      	movs	r3, #0
 8005488:	60bb      	str	r3, [r7, #8]
 800548a:	4b7d      	ldr	r3, [pc, #500]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 800548c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800548e:	4a7c      	ldr	r2, [pc, #496]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 8005490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005494:	6413      	str	r3, [r2, #64]	@ 0x40
 8005496:	4b7a      	ldr	r3, [pc, #488]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 8005498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800549a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800549e:	60bb      	str	r3, [r7, #8]
 80054a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054a2:	2301      	movs	r3, #1
 80054a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054a6:	4b77      	ldr	r3, [pc, #476]	@ (8005684 <HAL_RCC_OscConfig+0x474>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d118      	bne.n	80054e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054b2:	4b74      	ldr	r3, [pc, #464]	@ (8005684 <HAL_RCC_OscConfig+0x474>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a73      	ldr	r2, [pc, #460]	@ (8005684 <HAL_RCC_OscConfig+0x474>)
 80054b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054be:	f7fd fe57 	bl	8003170 <HAL_GetTick>
 80054c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054c4:	e008      	b.n	80054d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054c6:	f7fd fe53 	bl	8003170 <HAL_GetTick>
 80054ca:	4602      	mov	r2, r0
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d901      	bls.n	80054d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e10c      	b.n	80056f2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054d8:	4b6a      	ldr	r3, [pc, #424]	@ (8005684 <HAL_RCC_OscConfig+0x474>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d0f0      	beq.n	80054c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d106      	bne.n	80054fa <HAL_RCC_OscConfig+0x2ea>
 80054ec:	4b64      	ldr	r3, [pc, #400]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 80054ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054f0:	4a63      	ldr	r2, [pc, #396]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 80054f2:	f043 0301 	orr.w	r3, r3, #1
 80054f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80054f8:	e01c      	b.n	8005534 <HAL_RCC_OscConfig+0x324>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	2b05      	cmp	r3, #5
 8005500:	d10c      	bne.n	800551c <HAL_RCC_OscConfig+0x30c>
 8005502:	4b5f      	ldr	r3, [pc, #380]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 8005504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005506:	4a5e      	ldr	r2, [pc, #376]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 8005508:	f043 0304 	orr.w	r3, r3, #4
 800550c:	6713      	str	r3, [r2, #112]	@ 0x70
 800550e:	4b5c      	ldr	r3, [pc, #368]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 8005510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005512:	4a5b      	ldr	r2, [pc, #364]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 8005514:	f043 0301 	orr.w	r3, r3, #1
 8005518:	6713      	str	r3, [r2, #112]	@ 0x70
 800551a:	e00b      	b.n	8005534 <HAL_RCC_OscConfig+0x324>
 800551c:	4b58      	ldr	r3, [pc, #352]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 800551e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005520:	4a57      	ldr	r2, [pc, #348]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 8005522:	f023 0301 	bic.w	r3, r3, #1
 8005526:	6713      	str	r3, [r2, #112]	@ 0x70
 8005528:	4b55      	ldr	r3, [pc, #340]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 800552a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800552c:	4a54      	ldr	r2, [pc, #336]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 800552e:	f023 0304 	bic.w	r3, r3, #4
 8005532:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d015      	beq.n	8005568 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800553c:	f7fd fe18 	bl	8003170 <HAL_GetTick>
 8005540:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005542:	e00a      	b.n	800555a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005544:	f7fd fe14 	bl	8003170 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005552:	4293      	cmp	r3, r2
 8005554:	d901      	bls.n	800555a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e0cb      	b.n	80056f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800555a:	4b49      	ldr	r3, [pc, #292]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 800555c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800555e:	f003 0302 	and.w	r3, r3, #2
 8005562:	2b00      	cmp	r3, #0
 8005564:	d0ee      	beq.n	8005544 <HAL_RCC_OscConfig+0x334>
 8005566:	e014      	b.n	8005592 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005568:	f7fd fe02 	bl	8003170 <HAL_GetTick>
 800556c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800556e:	e00a      	b.n	8005586 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005570:	f7fd fdfe 	bl	8003170 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800557e:	4293      	cmp	r3, r2
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e0b5      	b.n	80056f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005586:	4b3e      	ldr	r3, [pc, #248]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 8005588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1ee      	bne.n	8005570 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005592:	7dfb      	ldrb	r3, [r7, #23]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d105      	bne.n	80055a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005598:	4b39      	ldr	r3, [pc, #228]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 800559a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800559c:	4a38      	ldr	r2, [pc, #224]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 800559e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f000 80a1 	beq.w	80056f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055ae:	4b34      	ldr	r3, [pc, #208]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f003 030c 	and.w	r3, r3, #12
 80055b6:	2b08      	cmp	r3, #8
 80055b8:	d05c      	beq.n	8005674 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d141      	bne.n	8005646 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055c2:	4b31      	ldr	r3, [pc, #196]	@ (8005688 <HAL_RCC_OscConfig+0x478>)
 80055c4:	2200      	movs	r2, #0
 80055c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055c8:	f7fd fdd2 	bl	8003170 <HAL_GetTick>
 80055cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ce:	e008      	b.n	80055e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055d0:	f7fd fdce 	bl	8003170 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e087      	b.n	80056f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055e2:	4b27      	ldr	r3, [pc, #156]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1f0      	bne.n	80055d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	69da      	ldr	r2, [r3, #28]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	431a      	orrs	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055fc:	019b      	lsls	r3, r3, #6
 80055fe:	431a      	orrs	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005604:	085b      	lsrs	r3, r3, #1
 8005606:	3b01      	subs	r3, #1
 8005608:	041b      	lsls	r3, r3, #16
 800560a:	431a      	orrs	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005610:	061b      	lsls	r3, r3, #24
 8005612:	491b      	ldr	r1, [pc, #108]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 8005614:	4313      	orrs	r3, r2
 8005616:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005618:	4b1b      	ldr	r3, [pc, #108]	@ (8005688 <HAL_RCC_OscConfig+0x478>)
 800561a:	2201      	movs	r2, #1
 800561c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800561e:	f7fd fda7 	bl	8003170 <HAL_GetTick>
 8005622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005624:	e008      	b.n	8005638 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005626:	f7fd fda3 	bl	8003170 <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	2b02      	cmp	r3, #2
 8005632:	d901      	bls.n	8005638 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e05c      	b.n	80056f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005638:	4b11      	ldr	r3, [pc, #68]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d0f0      	beq.n	8005626 <HAL_RCC_OscConfig+0x416>
 8005644:	e054      	b.n	80056f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005646:	4b10      	ldr	r3, [pc, #64]	@ (8005688 <HAL_RCC_OscConfig+0x478>)
 8005648:	2200      	movs	r2, #0
 800564a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800564c:	f7fd fd90 	bl	8003170 <HAL_GetTick>
 8005650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005652:	e008      	b.n	8005666 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005654:	f7fd fd8c 	bl	8003170 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	2b02      	cmp	r3, #2
 8005660:	d901      	bls.n	8005666 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e045      	b.n	80056f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005666:	4b06      	ldr	r3, [pc, #24]	@ (8005680 <HAL_RCC_OscConfig+0x470>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1f0      	bne.n	8005654 <HAL_RCC_OscConfig+0x444>
 8005672:	e03d      	b.n	80056f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d107      	bne.n	800568c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e038      	b.n	80056f2 <HAL_RCC_OscConfig+0x4e2>
 8005680:	40023800 	.word	0x40023800
 8005684:	40007000 	.word	0x40007000
 8005688:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800568c:	4b1b      	ldr	r3, [pc, #108]	@ (80056fc <HAL_RCC_OscConfig+0x4ec>)
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d028      	beq.n	80056ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d121      	bne.n	80056ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d11a      	bne.n	80056ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80056bc:	4013      	ands	r3, r2
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80056c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d111      	bne.n	80056ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d2:	085b      	lsrs	r3, r3, #1
 80056d4:	3b01      	subs	r3, #1
 80056d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056d8:	429a      	cmp	r2, r3
 80056da:	d107      	bne.n	80056ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d001      	beq.n	80056f0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e000      	b.n	80056f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3718      	adds	r7, #24
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	40023800 	.word	0x40023800

08005700 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d101      	bne.n	8005714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e0cc      	b.n	80058ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005714:	4b68      	ldr	r3, [pc, #416]	@ (80058b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0307 	and.w	r3, r3, #7
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	429a      	cmp	r2, r3
 8005720:	d90c      	bls.n	800573c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005722:	4b65      	ldr	r3, [pc, #404]	@ (80058b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	b2d2      	uxtb	r2, r2
 8005728:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800572a:	4b63      	ldr	r3, [pc, #396]	@ (80058b8 <HAL_RCC_ClockConfig+0x1b8>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0307 	and.w	r3, r3, #7
 8005732:	683a      	ldr	r2, [r7, #0]
 8005734:	429a      	cmp	r2, r3
 8005736:	d001      	beq.n	800573c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e0b8      	b.n	80058ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0302 	and.w	r3, r3, #2
 8005744:	2b00      	cmp	r3, #0
 8005746:	d020      	beq.n	800578a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0304 	and.w	r3, r3, #4
 8005750:	2b00      	cmp	r3, #0
 8005752:	d005      	beq.n	8005760 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005754:	4b59      	ldr	r3, [pc, #356]	@ (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	4a58      	ldr	r2, [pc, #352]	@ (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 800575a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800575e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0308 	and.w	r3, r3, #8
 8005768:	2b00      	cmp	r3, #0
 800576a:	d005      	beq.n	8005778 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800576c:	4b53      	ldr	r3, [pc, #332]	@ (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	4a52      	ldr	r2, [pc, #328]	@ (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 8005772:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005776:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005778:	4b50      	ldr	r3, [pc, #320]	@ (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	494d      	ldr	r1, [pc, #308]	@ (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 8005786:	4313      	orrs	r3, r2
 8005788:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0301 	and.w	r3, r3, #1
 8005792:	2b00      	cmp	r3, #0
 8005794:	d044      	beq.n	8005820 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d107      	bne.n	80057ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800579e:	4b47      	ldr	r3, [pc, #284]	@ (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d119      	bne.n	80057de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e07f      	b.n	80058ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d003      	beq.n	80057be <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057ba:	2b03      	cmp	r3, #3
 80057bc:	d107      	bne.n	80057ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057be:	4b3f      	ldr	r3, [pc, #252]	@ (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d109      	bne.n	80057de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e06f      	b.n	80058ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057ce:	4b3b      	ldr	r3, [pc, #236]	@ (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e067      	b.n	80058ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057de:	4b37      	ldr	r3, [pc, #220]	@ (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	f023 0203 	bic.w	r2, r3, #3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	4934      	ldr	r1, [pc, #208]	@ (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057f0:	f7fd fcbe 	bl	8003170 <HAL_GetTick>
 80057f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057f6:	e00a      	b.n	800580e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057f8:	f7fd fcba 	bl	8003170 <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005806:	4293      	cmp	r3, r2
 8005808:	d901      	bls.n	800580e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e04f      	b.n	80058ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800580e:	4b2b      	ldr	r3, [pc, #172]	@ (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f003 020c 	and.w	r2, r3, #12
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	429a      	cmp	r2, r3
 800581e:	d1eb      	bne.n	80057f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005820:	4b25      	ldr	r3, [pc, #148]	@ (80058b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0307 	and.w	r3, r3, #7
 8005828:	683a      	ldr	r2, [r7, #0]
 800582a:	429a      	cmp	r2, r3
 800582c:	d20c      	bcs.n	8005848 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800582e:	4b22      	ldr	r3, [pc, #136]	@ (80058b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005830:	683a      	ldr	r2, [r7, #0]
 8005832:	b2d2      	uxtb	r2, r2
 8005834:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005836:	4b20      	ldr	r3, [pc, #128]	@ (80058b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0307 	and.w	r3, r3, #7
 800583e:	683a      	ldr	r2, [r7, #0]
 8005840:	429a      	cmp	r2, r3
 8005842:	d001      	beq.n	8005848 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e032      	b.n	80058ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0304 	and.w	r3, r3, #4
 8005850:	2b00      	cmp	r3, #0
 8005852:	d008      	beq.n	8005866 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005854:	4b19      	ldr	r3, [pc, #100]	@ (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	4916      	ldr	r1, [pc, #88]	@ (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 8005862:	4313      	orrs	r3, r2
 8005864:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0308 	and.w	r3, r3, #8
 800586e:	2b00      	cmp	r3, #0
 8005870:	d009      	beq.n	8005886 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005872:	4b12      	ldr	r3, [pc, #72]	@ (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	00db      	lsls	r3, r3, #3
 8005880:	490e      	ldr	r1, [pc, #56]	@ (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 8005882:	4313      	orrs	r3, r2
 8005884:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005886:	f000 f821 	bl	80058cc <HAL_RCC_GetSysClockFreq>
 800588a:	4602      	mov	r2, r0
 800588c:	4b0b      	ldr	r3, [pc, #44]	@ (80058bc <HAL_RCC_ClockConfig+0x1bc>)
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	091b      	lsrs	r3, r3, #4
 8005892:	f003 030f 	and.w	r3, r3, #15
 8005896:	490a      	ldr	r1, [pc, #40]	@ (80058c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005898:	5ccb      	ldrb	r3, [r1, r3]
 800589a:	fa22 f303 	lsr.w	r3, r2, r3
 800589e:	4a09      	ldr	r2, [pc, #36]	@ (80058c4 <HAL_RCC_ClockConfig+0x1c4>)
 80058a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80058a2:	4b09      	ldr	r3, [pc, #36]	@ (80058c8 <HAL_RCC_ClockConfig+0x1c8>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7fd fc1e 	bl	80030e8 <HAL_InitTick>

  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	40023c00 	.word	0x40023c00
 80058bc:	40023800 	.word	0x40023800
 80058c0:	08007c40 	.word	0x08007c40
 80058c4:	200004dc 	.word	0x200004dc
 80058c8:	20000584 	.word	0x20000584

080058cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058d0:	b090      	sub	sp, #64	@ 0x40
 80058d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80058d4:	2300      	movs	r3, #0
 80058d6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80058d8:	2300      	movs	r3, #0
 80058da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80058dc:	2300      	movs	r3, #0
 80058de:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80058e0:	2300      	movs	r3, #0
 80058e2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058e4:	4b59      	ldr	r3, [pc, #356]	@ (8005a4c <HAL_RCC_GetSysClockFreq+0x180>)
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f003 030c 	and.w	r3, r3, #12
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	d00d      	beq.n	800590c <HAL_RCC_GetSysClockFreq+0x40>
 80058f0:	2b08      	cmp	r3, #8
 80058f2:	f200 80a1 	bhi.w	8005a38 <HAL_RCC_GetSysClockFreq+0x16c>
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d002      	beq.n	8005900 <HAL_RCC_GetSysClockFreq+0x34>
 80058fa:	2b04      	cmp	r3, #4
 80058fc:	d003      	beq.n	8005906 <HAL_RCC_GetSysClockFreq+0x3a>
 80058fe:	e09b      	b.n	8005a38 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005900:	4b53      	ldr	r3, [pc, #332]	@ (8005a50 <HAL_RCC_GetSysClockFreq+0x184>)
 8005902:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005904:	e09b      	b.n	8005a3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005906:	4b53      	ldr	r3, [pc, #332]	@ (8005a54 <HAL_RCC_GetSysClockFreq+0x188>)
 8005908:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800590a:	e098      	b.n	8005a3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800590c:	4b4f      	ldr	r3, [pc, #316]	@ (8005a4c <HAL_RCC_GetSysClockFreq+0x180>)
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005914:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005916:	4b4d      	ldr	r3, [pc, #308]	@ (8005a4c <HAL_RCC_GetSysClockFreq+0x180>)
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d028      	beq.n	8005974 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005922:	4b4a      	ldr	r3, [pc, #296]	@ (8005a4c <HAL_RCC_GetSysClockFreq+0x180>)
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	099b      	lsrs	r3, r3, #6
 8005928:	2200      	movs	r2, #0
 800592a:	623b      	str	r3, [r7, #32]
 800592c:	627a      	str	r2, [r7, #36]	@ 0x24
 800592e:	6a3b      	ldr	r3, [r7, #32]
 8005930:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005934:	2100      	movs	r1, #0
 8005936:	4b47      	ldr	r3, [pc, #284]	@ (8005a54 <HAL_RCC_GetSysClockFreq+0x188>)
 8005938:	fb03 f201 	mul.w	r2, r3, r1
 800593c:	2300      	movs	r3, #0
 800593e:	fb00 f303 	mul.w	r3, r0, r3
 8005942:	4413      	add	r3, r2
 8005944:	4a43      	ldr	r2, [pc, #268]	@ (8005a54 <HAL_RCC_GetSysClockFreq+0x188>)
 8005946:	fba0 1202 	umull	r1, r2, r0, r2
 800594a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800594c:	460a      	mov	r2, r1
 800594e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005950:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005952:	4413      	add	r3, r2
 8005954:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005958:	2200      	movs	r2, #0
 800595a:	61bb      	str	r3, [r7, #24]
 800595c:	61fa      	str	r2, [r7, #28]
 800595e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005962:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005966:	f7fa fe73 	bl	8000650 <__aeabi_uldivmod>
 800596a:	4602      	mov	r2, r0
 800596c:	460b      	mov	r3, r1
 800596e:	4613      	mov	r3, r2
 8005970:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005972:	e053      	b.n	8005a1c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005974:	4b35      	ldr	r3, [pc, #212]	@ (8005a4c <HAL_RCC_GetSysClockFreq+0x180>)
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	099b      	lsrs	r3, r3, #6
 800597a:	2200      	movs	r2, #0
 800597c:	613b      	str	r3, [r7, #16]
 800597e:	617a      	str	r2, [r7, #20]
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005986:	f04f 0b00 	mov.w	fp, #0
 800598a:	4652      	mov	r2, sl
 800598c:	465b      	mov	r3, fp
 800598e:	f04f 0000 	mov.w	r0, #0
 8005992:	f04f 0100 	mov.w	r1, #0
 8005996:	0159      	lsls	r1, r3, #5
 8005998:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800599c:	0150      	lsls	r0, r2, #5
 800599e:	4602      	mov	r2, r0
 80059a0:	460b      	mov	r3, r1
 80059a2:	ebb2 080a 	subs.w	r8, r2, sl
 80059a6:	eb63 090b 	sbc.w	r9, r3, fp
 80059aa:	f04f 0200 	mov.w	r2, #0
 80059ae:	f04f 0300 	mov.w	r3, #0
 80059b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80059b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80059ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80059be:	ebb2 0408 	subs.w	r4, r2, r8
 80059c2:	eb63 0509 	sbc.w	r5, r3, r9
 80059c6:	f04f 0200 	mov.w	r2, #0
 80059ca:	f04f 0300 	mov.w	r3, #0
 80059ce:	00eb      	lsls	r3, r5, #3
 80059d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059d4:	00e2      	lsls	r2, r4, #3
 80059d6:	4614      	mov	r4, r2
 80059d8:	461d      	mov	r5, r3
 80059da:	eb14 030a 	adds.w	r3, r4, sl
 80059de:	603b      	str	r3, [r7, #0]
 80059e0:	eb45 030b 	adc.w	r3, r5, fp
 80059e4:	607b      	str	r3, [r7, #4]
 80059e6:	f04f 0200 	mov.w	r2, #0
 80059ea:	f04f 0300 	mov.w	r3, #0
 80059ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80059f2:	4629      	mov	r1, r5
 80059f4:	028b      	lsls	r3, r1, #10
 80059f6:	4621      	mov	r1, r4
 80059f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80059fc:	4621      	mov	r1, r4
 80059fe:	028a      	lsls	r2, r1, #10
 8005a00:	4610      	mov	r0, r2
 8005a02:	4619      	mov	r1, r3
 8005a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a06:	2200      	movs	r2, #0
 8005a08:	60bb      	str	r3, [r7, #8]
 8005a0a:	60fa      	str	r2, [r7, #12]
 8005a0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a10:	f7fa fe1e 	bl	8000650 <__aeabi_uldivmod>
 8005a14:	4602      	mov	r2, r0
 8005a16:	460b      	mov	r3, r1
 8005a18:	4613      	mov	r3, r2
 8005a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8005a4c <HAL_RCC_GetSysClockFreq+0x180>)
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	0c1b      	lsrs	r3, r3, #16
 8005a22:	f003 0303 	and.w	r3, r3, #3
 8005a26:	3301      	adds	r3, #1
 8005a28:	005b      	lsls	r3, r3, #1
 8005a2a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005a2c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a34:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005a36:	e002      	b.n	8005a3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a38:	4b05      	ldr	r3, [pc, #20]	@ (8005a50 <HAL_RCC_GetSysClockFreq+0x184>)
 8005a3a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005a3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3740      	adds	r7, #64	@ 0x40
 8005a44:	46bd      	mov	sp, r7
 8005a46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a4a:	bf00      	nop
 8005a4c:	40023800 	.word	0x40023800
 8005a50:	00f42400 	.word	0x00f42400
 8005a54:	017d7840 	.word	0x017d7840

08005a58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a5c:	4b03      	ldr	r3, [pc, #12]	@ (8005a6c <HAL_RCC_GetHCLKFreq+0x14>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	200004dc 	.word	0x200004dc

08005a70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a74:	f7ff fff0 	bl	8005a58 <HAL_RCC_GetHCLKFreq>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	4b05      	ldr	r3, [pc, #20]	@ (8005a90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	0a9b      	lsrs	r3, r3, #10
 8005a80:	f003 0307 	and.w	r3, r3, #7
 8005a84:	4903      	ldr	r1, [pc, #12]	@ (8005a94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a86:	5ccb      	ldrb	r3, [r1, r3]
 8005a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	40023800 	.word	0x40023800
 8005a94:	08007c50 	.word	0x08007c50

08005a98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e041      	b.n	8005b2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d106      	bne.n	8005ac4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7fc fa80 	bl	8001fc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	3304      	adds	r3, #4
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	4610      	mov	r0, r2
 8005ad8:	f000 fea4 	bl	8006824 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3708      	adds	r7, #8
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
	...

08005b38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d001      	beq.n	8005b50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e04e      	b.n	8005bee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2202      	movs	r2, #2
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68da      	ldr	r2, [r3, #12]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f042 0201 	orr.w	r2, r2, #1
 8005b66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a23      	ldr	r2, [pc, #140]	@ (8005bfc <HAL_TIM_Base_Start_IT+0xc4>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d022      	beq.n	8005bb8 <HAL_TIM_Base_Start_IT+0x80>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b7a:	d01d      	beq.n	8005bb8 <HAL_TIM_Base_Start_IT+0x80>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a1f      	ldr	r2, [pc, #124]	@ (8005c00 <HAL_TIM_Base_Start_IT+0xc8>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d018      	beq.n	8005bb8 <HAL_TIM_Base_Start_IT+0x80>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a1e      	ldr	r2, [pc, #120]	@ (8005c04 <HAL_TIM_Base_Start_IT+0xcc>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d013      	beq.n	8005bb8 <HAL_TIM_Base_Start_IT+0x80>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a1c      	ldr	r2, [pc, #112]	@ (8005c08 <HAL_TIM_Base_Start_IT+0xd0>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d00e      	beq.n	8005bb8 <HAL_TIM_Base_Start_IT+0x80>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a1b      	ldr	r2, [pc, #108]	@ (8005c0c <HAL_TIM_Base_Start_IT+0xd4>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d009      	beq.n	8005bb8 <HAL_TIM_Base_Start_IT+0x80>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a19      	ldr	r2, [pc, #100]	@ (8005c10 <HAL_TIM_Base_Start_IT+0xd8>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d004      	beq.n	8005bb8 <HAL_TIM_Base_Start_IT+0x80>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a18      	ldr	r2, [pc, #96]	@ (8005c14 <HAL_TIM_Base_Start_IT+0xdc>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d111      	bne.n	8005bdc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f003 0307 	and.w	r3, r3, #7
 8005bc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2b06      	cmp	r3, #6
 8005bc8:	d010      	beq.n	8005bec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f042 0201 	orr.w	r2, r2, #1
 8005bd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bda:	e007      	b.n	8005bec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f042 0201 	orr.w	r2, r2, #1
 8005bea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3714      	adds	r7, #20
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	40010000 	.word	0x40010000
 8005c00:	40000400 	.word	0x40000400
 8005c04:	40000800 	.word	0x40000800
 8005c08:	40000c00 	.word	0x40000c00
 8005c0c:	40010400 	.word	0x40010400
 8005c10:	40014000 	.word	0x40014000
 8005c14:	40001800 	.word	0x40001800

08005c18 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68da      	ldr	r2, [r3, #12]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f022 0201 	bic.w	r2, r2, #1
 8005c2e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	6a1a      	ldr	r2, [r3, #32]
 8005c36:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d10f      	bne.n	8005c60 <HAL_TIM_Base_Stop_IT+0x48>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	6a1a      	ldr	r2, [r3, #32]
 8005c46:	f240 4344 	movw	r3, #1092	@ 0x444
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d107      	bne.n	8005c60 <HAL_TIM_Base_Stop_IT+0x48>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f022 0201 	bic.w	r2, r2, #1
 8005c5e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr

08005c76 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b082      	sub	sp, #8
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d101      	bne.n	8005c88 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e041      	b.n	8005d0c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d106      	bne.n	8005ca2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f7fc fa2b 	bl	80020f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2202      	movs	r2, #2
 8005ca6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	3304      	adds	r3, #4
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	4610      	mov	r0, r2
 8005cb6:	f000 fdb5 	bl	8006824 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3708      	adds	r7, #8
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d109      	bne.n	8005d38 <HAL_TIM_PWM_Start+0x24>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	bf14      	ite	ne
 8005d30:	2301      	movne	r3, #1
 8005d32:	2300      	moveq	r3, #0
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	e022      	b.n	8005d7e <HAL_TIM_PWM_Start+0x6a>
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	2b04      	cmp	r3, #4
 8005d3c:	d109      	bne.n	8005d52 <HAL_TIM_PWM_Start+0x3e>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	bf14      	ite	ne
 8005d4a:	2301      	movne	r3, #1
 8005d4c:	2300      	moveq	r3, #0
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	e015      	b.n	8005d7e <HAL_TIM_PWM_Start+0x6a>
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	2b08      	cmp	r3, #8
 8005d56:	d109      	bne.n	8005d6c <HAL_TIM_PWM_Start+0x58>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	bf14      	ite	ne
 8005d64:	2301      	movne	r3, #1
 8005d66:	2300      	moveq	r3, #0
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	e008      	b.n	8005d7e <HAL_TIM_PWM_Start+0x6a>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	bf14      	ite	ne
 8005d78:	2301      	movne	r3, #1
 8005d7a:	2300      	moveq	r3, #0
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d001      	beq.n	8005d86 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e07c      	b.n	8005e80 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d104      	bne.n	8005d96 <HAL_TIM_PWM_Start+0x82>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2202      	movs	r2, #2
 8005d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d94:	e013      	b.n	8005dbe <HAL_TIM_PWM_Start+0xaa>
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	2b04      	cmp	r3, #4
 8005d9a:	d104      	bne.n	8005da6 <HAL_TIM_PWM_Start+0x92>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2202      	movs	r2, #2
 8005da0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005da4:	e00b      	b.n	8005dbe <HAL_TIM_PWM_Start+0xaa>
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	2b08      	cmp	r3, #8
 8005daa:	d104      	bne.n	8005db6 <HAL_TIM_PWM_Start+0xa2>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2202      	movs	r2, #2
 8005db0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005db4:	e003      	b.n	8005dbe <HAL_TIM_PWM_Start+0xaa>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2202      	movs	r2, #2
 8005dba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	6839      	ldr	r1, [r7, #0]
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f001 f94c 	bl	8007064 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a2d      	ldr	r2, [pc, #180]	@ (8005e88 <HAL_TIM_PWM_Start+0x174>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d004      	beq.n	8005de0 <HAL_TIM_PWM_Start+0xcc>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a2c      	ldr	r2, [pc, #176]	@ (8005e8c <HAL_TIM_PWM_Start+0x178>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d101      	bne.n	8005de4 <HAL_TIM_PWM_Start+0xd0>
 8005de0:	2301      	movs	r3, #1
 8005de2:	e000      	b.n	8005de6 <HAL_TIM_PWM_Start+0xd2>
 8005de4:	2300      	movs	r3, #0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d007      	beq.n	8005dfa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005df8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a22      	ldr	r2, [pc, #136]	@ (8005e88 <HAL_TIM_PWM_Start+0x174>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d022      	beq.n	8005e4a <HAL_TIM_PWM_Start+0x136>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e0c:	d01d      	beq.n	8005e4a <HAL_TIM_PWM_Start+0x136>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a1f      	ldr	r2, [pc, #124]	@ (8005e90 <HAL_TIM_PWM_Start+0x17c>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d018      	beq.n	8005e4a <HAL_TIM_PWM_Start+0x136>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a1d      	ldr	r2, [pc, #116]	@ (8005e94 <HAL_TIM_PWM_Start+0x180>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d013      	beq.n	8005e4a <HAL_TIM_PWM_Start+0x136>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a1c      	ldr	r2, [pc, #112]	@ (8005e98 <HAL_TIM_PWM_Start+0x184>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d00e      	beq.n	8005e4a <HAL_TIM_PWM_Start+0x136>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a16      	ldr	r2, [pc, #88]	@ (8005e8c <HAL_TIM_PWM_Start+0x178>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d009      	beq.n	8005e4a <HAL_TIM_PWM_Start+0x136>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a18      	ldr	r2, [pc, #96]	@ (8005e9c <HAL_TIM_PWM_Start+0x188>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d004      	beq.n	8005e4a <HAL_TIM_PWM_Start+0x136>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a16      	ldr	r2, [pc, #88]	@ (8005ea0 <HAL_TIM_PWM_Start+0x18c>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d111      	bne.n	8005e6e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f003 0307 	and.w	r3, r3, #7
 8005e54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2b06      	cmp	r3, #6
 8005e5a:	d010      	beq.n	8005e7e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f042 0201 	orr.w	r2, r2, #1
 8005e6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e6c:	e007      	b.n	8005e7e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f042 0201 	orr.w	r2, r2, #1
 8005e7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	40010000 	.word	0x40010000
 8005e8c:	40010400 	.word	0x40010400
 8005e90:	40000400 	.word	0x40000400
 8005e94:	40000800 	.word	0x40000800
 8005e98:	40000c00 	.word	0x40000c00
 8005e9c:	40014000 	.word	0x40014000
 8005ea0:	40001800 	.word	0x40001800

08005ea4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d101      	bne.n	8005eb6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e041      	b.n	8005f3a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d106      	bne.n	8005ed0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f839 	bl	8005f42 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	3304      	adds	r3, #4
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	4610      	mov	r0, r2
 8005ee4:	f000 fc9e 	bl	8006824 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3708      	adds	r7, #8
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005f42:	b480      	push	{r7}
 8005f44:	b083      	sub	sp, #12
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005f4a:	bf00      	nop
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
	...

08005f58 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f62:	2300      	movs	r3, #0
 8005f64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d104      	bne.n	8005f76 <HAL_TIM_IC_Start_IT+0x1e>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	e013      	b.n	8005f9e <HAL_TIM_IC_Start_IT+0x46>
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	2b04      	cmp	r3, #4
 8005f7a:	d104      	bne.n	8005f86 <HAL_TIM_IC_Start_IT+0x2e>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	e00b      	b.n	8005f9e <HAL_TIM_IC_Start_IT+0x46>
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	2b08      	cmp	r3, #8
 8005f8a:	d104      	bne.n	8005f96 <HAL_TIM_IC_Start_IT+0x3e>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	e003      	b.n	8005f9e <HAL_TIM_IC_Start_IT+0x46>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d104      	bne.n	8005fb0 <HAL_TIM_IC_Start_IT+0x58>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	e013      	b.n	8005fd8 <HAL_TIM_IC_Start_IT+0x80>
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	2b04      	cmp	r3, #4
 8005fb4:	d104      	bne.n	8005fc0 <HAL_TIM_IC_Start_IT+0x68>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	e00b      	b.n	8005fd8 <HAL_TIM_IC_Start_IT+0x80>
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	2b08      	cmp	r3, #8
 8005fc4:	d104      	bne.n	8005fd0 <HAL_TIM_IC_Start_IT+0x78>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	e003      	b.n	8005fd8 <HAL_TIM_IC_Start_IT+0x80>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fda:	7bbb      	ldrb	r3, [r7, #14]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d102      	bne.n	8005fe6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005fe0:	7b7b      	ldrb	r3, [r7, #13]
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d001      	beq.n	8005fea <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e0cc      	b.n	8006184 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d104      	bne.n	8005ffa <HAL_TIM_IC_Start_IT+0xa2>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ff8:	e013      	b.n	8006022 <HAL_TIM_IC_Start_IT+0xca>
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	2b04      	cmp	r3, #4
 8005ffe:	d104      	bne.n	800600a <HAL_TIM_IC_Start_IT+0xb2>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2202      	movs	r2, #2
 8006004:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006008:	e00b      	b.n	8006022 <HAL_TIM_IC_Start_IT+0xca>
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	2b08      	cmp	r3, #8
 800600e:	d104      	bne.n	800601a <HAL_TIM_IC_Start_IT+0xc2>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2202      	movs	r2, #2
 8006014:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006018:	e003      	b.n	8006022 <HAL_TIM_IC_Start_IT+0xca>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2202      	movs	r2, #2
 800601e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d104      	bne.n	8006032 <HAL_TIM_IC_Start_IT+0xda>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2202      	movs	r2, #2
 800602c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006030:	e013      	b.n	800605a <HAL_TIM_IC_Start_IT+0x102>
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	2b04      	cmp	r3, #4
 8006036:	d104      	bne.n	8006042 <HAL_TIM_IC_Start_IT+0xea>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2202      	movs	r2, #2
 800603c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006040:	e00b      	b.n	800605a <HAL_TIM_IC_Start_IT+0x102>
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	2b08      	cmp	r3, #8
 8006046:	d104      	bne.n	8006052 <HAL_TIM_IC_Start_IT+0xfa>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2202      	movs	r2, #2
 800604c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006050:	e003      	b.n	800605a <HAL_TIM_IC_Start_IT+0x102>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2202      	movs	r2, #2
 8006056:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	2b0c      	cmp	r3, #12
 800605e:	d841      	bhi.n	80060e4 <HAL_TIM_IC_Start_IT+0x18c>
 8006060:	a201      	add	r2, pc, #4	@ (adr r2, 8006068 <HAL_TIM_IC_Start_IT+0x110>)
 8006062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006066:	bf00      	nop
 8006068:	0800609d 	.word	0x0800609d
 800606c:	080060e5 	.word	0x080060e5
 8006070:	080060e5 	.word	0x080060e5
 8006074:	080060e5 	.word	0x080060e5
 8006078:	080060af 	.word	0x080060af
 800607c:	080060e5 	.word	0x080060e5
 8006080:	080060e5 	.word	0x080060e5
 8006084:	080060e5 	.word	0x080060e5
 8006088:	080060c1 	.word	0x080060c1
 800608c:	080060e5 	.word	0x080060e5
 8006090:	080060e5 	.word	0x080060e5
 8006094:	080060e5 	.word	0x080060e5
 8006098:	080060d3 	.word	0x080060d3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68da      	ldr	r2, [r3, #12]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f042 0202 	orr.w	r2, r2, #2
 80060aa:	60da      	str	r2, [r3, #12]
      break;
 80060ac:	e01d      	b.n	80060ea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68da      	ldr	r2, [r3, #12]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f042 0204 	orr.w	r2, r2, #4
 80060bc:	60da      	str	r2, [r3, #12]
      break;
 80060be:	e014      	b.n	80060ea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68da      	ldr	r2, [r3, #12]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f042 0208 	orr.w	r2, r2, #8
 80060ce:	60da      	str	r2, [r3, #12]
      break;
 80060d0:	e00b      	b.n	80060ea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68da      	ldr	r2, [r3, #12]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f042 0210 	orr.w	r2, r2, #16
 80060e0:	60da      	str	r2, [r3, #12]
      break;
 80060e2:	e002      	b.n	80060ea <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	73fb      	strb	r3, [r7, #15]
      break;
 80060e8:	bf00      	nop
  }

  if (status == HAL_OK)
 80060ea:	7bfb      	ldrb	r3, [r7, #15]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d148      	bne.n	8006182 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2201      	movs	r2, #1
 80060f6:	6839      	ldr	r1, [r7, #0]
 80060f8:	4618      	mov	r0, r3
 80060fa:	f000 ffb3 	bl	8007064 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a22      	ldr	r2, [pc, #136]	@ (800618c <HAL_TIM_IC_Start_IT+0x234>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d022      	beq.n	800614e <HAL_TIM_IC_Start_IT+0x1f6>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006110:	d01d      	beq.n	800614e <HAL_TIM_IC_Start_IT+0x1f6>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a1e      	ldr	r2, [pc, #120]	@ (8006190 <HAL_TIM_IC_Start_IT+0x238>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d018      	beq.n	800614e <HAL_TIM_IC_Start_IT+0x1f6>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a1c      	ldr	r2, [pc, #112]	@ (8006194 <HAL_TIM_IC_Start_IT+0x23c>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d013      	beq.n	800614e <HAL_TIM_IC_Start_IT+0x1f6>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a1b      	ldr	r2, [pc, #108]	@ (8006198 <HAL_TIM_IC_Start_IT+0x240>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d00e      	beq.n	800614e <HAL_TIM_IC_Start_IT+0x1f6>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a19      	ldr	r2, [pc, #100]	@ (800619c <HAL_TIM_IC_Start_IT+0x244>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d009      	beq.n	800614e <HAL_TIM_IC_Start_IT+0x1f6>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a18      	ldr	r2, [pc, #96]	@ (80061a0 <HAL_TIM_IC_Start_IT+0x248>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d004      	beq.n	800614e <HAL_TIM_IC_Start_IT+0x1f6>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a16      	ldr	r2, [pc, #88]	@ (80061a4 <HAL_TIM_IC_Start_IT+0x24c>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d111      	bne.n	8006172 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f003 0307 	and.w	r3, r3, #7
 8006158:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	2b06      	cmp	r3, #6
 800615e:	d010      	beq.n	8006182 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f042 0201 	orr.w	r2, r2, #1
 800616e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006170:	e007      	b.n	8006182 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f042 0201 	orr.w	r2, r2, #1
 8006180:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006182:	7bfb      	ldrb	r3, [r7, #15]
}
 8006184:	4618      	mov	r0, r3
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	40010000 	.word	0x40010000
 8006190:	40000400 	.word	0x40000400
 8006194:	40000800 	.word	0x40000800
 8006198:	40000c00 	.word	0x40000c00
 800619c:	40010400 	.word	0x40010400
 80061a0:	40014000 	.word	0x40014000
 80061a4:	40001800 	.word	0x40001800

080061a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	f003 0302 	and.w	r3, r3, #2
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d020      	beq.n	800620c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f003 0302 	and.w	r3, r3, #2
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d01b      	beq.n	800620c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f06f 0202 	mvn.w	r2, #2
 80061dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2201      	movs	r2, #1
 80061e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	f003 0303 	and.w	r3, r3, #3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d003      	beq.n	80061fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f7fb fac2 	bl	800177c <HAL_TIM_IC_CaptureCallback>
 80061f8:	e005      	b.n	8006206 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 faf3 	bl	80067e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 fafa 	bl	80067fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	f003 0304 	and.w	r3, r3, #4
 8006212:	2b00      	cmp	r3, #0
 8006214:	d020      	beq.n	8006258 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f003 0304 	and.w	r3, r3, #4
 800621c:	2b00      	cmp	r3, #0
 800621e:	d01b      	beq.n	8006258 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f06f 0204 	mvn.w	r2, #4
 8006228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2202      	movs	r2, #2
 800622e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7fb fa9c 	bl	800177c <HAL_TIM_IC_CaptureCallback>
 8006244:	e005      	b.n	8006252 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 facd 	bl	80067e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 fad4 	bl	80067fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	f003 0308 	and.w	r3, r3, #8
 800625e:	2b00      	cmp	r3, #0
 8006260:	d020      	beq.n	80062a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f003 0308 	and.w	r3, r3, #8
 8006268:	2b00      	cmp	r3, #0
 800626a:	d01b      	beq.n	80062a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f06f 0208 	mvn.w	r2, #8
 8006274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2204      	movs	r2, #4
 800627a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	69db      	ldr	r3, [r3, #28]
 8006282:	f003 0303 	and.w	r3, r3, #3
 8006286:	2b00      	cmp	r3, #0
 8006288:	d003      	beq.n	8006292 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f7fb fa76 	bl	800177c <HAL_TIM_IC_CaptureCallback>
 8006290:	e005      	b.n	800629e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 faa7 	bl	80067e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 faae 	bl	80067fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	f003 0310 	and.w	r3, r3, #16
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d020      	beq.n	80062f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f003 0310 	and.w	r3, r3, #16
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d01b      	beq.n	80062f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f06f 0210 	mvn.w	r2, #16
 80062c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2208      	movs	r2, #8
 80062c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d003      	beq.n	80062de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f7fb fa50 	bl	800177c <HAL_TIM_IC_CaptureCallback>
 80062dc:	e005      	b.n	80062ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 fa81 	bl	80067e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 fa88 	bl	80067fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	f003 0301 	and.w	r3, r3, #1
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00c      	beq.n	8006314 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f003 0301 	and.w	r3, r3, #1
 8006300:	2b00      	cmp	r3, #0
 8006302:	d007      	beq.n	8006314 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f06f 0201 	mvn.w	r2, #1
 800630c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 fa5f 	bl	80067d2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00c      	beq.n	8006338 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006324:	2b00      	cmp	r3, #0
 8006326:	d007      	beq.n	8006338 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f001 f84e 	bl	80073d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00c      	beq.n	800635c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006348:	2b00      	cmp	r3, #0
 800634a:	d007      	beq.n	800635c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 fa59 	bl	800680e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	f003 0320 	and.w	r3, r3, #32
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00c      	beq.n	8006380 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f003 0320 	and.w	r3, r3, #32
 800636c:	2b00      	cmp	r3, #0
 800636e:	d007      	beq.n	8006380 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f06f 0220 	mvn.w	r2, #32
 8006378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f001 f820 	bl	80073c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006380:	bf00      	nop
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b086      	sub	sp, #24
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006394:	2300      	movs	r3, #0
 8006396:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d101      	bne.n	80063a6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80063a2:	2302      	movs	r3, #2
 80063a4:	e088      	b.n	80064b8 <HAL_TIM_IC_ConfigChannel+0x130>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2201      	movs	r2, #1
 80063aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d11b      	bne.n	80063ec <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80063c4:	f000 fc8a 	bl	8006cdc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	699a      	ldr	r2, [r3, #24]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f022 020c 	bic.w	r2, r2, #12
 80063d6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6999      	ldr	r1, [r3, #24]
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	689a      	ldr	r2, [r3, #8]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	430a      	orrs	r2, r1
 80063e8:	619a      	str	r2, [r3, #24]
 80063ea:	e060      	b.n	80064ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b04      	cmp	r3, #4
 80063f0:	d11c      	bne.n	800642c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006402:	f000 fd0e 	bl	8006e22 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	699a      	ldr	r2, [r3, #24]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006414:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	6999      	ldr	r1, [r3, #24]
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	021a      	lsls	r2, r3, #8
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	430a      	orrs	r2, r1
 8006428:	619a      	str	r2, [r3, #24]
 800642a:	e040      	b.n	80064ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2b08      	cmp	r3, #8
 8006430:	d11b      	bne.n	800646a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006442:	f000 fd5b 	bl	8006efc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	69da      	ldr	r2, [r3, #28]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f022 020c 	bic.w	r2, r2, #12
 8006454:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	69d9      	ldr	r1, [r3, #28]
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	689a      	ldr	r2, [r3, #8]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	430a      	orrs	r2, r1
 8006466:	61da      	str	r2, [r3, #28]
 8006468:	e021      	b.n	80064ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2b0c      	cmp	r3, #12
 800646e:	d11c      	bne.n	80064aa <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006480:	f000 fd78 	bl	8006f74 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	69da      	ldr	r2, [r3, #28]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006492:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	69d9      	ldr	r1, [r3, #28]
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	021a      	lsls	r2, r3, #8
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	430a      	orrs	r2, r1
 80064a6:	61da      	str	r2, [r3, #28]
 80064a8:	e001      	b.n	80064ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80064b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3718      	adds	r7, #24
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b086      	sub	sp, #24
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064cc:	2300      	movs	r3, #0
 80064ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d101      	bne.n	80064de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80064da:	2302      	movs	r3, #2
 80064dc:	e0ae      	b.n	800663c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2201      	movs	r2, #1
 80064e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2b0c      	cmp	r3, #12
 80064ea:	f200 809f 	bhi.w	800662c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80064ee:	a201      	add	r2, pc, #4	@ (adr r2, 80064f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80064f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f4:	08006529 	.word	0x08006529
 80064f8:	0800662d 	.word	0x0800662d
 80064fc:	0800662d 	.word	0x0800662d
 8006500:	0800662d 	.word	0x0800662d
 8006504:	08006569 	.word	0x08006569
 8006508:	0800662d 	.word	0x0800662d
 800650c:	0800662d 	.word	0x0800662d
 8006510:	0800662d 	.word	0x0800662d
 8006514:	080065ab 	.word	0x080065ab
 8006518:	0800662d 	.word	0x0800662d
 800651c:	0800662d 	.word	0x0800662d
 8006520:	0800662d 	.word	0x0800662d
 8006524:	080065eb 	.word	0x080065eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68b9      	ldr	r1, [r7, #8]
 800652e:	4618      	mov	r0, r3
 8006530:	f000 fa24 	bl	800697c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	699a      	ldr	r2, [r3, #24]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f042 0208 	orr.w	r2, r2, #8
 8006542:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	699a      	ldr	r2, [r3, #24]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f022 0204 	bic.w	r2, r2, #4
 8006552:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	6999      	ldr	r1, [r3, #24]
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	691a      	ldr	r2, [r3, #16]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	430a      	orrs	r2, r1
 8006564:	619a      	str	r2, [r3, #24]
      break;
 8006566:	e064      	b.n	8006632 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68b9      	ldr	r1, [r7, #8]
 800656e:	4618      	mov	r0, r3
 8006570:	f000 fa74 	bl	8006a5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	699a      	ldr	r2, [r3, #24]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006582:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	699a      	ldr	r2, [r3, #24]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006592:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6999      	ldr	r1, [r3, #24]
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	021a      	lsls	r2, r3, #8
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	430a      	orrs	r2, r1
 80065a6:	619a      	str	r2, [r3, #24]
      break;
 80065a8:	e043      	b.n	8006632 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68b9      	ldr	r1, [r7, #8]
 80065b0:	4618      	mov	r0, r3
 80065b2:	f000 fac9 	bl	8006b48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	69da      	ldr	r2, [r3, #28]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f042 0208 	orr.w	r2, r2, #8
 80065c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	69da      	ldr	r2, [r3, #28]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f022 0204 	bic.w	r2, r2, #4
 80065d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	69d9      	ldr	r1, [r3, #28]
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	691a      	ldr	r2, [r3, #16]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	430a      	orrs	r2, r1
 80065e6:	61da      	str	r2, [r3, #28]
      break;
 80065e8:	e023      	b.n	8006632 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68b9      	ldr	r1, [r7, #8]
 80065f0:	4618      	mov	r0, r3
 80065f2:	f000 fb1d 	bl	8006c30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	69da      	ldr	r2, [r3, #28]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006604:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	69da      	ldr	r2, [r3, #28]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006614:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	69d9      	ldr	r1, [r3, #28]
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	021a      	lsls	r2, r3, #8
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	430a      	orrs	r2, r1
 8006628:	61da      	str	r2, [r3, #28]
      break;
 800662a:	e002      	b.n	8006632 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	75fb      	strb	r3, [r7, #23]
      break;
 8006630:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800663a:	7dfb      	ldrb	r3, [r7, #23]
}
 800663c:	4618      	mov	r0, r3
 800663e:	3718      	adds	r7, #24
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800664e:	2300      	movs	r3, #0
 8006650:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006658:	2b01      	cmp	r3, #1
 800665a:	d101      	bne.n	8006660 <HAL_TIM_ConfigClockSource+0x1c>
 800665c:	2302      	movs	r3, #2
 800665e:	e0b4      	b.n	80067ca <HAL_TIM_ConfigClockSource+0x186>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2202      	movs	r2, #2
 800666c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800667e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006686:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68ba      	ldr	r2, [r7, #8]
 800668e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006698:	d03e      	beq.n	8006718 <HAL_TIM_ConfigClockSource+0xd4>
 800669a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800669e:	f200 8087 	bhi.w	80067b0 <HAL_TIM_ConfigClockSource+0x16c>
 80066a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066a6:	f000 8086 	beq.w	80067b6 <HAL_TIM_ConfigClockSource+0x172>
 80066aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066ae:	d87f      	bhi.n	80067b0 <HAL_TIM_ConfigClockSource+0x16c>
 80066b0:	2b70      	cmp	r3, #112	@ 0x70
 80066b2:	d01a      	beq.n	80066ea <HAL_TIM_ConfigClockSource+0xa6>
 80066b4:	2b70      	cmp	r3, #112	@ 0x70
 80066b6:	d87b      	bhi.n	80067b0 <HAL_TIM_ConfigClockSource+0x16c>
 80066b8:	2b60      	cmp	r3, #96	@ 0x60
 80066ba:	d050      	beq.n	800675e <HAL_TIM_ConfigClockSource+0x11a>
 80066bc:	2b60      	cmp	r3, #96	@ 0x60
 80066be:	d877      	bhi.n	80067b0 <HAL_TIM_ConfigClockSource+0x16c>
 80066c0:	2b50      	cmp	r3, #80	@ 0x50
 80066c2:	d03c      	beq.n	800673e <HAL_TIM_ConfigClockSource+0xfa>
 80066c4:	2b50      	cmp	r3, #80	@ 0x50
 80066c6:	d873      	bhi.n	80067b0 <HAL_TIM_ConfigClockSource+0x16c>
 80066c8:	2b40      	cmp	r3, #64	@ 0x40
 80066ca:	d058      	beq.n	800677e <HAL_TIM_ConfigClockSource+0x13a>
 80066cc:	2b40      	cmp	r3, #64	@ 0x40
 80066ce:	d86f      	bhi.n	80067b0 <HAL_TIM_ConfigClockSource+0x16c>
 80066d0:	2b30      	cmp	r3, #48	@ 0x30
 80066d2:	d064      	beq.n	800679e <HAL_TIM_ConfigClockSource+0x15a>
 80066d4:	2b30      	cmp	r3, #48	@ 0x30
 80066d6:	d86b      	bhi.n	80067b0 <HAL_TIM_ConfigClockSource+0x16c>
 80066d8:	2b20      	cmp	r3, #32
 80066da:	d060      	beq.n	800679e <HAL_TIM_ConfigClockSource+0x15a>
 80066dc:	2b20      	cmp	r3, #32
 80066de:	d867      	bhi.n	80067b0 <HAL_TIM_ConfigClockSource+0x16c>
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d05c      	beq.n	800679e <HAL_TIM_ConfigClockSource+0x15a>
 80066e4:	2b10      	cmp	r3, #16
 80066e6:	d05a      	beq.n	800679e <HAL_TIM_ConfigClockSource+0x15a>
 80066e8:	e062      	b.n	80067b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066fa:	f000 fc93 	bl	8007024 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800670c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68ba      	ldr	r2, [r7, #8]
 8006714:	609a      	str	r2, [r3, #8]
      break;
 8006716:	e04f      	b.n	80067b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006728:	f000 fc7c 	bl	8007024 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	689a      	ldr	r2, [r3, #8]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800673a:	609a      	str	r2, [r3, #8]
      break;
 800673c:	e03c      	b.n	80067b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800674a:	461a      	mov	r2, r3
 800674c:	f000 fb3a 	bl	8006dc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2150      	movs	r1, #80	@ 0x50
 8006756:	4618      	mov	r0, r3
 8006758:	f000 fc49 	bl	8006fee <TIM_ITRx_SetConfig>
      break;
 800675c:	e02c      	b.n	80067b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800676a:	461a      	mov	r2, r3
 800676c:	f000 fb96 	bl	8006e9c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2160      	movs	r1, #96	@ 0x60
 8006776:	4618      	mov	r0, r3
 8006778:	f000 fc39 	bl	8006fee <TIM_ITRx_SetConfig>
      break;
 800677c:	e01c      	b.n	80067b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800678a:	461a      	mov	r2, r3
 800678c:	f000 fb1a 	bl	8006dc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2140      	movs	r1, #64	@ 0x40
 8006796:	4618      	mov	r0, r3
 8006798:	f000 fc29 	bl	8006fee <TIM_ITRx_SetConfig>
      break;
 800679c:	e00c      	b.n	80067b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4619      	mov	r1, r3
 80067a8:	4610      	mov	r0, r2
 80067aa:	f000 fc20 	bl	8006fee <TIM_ITRx_SetConfig>
      break;
 80067ae:	e003      	b.n	80067b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	73fb      	strb	r3, [r7, #15]
      break;
 80067b4:	e000      	b.n	80067b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80067b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80067c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067d2:	b480      	push	{r7}
 80067d4:	b083      	sub	sp, #12
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80067da:	bf00      	nop
 80067dc:	370c      	adds	r7, #12
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr

080067e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067e6:	b480      	push	{r7}
 80067e8:	b083      	sub	sp, #12
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067ee:	bf00      	nop
 80067f0:	370c      	adds	r7, #12
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr

080067fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067fa:	b480      	push	{r7}
 80067fc:	b083      	sub	sp, #12
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006802:	bf00      	nop
 8006804:	370c      	adds	r7, #12
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr

0800680e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800680e:	b480      	push	{r7}
 8006810:	b083      	sub	sp, #12
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006816:	bf00      	nop
 8006818:	370c      	adds	r7, #12
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
	...

08006824 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a46      	ldr	r2, [pc, #280]	@ (8006950 <TIM_Base_SetConfig+0x12c>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d013      	beq.n	8006864 <TIM_Base_SetConfig+0x40>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006842:	d00f      	beq.n	8006864 <TIM_Base_SetConfig+0x40>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a43      	ldr	r2, [pc, #268]	@ (8006954 <TIM_Base_SetConfig+0x130>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d00b      	beq.n	8006864 <TIM_Base_SetConfig+0x40>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a42      	ldr	r2, [pc, #264]	@ (8006958 <TIM_Base_SetConfig+0x134>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d007      	beq.n	8006864 <TIM_Base_SetConfig+0x40>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a41      	ldr	r2, [pc, #260]	@ (800695c <TIM_Base_SetConfig+0x138>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d003      	beq.n	8006864 <TIM_Base_SetConfig+0x40>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a40      	ldr	r2, [pc, #256]	@ (8006960 <TIM_Base_SetConfig+0x13c>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d108      	bne.n	8006876 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800686a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	4313      	orrs	r3, r2
 8006874:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a35      	ldr	r2, [pc, #212]	@ (8006950 <TIM_Base_SetConfig+0x12c>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d02b      	beq.n	80068d6 <TIM_Base_SetConfig+0xb2>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006884:	d027      	beq.n	80068d6 <TIM_Base_SetConfig+0xb2>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a32      	ldr	r2, [pc, #200]	@ (8006954 <TIM_Base_SetConfig+0x130>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d023      	beq.n	80068d6 <TIM_Base_SetConfig+0xb2>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a31      	ldr	r2, [pc, #196]	@ (8006958 <TIM_Base_SetConfig+0x134>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d01f      	beq.n	80068d6 <TIM_Base_SetConfig+0xb2>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a30      	ldr	r2, [pc, #192]	@ (800695c <TIM_Base_SetConfig+0x138>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d01b      	beq.n	80068d6 <TIM_Base_SetConfig+0xb2>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a2f      	ldr	r2, [pc, #188]	@ (8006960 <TIM_Base_SetConfig+0x13c>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d017      	beq.n	80068d6 <TIM_Base_SetConfig+0xb2>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a2e      	ldr	r2, [pc, #184]	@ (8006964 <TIM_Base_SetConfig+0x140>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d013      	beq.n	80068d6 <TIM_Base_SetConfig+0xb2>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a2d      	ldr	r2, [pc, #180]	@ (8006968 <TIM_Base_SetConfig+0x144>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d00f      	beq.n	80068d6 <TIM_Base_SetConfig+0xb2>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a2c      	ldr	r2, [pc, #176]	@ (800696c <TIM_Base_SetConfig+0x148>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d00b      	beq.n	80068d6 <TIM_Base_SetConfig+0xb2>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a2b      	ldr	r2, [pc, #172]	@ (8006970 <TIM_Base_SetConfig+0x14c>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d007      	beq.n	80068d6 <TIM_Base_SetConfig+0xb2>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a2a      	ldr	r2, [pc, #168]	@ (8006974 <TIM_Base_SetConfig+0x150>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d003      	beq.n	80068d6 <TIM_Base_SetConfig+0xb2>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a29      	ldr	r2, [pc, #164]	@ (8006978 <TIM_Base_SetConfig+0x154>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d108      	bne.n	80068e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	695b      	ldr	r3, [r3, #20]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	689a      	ldr	r2, [r3, #8]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a10      	ldr	r2, [pc, #64]	@ (8006950 <TIM_Base_SetConfig+0x12c>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d003      	beq.n	800691c <TIM_Base_SetConfig+0xf8>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a12      	ldr	r2, [pc, #72]	@ (8006960 <TIM_Base_SetConfig+0x13c>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d103      	bne.n	8006924 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	691a      	ldr	r2, [r3, #16]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	f003 0301 	and.w	r3, r3, #1
 8006932:	2b01      	cmp	r3, #1
 8006934:	d105      	bne.n	8006942 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	f023 0201 	bic.w	r2, r3, #1
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	611a      	str	r2, [r3, #16]
  }
}
 8006942:	bf00      	nop
 8006944:	3714      	adds	r7, #20
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	40010000 	.word	0x40010000
 8006954:	40000400 	.word	0x40000400
 8006958:	40000800 	.word	0x40000800
 800695c:	40000c00 	.word	0x40000c00
 8006960:	40010400 	.word	0x40010400
 8006964:	40014000 	.word	0x40014000
 8006968:	40014400 	.word	0x40014400
 800696c:	40014800 	.word	0x40014800
 8006970:	40001800 	.word	0x40001800
 8006974:	40001c00 	.word	0x40001c00
 8006978:	40002000 	.word	0x40002000

0800697c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800697c:	b480      	push	{r7}
 800697e:	b087      	sub	sp, #28
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a1b      	ldr	r3, [r3, #32]
 800698a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6a1b      	ldr	r3, [r3, #32]
 8006990:	f023 0201 	bic.w	r2, r3, #1
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	699b      	ldr	r3, [r3, #24]
 80069a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f023 0303 	bic.w	r3, r3, #3
 80069b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	f023 0302 	bic.w	r3, r3, #2
 80069c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	697a      	ldr	r2, [r7, #20]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a20      	ldr	r2, [pc, #128]	@ (8006a54 <TIM_OC1_SetConfig+0xd8>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d003      	beq.n	80069e0 <TIM_OC1_SetConfig+0x64>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a1f      	ldr	r2, [pc, #124]	@ (8006a58 <TIM_OC1_SetConfig+0xdc>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d10c      	bne.n	80069fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	f023 0308 	bic.w	r3, r3, #8
 80069e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	697a      	ldr	r2, [r7, #20]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	f023 0304 	bic.w	r3, r3, #4
 80069f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a15      	ldr	r2, [pc, #84]	@ (8006a54 <TIM_OC1_SetConfig+0xd8>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d003      	beq.n	8006a0a <TIM_OC1_SetConfig+0x8e>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a14      	ldr	r2, [pc, #80]	@ (8006a58 <TIM_OC1_SetConfig+0xdc>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d111      	bne.n	8006a2e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006a18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	685a      	ldr	r2, [r3, #4]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	621a      	str	r2, [r3, #32]
}
 8006a48:	bf00      	nop
 8006a4a:	371c      	adds	r7, #28
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr
 8006a54:	40010000 	.word	0x40010000
 8006a58:	40010400 	.word	0x40010400

08006a5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b087      	sub	sp, #28
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a1b      	ldr	r3, [r3, #32]
 8006a6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6a1b      	ldr	r3, [r3, #32]
 8006a70:	f023 0210 	bic.w	r2, r3, #16
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	021b      	lsls	r3, r3, #8
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	f023 0320 	bic.w	r3, r3, #32
 8006aa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	011b      	lsls	r3, r3, #4
 8006aae:	697a      	ldr	r2, [r7, #20]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a22      	ldr	r2, [pc, #136]	@ (8006b40 <TIM_OC2_SetConfig+0xe4>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d003      	beq.n	8006ac4 <TIM_OC2_SetConfig+0x68>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a21      	ldr	r2, [pc, #132]	@ (8006b44 <TIM_OC2_SetConfig+0xe8>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d10d      	bne.n	8006ae0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006aca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	011b      	lsls	r3, r3, #4
 8006ad2:	697a      	ldr	r2, [r7, #20]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ade:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a17      	ldr	r2, [pc, #92]	@ (8006b40 <TIM_OC2_SetConfig+0xe4>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d003      	beq.n	8006af0 <TIM_OC2_SetConfig+0x94>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a16      	ldr	r2, [pc, #88]	@ (8006b44 <TIM_OC2_SetConfig+0xe8>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d113      	bne.n	8006b18 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006af6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006afe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	695b      	ldr	r3, [r3, #20]
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	693a      	ldr	r2, [r7, #16]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	699b      	ldr	r3, [r3, #24]
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	693a      	ldr	r2, [r7, #16]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	685a      	ldr	r2, [r3, #4]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	697a      	ldr	r2, [r7, #20]
 8006b30:	621a      	str	r2, [r3, #32]
}
 8006b32:	bf00      	nop
 8006b34:	371c      	adds	r7, #28
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	40010000 	.word	0x40010000
 8006b44:	40010400 	.word	0x40010400

08006b48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b087      	sub	sp, #28
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6a1b      	ldr	r3, [r3, #32]
 8006b5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	69db      	ldr	r3, [r3, #28]
 8006b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f023 0303 	bic.w	r3, r3, #3
 8006b7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006b90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	021b      	lsls	r3, r3, #8
 8006b98:	697a      	ldr	r2, [r7, #20]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a21      	ldr	r2, [pc, #132]	@ (8006c28 <TIM_OC3_SetConfig+0xe0>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d003      	beq.n	8006bae <TIM_OC3_SetConfig+0x66>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a20      	ldr	r2, [pc, #128]	@ (8006c2c <TIM_OC3_SetConfig+0xe4>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d10d      	bne.n	8006bca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006bb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	021b      	lsls	r3, r3, #8
 8006bbc:	697a      	ldr	r2, [r7, #20]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006bc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a16      	ldr	r2, [pc, #88]	@ (8006c28 <TIM_OC3_SetConfig+0xe0>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d003      	beq.n	8006bda <TIM_OC3_SetConfig+0x92>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a15      	ldr	r2, [pc, #84]	@ (8006c2c <TIM_OC3_SetConfig+0xe4>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d113      	bne.n	8006c02 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006be0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006be8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	011b      	lsls	r3, r3, #4
 8006bf0:	693a      	ldr	r2, [r7, #16]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	011b      	lsls	r3, r3, #4
 8006bfc:	693a      	ldr	r2, [r7, #16]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	685a      	ldr	r2, [r3, #4]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	697a      	ldr	r2, [r7, #20]
 8006c1a:	621a      	str	r2, [r3, #32]
}
 8006c1c:	bf00      	nop
 8006c1e:	371c      	adds	r7, #28
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr
 8006c28:	40010000 	.word	0x40010000
 8006c2c:	40010400 	.word	0x40010400

08006c30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b087      	sub	sp, #28
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6a1b      	ldr	r3, [r3, #32]
 8006c44:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	69db      	ldr	r3, [r3, #28]
 8006c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	021b      	lsls	r3, r3, #8
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	031b      	lsls	r3, r3, #12
 8006c82:	693a      	ldr	r2, [r7, #16]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a12      	ldr	r2, [pc, #72]	@ (8006cd4 <TIM_OC4_SetConfig+0xa4>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d003      	beq.n	8006c98 <TIM_OC4_SetConfig+0x68>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a11      	ldr	r2, [pc, #68]	@ (8006cd8 <TIM_OC4_SetConfig+0xa8>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d109      	bne.n	8006cac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	695b      	ldr	r3, [r3, #20]
 8006ca4:	019b      	lsls	r3, r3, #6
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	697a      	ldr	r2, [r7, #20]
 8006cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	685a      	ldr	r2, [r3, #4]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	621a      	str	r2, [r3, #32]
}
 8006cc6:	bf00      	nop
 8006cc8:	371c      	adds	r7, #28
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	40010000 	.word	0x40010000
 8006cd8:	40010400 	.word	0x40010400

08006cdc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b087      	sub	sp, #28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
 8006ce8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6a1b      	ldr	r3, [r3, #32]
 8006cf4:	f023 0201 	bic.w	r2, r3, #1
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	4a28      	ldr	r2, [pc, #160]	@ (8006da8 <TIM_TI1_SetConfig+0xcc>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d01b      	beq.n	8006d42 <TIM_TI1_SetConfig+0x66>
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d10:	d017      	beq.n	8006d42 <TIM_TI1_SetConfig+0x66>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	4a25      	ldr	r2, [pc, #148]	@ (8006dac <TIM_TI1_SetConfig+0xd0>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d013      	beq.n	8006d42 <TIM_TI1_SetConfig+0x66>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	4a24      	ldr	r2, [pc, #144]	@ (8006db0 <TIM_TI1_SetConfig+0xd4>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d00f      	beq.n	8006d42 <TIM_TI1_SetConfig+0x66>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	4a23      	ldr	r2, [pc, #140]	@ (8006db4 <TIM_TI1_SetConfig+0xd8>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d00b      	beq.n	8006d42 <TIM_TI1_SetConfig+0x66>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	4a22      	ldr	r2, [pc, #136]	@ (8006db8 <TIM_TI1_SetConfig+0xdc>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d007      	beq.n	8006d42 <TIM_TI1_SetConfig+0x66>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	4a21      	ldr	r2, [pc, #132]	@ (8006dbc <TIM_TI1_SetConfig+0xe0>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d003      	beq.n	8006d42 <TIM_TI1_SetConfig+0x66>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	4a20      	ldr	r2, [pc, #128]	@ (8006dc0 <TIM_TI1_SetConfig+0xe4>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d101      	bne.n	8006d46 <TIM_TI1_SetConfig+0x6a>
 8006d42:	2301      	movs	r3, #1
 8006d44:	e000      	b.n	8006d48 <TIM_TI1_SetConfig+0x6c>
 8006d46:	2300      	movs	r3, #0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d008      	beq.n	8006d5e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	f023 0303 	bic.w	r3, r3, #3
 8006d52:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006d54:	697a      	ldr	r2, [r7, #20]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	617b      	str	r3, [r7, #20]
 8006d5c:	e003      	b.n	8006d66 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	f043 0301 	orr.w	r3, r3, #1
 8006d64:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	011b      	lsls	r3, r3, #4
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	697a      	ldr	r2, [r7, #20]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	f023 030a 	bic.w	r3, r3, #10
 8006d80:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	f003 030a 	and.w	r3, r3, #10
 8006d88:	693a      	ldr	r2, [r7, #16]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	693a      	ldr	r2, [r7, #16]
 8006d98:	621a      	str	r2, [r3, #32]
}
 8006d9a:	bf00      	nop
 8006d9c:	371c      	adds	r7, #28
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	40010000 	.word	0x40010000
 8006dac:	40000400 	.word	0x40000400
 8006db0:	40000800 	.word	0x40000800
 8006db4:	40000c00 	.word	0x40000c00
 8006db8:	40010400 	.word	0x40010400
 8006dbc:	40014000 	.word	0x40014000
 8006dc0:	40001800 	.word	0x40001800

08006dc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b087      	sub	sp, #28
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	60b9      	str	r1, [r7, #8]
 8006dce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6a1b      	ldr	r3, [r3, #32]
 8006dd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6a1b      	ldr	r3, [r3, #32]
 8006dda:	f023 0201 	bic.w	r2, r3, #1
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006dee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	011b      	lsls	r3, r3, #4
 8006df4:	693a      	ldr	r2, [r7, #16]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	f023 030a 	bic.w	r3, r3, #10
 8006e00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e02:	697a      	ldr	r2, [r7, #20]
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	621a      	str	r2, [r3, #32]
}
 8006e16:	bf00      	nop
 8006e18:	371c      	adds	r7, #28
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr

08006e22 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e22:	b480      	push	{r7}
 8006e24:	b087      	sub	sp, #28
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	60f8      	str	r0, [r7, #12]
 8006e2a:	60b9      	str	r1, [r7, #8]
 8006e2c:	607a      	str	r2, [r7, #4]
 8006e2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6a1b      	ldr	r3, [r3, #32]
 8006e34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	f023 0210 	bic.w	r2, r3, #16
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	021b      	lsls	r3, r3, #8
 8006e54:	693a      	ldr	r2, [r7, #16]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	031b      	lsls	r3, r3, #12
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	693a      	ldr	r2, [r7, #16]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006e74:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	011b      	lsls	r3, r3, #4
 8006e7a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006e7e:	697a      	ldr	r2, [r7, #20]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	697a      	ldr	r2, [r7, #20]
 8006e8e:	621a      	str	r2, [r3, #32]
}
 8006e90:	bf00      	nop
 8006e92:	371c      	adds	r7, #28
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b087      	sub	sp, #28
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6a1b      	ldr	r3, [r3, #32]
 8006eac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6a1b      	ldr	r3, [r3, #32]
 8006eb2:	f023 0210 	bic.w	r2, r3, #16
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	699b      	ldr	r3, [r3, #24]
 8006ebe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ec6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	031b      	lsls	r3, r3, #12
 8006ecc:	693a      	ldr	r2, [r7, #16]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006ed8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	011b      	lsls	r3, r3, #4
 8006ede:	697a      	ldr	r2, [r7, #20]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	693a      	ldr	r2, [r7, #16]
 8006ee8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	697a      	ldr	r2, [r7, #20]
 8006eee:	621a      	str	r2, [r3, #32]
}
 8006ef0:	bf00      	nop
 8006ef2:	371c      	adds	r7, #28
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
 8006f08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6a1b      	ldr	r3, [r3, #32]
 8006f0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6a1b      	ldr	r3, [r3, #32]
 8006f14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	69db      	ldr	r3, [r3, #28]
 8006f20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	f023 0303 	bic.w	r3, r3, #3
 8006f28:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006f2a:	693a      	ldr	r2, [r7, #16]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f38:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	011b      	lsls	r3, r3, #4
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	693a      	ldr	r2, [r7, #16]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006f4c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	021b      	lsls	r3, r3, #8
 8006f52:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006f56:	697a      	ldr	r2, [r7, #20]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	693a      	ldr	r2, [r7, #16]
 8006f60:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	697a      	ldr	r2, [r7, #20]
 8006f66:	621a      	str	r2, [r3, #32]
}
 8006f68:	bf00      	nop
 8006f6a:	371c      	adds	r7, #28
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b087      	sub	sp, #28
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	607a      	str	r2, [r7, #4]
 8006f80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6a1b      	ldr	r3, [r3, #32]
 8006f8c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	69db      	ldr	r3, [r3, #28]
 8006f98:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fa0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	021b      	lsls	r3, r3, #8
 8006fa6:	693a      	ldr	r2, [r7, #16]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006fb2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	031b      	lsls	r3, r3, #12
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	693a      	ldr	r2, [r7, #16]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006fc6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	031b      	lsls	r3, r3, #12
 8006fcc:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006fd0:	697a      	ldr	r2, [r7, #20]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	693a      	ldr	r2, [r7, #16]
 8006fda:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	697a      	ldr	r2, [r7, #20]
 8006fe0:	621a      	str	r2, [r3, #32]
}
 8006fe2:	bf00      	nop
 8006fe4:	371c      	adds	r7, #28
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr

08006fee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006fee:	b480      	push	{r7}
 8006ff0:	b085      	sub	sp, #20
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
 8006ff6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007004:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007006:	683a      	ldr	r2, [r7, #0]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	4313      	orrs	r3, r2
 800700c:	f043 0307 	orr.w	r3, r3, #7
 8007010:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	609a      	str	r2, [r3, #8]
}
 8007018:	bf00      	nop
 800701a:	3714      	adds	r7, #20
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007024:	b480      	push	{r7}
 8007026:	b087      	sub	sp, #28
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	607a      	str	r2, [r7, #4]
 8007030:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800703e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	021a      	lsls	r2, r3, #8
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	431a      	orrs	r2, r3
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	4313      	orrs	r3, r2
 800704c:	697a      	ldr	r2, [r7, #20]
 800704e:	4313      	orrs	r3, r2
 8007050:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	697a      	ldr	r2, [r7, #20]
 8007056:	609a      	str	r2, [r3, #8]
}
 8007058:	bf00      	nop
 800705a:	371c      	adds	r7, #28
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007064:	b480      	push	{r7}
 8007066:	b087      	sub	sp, #28
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	f003 031f 	and.w	r3, r3, #31
 8007076:	2201      	movs	r2, #1
 8007078:	fa02 f303 	lsl.w	r3, r2, r3
 800707c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6a1a      	ldr	r2, [r3, #32]
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	43db      	mvns	r3, r3
 8007086:	401a      	ands	r2, r3
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6a1a      	ldr	r2, [r3, #32]
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	f003 031f 	and.w	r3, r3, #31
 8007096:	6879      	ldr	r1, [r7, #4]
 8007098:	fa01 f303 	lsl.w	r3, r1, r3
 800709c:	431a      	orrs	r2, r3
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	621a      	str	r2, [r3, #32]
}
 80070a2:	bf00      	nop
 80070a4:	371c      	adds	r7, #28
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr
	...

080070b0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d109      	bne.n	80070d4 <HAL_TIMEx_PWMN_Start+0x24>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	bf14      	ite	ne
 80070cc:	2301      	movne	r3, #1
 80070ce:	2300      	moveq	r3, #0
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	e022      	b.n	800711a <HAL_TIMEx_PWMN_Start+0x6a>
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	2b04      	cmp	r3, #4
 80070d8:	d109      	bne.n	80070ee <HAL_TIMEx_PWMN_Start+0x3e>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	bf14      	ite	ne
 80070e6:	2301      	movne	r3, #1
 80070e8:	2300      	moveq	r3, #0
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	e015      	b.n	800711a <HAL_TIMEx_PWMN_Start+0x6a>
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	2b08      	cmp	r3, #8
 80070f2:	d109      	bne.n	8007108 <HAL_TIMEx_PWMN_Start+0x58>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	bf14      	ite	ne
 8007100:	2301      	movne	r3, #1
 8007102:	2300      	moveq	r3, #0
 8007104:	b2db      	uxtb	r3, r3
 8007106:	e008      	b.n	800711a <HAL_TIMEx_PWMN_Start+0x6a>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800710e:	b2db      	uxtb	r3, r3
 8007110:	2b01      	cmp	r3, #1
 8007112:	bf14      	ite	ne
 8007114:	2301      	movne	r3, #1
 8007116:	2300      	moveq	r3, #0
 8007118:	b2db      	uxtb	r3, r3
 800711a:	2b00      	cmp	r3, #0
 800711c:	d001      	beq.n	8007122 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e06d      	b.n	80071fe <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d104      	bne.n	8007132 <HAL_TIMEx_PWMN_Start+0x82>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2202      	movs	r2, #2
 800712c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007130:	e013      	b.n	800715a <HAL_TIMEx_PWMN_Start+0xaa>
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	2b04      	cmp	r3, #4
 8007136:	d104      	bne.n	8007142 <HAL_TIMEx_PWMN_Start+0x92>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2202      	movs	r2, #2
 800713c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007140:	e00b      	b.n	800715a <HAL_TIMEx_PWMN_Start+0xaa>
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	2b08      	cmp	r3, #8
 8007146:	d104      	bne.n	8007152 <HAL_TIMEx_PWMN_Start+0xa2>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2202      	movs	r2, #2
 800714c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007150:	e003      	b.n	800715a <HAL_TIMEx_PWMN_Start+0xaa>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2202      	movs	r2, #2
 8007156:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2204      	movs	r2, #4
 8007160:	6839      	ldr	r1, [r7, #0]
 8007162:	4618      	mov	r0, r3
 8007164:	f000 f940 	bl	80073e8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007176:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a22      	ldr	r2, [pc, #136]	@ (8007208 <HAL_TIMEx_PWMN_Start+0x158>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d022      	beq.n	80071c8 <HAL_TIMEx_PWMN_Start+0x118>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800718a:	d01d      	beq.n	80071c8 <HAL_TIMEx_PWMN_Start+0x118>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a1e      	ldr	r2, [pc, #120]	@ (800720c <HAL_TIMEx_PWMN_Start+0x15c>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d018      	beq.n	80071c8 <HAL_TIMEx_PWMN_Start+0x118>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a1d      	ldr	r2, [pc, #116]	@ (8007210 <HAL_TIMEx_PWMN_Start+0x160>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d013      	beq.n	80071c8 <HAL_TIMEx_PWMN_Start+0x118>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a1b      	ldr	r2, [pc, #108]	@ (8007214 <HAL_TIMEx_PWMN_Start+0x164>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d00e      	beq.n	80071c8 <HAL_TIMEx_PWMN_Start+0x118>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a1a      	ldr	r2, [pc, #104]	@ (8007218 <HAL_TIMEx_PWMN_Start+0x168>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d009      	beq.n	80071c8 <HAL_TIMEx_PWMN_Start+0x118>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a18      	ldr	r2, [pc, #96]	@ (800721c <HAL_TIMEx_PWMN_Start+0x16c>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d004      	beq.n	80071c8 <HAL_TIMEx_PWMN_Start+0x118>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a17      	ldr	r2, [pc, #92]	@ (8007220 <HAL_TIMEx_PWMN_Start+0x170>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d111      	bne.n	80071ec <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	f003 0307 	and.w	r3, r3, #7
 80071d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2b06      	cmp	r3, #6
 80071d8:	d010      	beq.n	80071fc <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f042 0201 	orr.w	r2, r2, #1
 80071e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071ea:	e007      	b.n	80071fc <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f042 0201 	orr.w	r2, r2, #1
 80071fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3710      	adds	r7, #16
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	40010000 	.word	0x40010000
 800720c:	40000400 	.word	0x40000400
 8007210:	40000800 	.word	0x40000800
 8007214:	40000c00 	.word	0x40000c00
 8007218:	40010400 	.word	0x40010400
 800721c:	40014000 	.word	0x40014000
 8007220:	40001800 	.word	0x40001800

08007224 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007234:	2b01      	cmp	r3, #1
 8007236:	d101      	bne.n	800723c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007238:	2302      	movs	r3, #2
 800723a:	e05a      	b.n	80072f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2202      	movs	r2, #2
 8007248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007262:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	4313      	orrs	r3, r2
 800726c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a21      	ldr	r2, [pc, #132]	@ (8007300 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d022      	beq.n	80072c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007288:	d01d      	beq.n	80072c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a1d      	ldr	r2, [pc, #116]	@ (8007304 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d018      	beq.n	80072c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a1b      	ldr	r2, [pc, #108]	@ (8007308 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d013      	beq.n	80072c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a1a      	ldr	r2, [pc, #104]	@ (800730c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d00e      	beq.n	80072c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a18      	ldr	r2, [pc, #96]	@ (8007310 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d009      	beq.n	80072c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a17      	ldr	r2, [pc, #92]	@ (8007314 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d004      	beq.n	80072c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a15      	ldr	r2, [pc, #84]	@ (8007318 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d10c      	bne.n	80072e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	68ba      	ldr	r2, [r7, #8]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3714      	adds	r7, #20
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr
 80072fe:	bf00      	nop
 8007300:	40010000 	.word	0x40010000
 8007304:	40000400 	.word	0x40000400
 8007308:	40000800 	.word	0x40000800
 800730c:	40000c00 	.word	0x40000c00
 8007310:	40010400 	.word	0x40010400
 8007314:	40014000 	.word	0x40014000
 8007318:	40001800 	.word	0x40001800

0800731c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007326:	2300      	movs	r3, #0
 8007328:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007330:	2b01      	cmp	r3, #1
 8007332:	d101      	bne.n	8007338 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007334:	2302      	movs	r3, #2
 8007336:	e03d      	b.n	80073b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	4313      	orrs	r3, r2
 800734c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	4313      	orrs	r3, r2
 800735a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	4313      	orrs	r3, r2
 8007368:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4313      	orrs	r3, r2
 8007376:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	4313      	orrs	r3, r2
 8007384:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	695b      	ldr	r3, [r3, #20]
 8007390:	4313      	orrs	r3, r2
 8007392:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	69db      	ldr	r3, [r3, #28]
 800739e:	4313      	orrs	r3, r2
 80073a0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3714      	adds	r7, #20
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80073c8:	bf00      	nop
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073dc:	bf00      	nop
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b087      	sub	sp, #28
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	f003 030f 	and.w	r3, r3, #15
 80073fa:	2204      	movs	r2, #4
 80073fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007400:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6a1a      	ldr	r2, [r3, #32]
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	43db      	mvns	r3, r3
 800740a:	401a      	ands	r2, r3
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6a1a      	ldr	r2, [r3, #32]
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	f003 030f 	and.w	r3, r3, #15
 800741a:	6879      	ldr	r1, [r7, #4]
 800741c:	fa01 f303 	lsl.w	r3, r1, r3
 8007420:	431a      	orrs	r2, r3
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	621a      	str	r2, [r3, #32]
}
 8007426:	bf00      	nop
 8007428:	371c      	adds	r7, #28
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr

08007432 <powf>:
 8007432:	b508      	push	{r3, lr}
 8007434:	ed2d 8b04 	vpush	{d8-d9}
 8007438:	eeb0 8a60 	vmov.f32	s16, s1
 800743c:	eeb0 9a40 	vmov.f32	s18, s0
 8007440:	f000 f858 	bl	80074f4 <__ieee754_powf>
 8007444:	eeb4 8a48 	vcmp.f32	s16, s16
 8007448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800744c:	eef0 8a40 	vmov.f32	s17, s0
 8007450:	d63e      	bvs.n	80074d0 <powf+0x9e>
 8007452:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8007456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800745a:	d112      	bne.n	8007482 <powf+0x50>
 800745c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007464:	d039      	beq.n	80074da <powf+0xa8>
 8007466:	eeb0 0a48 	vmov.f32	s0, s16
 800746a:	f000 f839 	bl	80074e0 <finitef>
 800746e:	b378      	cbz	r0, 80074d0 <powf+0x9e>
 8007470:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007478:	d52a      	bpl.n	80074d0 <powf+0x9e>
 800747a:	f000 fbab 	bl	8007bd4 <__errno>
 800747e:	2322      	movs	r3, #34	@ 0x22
 8007480:	e014      	b.n	80074ac <powf+0x7a>
 8007482:	f000 f82d 	bl	80074e0 <finitef>
 8007486:	b998      	cbnz	r0, 80074b0 <powf+0x7e>
 8007488:	eeb0 0a49 	vmov.f32	s0, s18
 800748c:	f000 f828 	bl	80074e0 <finitef>
 8007490:	b170      	cbz	r0, 80074b0 <powf+0x7e>
 8007492:	eeb0 0a48 	vmov.f32	s0, s16
 8007496:	f000 f823 	bl	80074e0 <finitef>
 800749a:	b148      	cbz	r0, 80074b0 <powf+0x7e>
 800749c:	eef4 8a68 	vcmp.f32	s17, s17
 80074a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074a4:	d7e9      	bvc.n	800747a <powf+0x48>
 80074a6:	f000 fb95 	bl	8007bd4 <__errno>
 80074aa:	2321      	movs	r3, #33	@ 0x21
 80074ac:	6003      	str	r3, [r0, #0]
 80074ae:	e00f      	b.n	80074d0 <powf+0x9e>
 80074b0:	eef5 8a40 	vcmp.f32	s17, #0.0
 80074b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074b8:	d10a      	bne.n	80074d0 <powf+0x9e>
 80074ba:	eeb0 0a49 	vmov.f32	s0, s18
 80074be:	f000 f80f 	bl	80074e0 <finitef>
 80074c2:	b128      	cbz	r0, 80074d0 <powf+0x9e>
 80074c4:	eeb0 0a48 	vmov.f32	s0, s16
 80074c8:	f000 f80a 	bl	80074e0 <finitef>
 80074cc:	2800      	cmp	r0, #0
 80074ce:	d1d4      	bne.n	800747a <powf+0x48>
 80074d0:	eeb0 0a68 	vmov.f32	s0, s17
 80074d4:	ecbd 8b04 	vpop	{d8-d9}
 80074d8:	bd08      	pop	{r3, pc}
 80074da:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80074de:	e7f7      	b.n	80074d0 <powf+0x9e>

080074e0 <finitef>:
 80074e0:	ee10 3a10 	vmov	r3, s0
 80074e4:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80074e8:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80074ec:	bfac      	ite	ge
 80074ee:	2000      	movge	r0, #0
 80074f0:	2001      	movlt	r0, #1
 80074f2:	4770      	bx	lr

080074f4 <__ieee754_powf>:
 80074f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074f8:	ee10 4a90 	vmov	r4, s1
 80074fc:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8007500:	ed2d 8b02 	vpush	{d8}
 8007504:	ee10 6a10 	vmov	r6, s0
 8007508:	eeb0 8a40 	vmov.f32	s16, s0
 800750c:	eef0 8a60 	vmov.f32	s17, s1
 8007510:	d10c      	bne.n	800752c <__ieee754_powf+0x38>
 8007512:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8007516:	0076      	lsls	r6, r6, #1
 8007518:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800751c:	f240 829c 	bls.w	8007a58 <__ieee754_powf+0x564>
 8007520:	ee38 0a28 	vadd.f32	s0, s16, s17
 8007524:	ecbd 8b02 	vpop	{d8}
 8007528:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800752c:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8007530:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8007534:	d802      	bhi.n	800753c <__ieee754_powf+0x48>
 8007536:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800753a:	d908      	bls.n	800754e <__ieee754_powf+0x5a>
 800753c:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8007540:	d1ee      	bne.n	8007520 <__ieee754_powf+0x2c>
 8007542:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8007546:	0064      	lsls	r4, r4, #1
 8007548:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800754c:	e7e6      	b.n	800751c <__ieee754_powf+0x28>
 800754e:	2e00      	cmp	r6, #0
 8007550:	da1e      	bge.n	8007590 <__ieee754_powf+0x9c>
 8007552:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8007556:	d22b      	bcs.n	80075b0 <__ieee754_powf+0xbc>
 8007558:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800755c:	d332      	bcc.n	80075c4 <__ieee754_powf+0xd0>
 800755e:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8007562:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8007566:	fa49 f503 	asr.w	r5, r9, r3
 800756a:	fa05 f303 	lsl.w	r3, r5, r3
 800756e:	454b      	cmp	r3, r9
 8007570:	d126      	bne.n	80075c0 <__ieee754_powf+0xcc>
 8007572:	f005 0501 	and.w	r5, r5, #1
 8007576:	f1c5 0502 	rsb	r5, r5, #2
 800757a:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800757e:	d122      	bne.n	80075c6 <__ieee754_powf+0xd2>
 8007580:	2c00      	cmp	r4, #0
 8007582:	f280 826f 	bge.w	8007a64 <__ieee754_powf+0x570>
 8007586:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800758a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800758e:	e7c9      	b.n	8007524 <__ieee754_powf+0x30>
 8007590:	2500      	movs	r5, #0
 8007592:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8007596:	d1f0      	bne.n	800757a <__ieee754_powf+0x86>
 8007598:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800759c:	f000 825c 	beq.w	8007a58 <__ieee754_powf+0x564>
 80075a0:	d908      	bls.n	80075b4 <__ieee754_powf+0xc0>
 80075a2:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 8007904 <__ieee754_powf+0x410>
 80075a6:	2c00      	cmp	r4, #0
 80075a8:	bfa8      	it	ge
 80075aa:	eeb0 0a68 	vmovge.f32	s0, s17
 80075ae:	e7b9      	b.n	8007524 <__ieee754_powf+0x30>
 80075b0:	2502      	movs	r5, #2
 80075b2:	e7ee      	b.n	8007592 <__ieee754_powf+0x9e>
 80075b4:	2c00      	cmp	r4, #0
 80075b6:	f280 8252 	bge.w	8007a5e <__ieee754_powf+0x56a>
 80075ba:	eeb1 0a68 	vneg.f32	s0, s17
 80075be:	e7b1      	b.n	8007524 <__ieee754_powf+0x30>
 80075c0:	2500      	movs	r5, #0
 80075c2:	e7da      	b.n	800757a <__ieee754_powf+0x86>
 80075c4:	2500      	movs	r5, #0
 80075c6:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80075ca:	d102      	bne.n	80075d2 <__ieee754_powf+0xde>
 80075cc:	ee28 0a08 	vmul.f32	s0, s16, s16
 80075d0:	e7a8      	b.n	8007524 <__ieee754_powf+0x30>
 80075d2:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80075d6:	d109      	bne.n	80075ec <__ieee754_powf+0xf8>
 80075d8:	2e00      	cmp	r6, #0
 80075da:	db07      	blt.n	80075ec <__ieee754_powf+0xf8>
 80075dc:	eeb0 0a48 	vmov.f32	s0, s16
 80075e0:	ecbd 8b02 	vpop	{d8}
 80075e4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075e8:	f000 bae8 	b.w	8007bbc <__ieee754_sqrtf>
 80075ec:	eeb0 0a48 	vmov.f32	s0, s16
 80075f0:	f000 fa50 	bl	8007a94 <fabsf>
 80075f4:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 80075f8:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 80075fc:	4647      	mov	r7, r8
 80075fe:	d002      	beq.n	8007606 <__ieee754_powf+0x112>
 8007600:	f1b8 0f00 	cmp.w	r8, #0
 8007604:	d117      	bne.n	8007636 <__ieee754_powf+0x142>
 8007606:	2c00      	cmp	r4, #0
 8007608:	bfbc      	itt	lt
 800760a:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800760e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8007612:	2e00      	cmp	r6, #0
 8007614:	da86      	bge.n	8007524 <__ieee754_powf+0x30>
 8007616:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800761a:	ea58 0805 	orrs.w	r8, r8, r5
 800761e:	d104      	bne.n	800762a <__ieee754_powf+0x136>
 8007620:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007624:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8007628:	e77c      	b.n	8007524 <__ieee754_powf+0x30>
 800762a:	2d01      	cmp	r5, #1
 800762c:	f47f af7a 	bne.w	8007524 <__ieee754_powf+0x30>
 8007630:	eeb1 0a40 	vneg.f32	s0, s0
 8007634:	e776      	b.n	8007524 <__ieee754_powf+0x30>
 8007636:	0ff0      	lsrs	r0, r6, #31
 8007638:	3801      	subs	r0, #1
 800763a:	ea55 0300 	orrs.w	r3, r5, r0
 800763e:	d104      	bne.n	800764a <__ieee754_powf+0x156>
 8007640:	ee38 8a48 	vsub.f32	s16, s16, s16
 8007644:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8007648:	e76c      	b.n	8007524 <__ieee754_powf+0x30>
 800764a:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800764e:	d973      	bls.n	8007738 <__ieee754_powf+0x244>
 8007650:	4bad      	ldr	r3, [pc, #692]	@ (8007908 <__ieee754_powf+0x414>)
 8007652:	4598      	cmp	r8, r3
 8007654:	d808      	bhi.n	8007668 <__ieee754_powf+0x174>
 8007656:	2c00      	cmp	r4, #0
 8007658:	da0b      	bge.n	8007672 <__ieee754_powf+0x17e>
 800765a:	2000      	movs	r0, #0
 800765c:	ecbd 8b02 	vpop	{d8}
 8007660:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007664:	f000 baa4 	b.w	8007bb0 <__math_oflowf>
 8007668:	4ba8      	ldr	r3, [pc, #672]	@ (800790c <__ieee754_powf+0x418>)
 800766a:	4598      	cmp	r8, r3
 800766c:	d908      	bls.n	8007680 <__ieee754_powf+0x18c>
 800766e:	2c00      	cmp	r4, #0
 8007670:	dcf3      	bgt.n	800765a <__ieee754_powf+0x166>
 8007672:	2000      	movs	r0, #0
 8007674:	ecbd 8b02 	vpop	{d8}
 8007678:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800767c:	f000 ba92 	b.w	8007ba4 <__math_uflowf>
 8007680:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8007684:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007688:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8007910 <__ieee754_powf+0x41c>
 800768c:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8007690:	eee0 6a67 	vfms.f32	s13, s0, s15
 8007694:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8007698:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800769c:	ee20 7a00 	vmul.f32	s14, s0, s0
 80076a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80076a4:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 8007914 <__ieee754_powf+0x420>
 80076a8:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80076ac:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8007918 <__ieee754_powf+0x424>
 80076b0:	eee0 7a07 	vfma.f32	s15, s0, s14
 80076b4:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800791c <__ieee754_powf+0x428>
 80076b8:	eef0 6a67 	vmov.f32	s13, s15
 80076bc:	eee0 6a07 	vfma.f32	s13, s0, s14
 80076c0:	ee16 3a90 	vmov	r3, s13
 80076c4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80076c8:	f023 030f 	bic.w	r3, r3, #15
 80076cc:	ee06 3a90 	vmov	s13, r3
 80076d0:	eee0 6a47 	vfms.f32	s13, s0, s14
 80076d4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80076d8:	3d01      	subs	r5, #1
 80076da:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 80076de:	4305      	orrs	r5, r0
 80076e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80076e4:	f024 040f 	bic.w	r4, r4, #15
 80076e8:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 80076ec:	bf18      	it	ne
 80076ee:	eeb0 8a47 	vmovne.f32	s16, s14
 80076f2:	ee07 4a10 	vmov	s14, r4
 80076f6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80076fa:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80076fe:	ee07 3a90 	vmov	s15, r3
 8007702:	eee7 0a27 	vfma.f32	s1, s14, s15
 8007706:	ee07 4a10 	vmov	s14, r4
 800770a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800770e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8007712:	ee17 1a10 	vmov	r1, s14
 8007716:	2900      	cmp	r1, #0
 8007718:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800771c:	f340 80dd 	ble.w	80078da <__ieee754_powf+0x3e6>
 8007720:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8007724:	f240 80ca 	bls.w	80078bc <__ieee754_powf+0x3c8>
 8007728:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800772c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007730:	bf4c      	ite	mi
 8007732:	2001      	movmi	r0, #1
 8007734:	2000      	movpl	r0, #0
 8007736:	e791      	b.n	800765c <__ieee754_powf+0x168>
 8007738:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800773c:	bf01      	itttt	eq
 800773e:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8007920 <__ieee754_powf+0x42c>
 8007742:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8007746:	f06f 0317 	mvneq.w	r3, #23
 800774a:	ee17 7a90 	vmoveq	r7, s15
 800774e:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8007752:	bf18      	it	ne
 8007754:	2300      	movne	r3, #0
 8007756:	3a7f      	subs	r2, #127	@ 0x7f
 8007758:	441a      	add	r2, r3
 800775a:	4b72      	ldr	r3, [pc, #456]	@ (8007924 <__ieee754_powf+0x430>)
 800775c:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8007760:	429f      	cmp	r7, r3
 8007762:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8007766:	dd06      	ble.n	8007776 <__ieee754_powf+0x282>
 8007768:	4b6f      	ldr	r3, [pc, #444]	@ (8007928 <__ieee754_powf+0x434>)
 800776a:	429f      	cmp	r7, r3
 800776c:	f340 80a4 	ble.w	80078b8 <__ieee754_powf+0x3c4>
 8007770:	3201      	adds	r2, #1
 8007772:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8007776:	2600      	movs	r6, #0
 8007778:	4b6c      	ldr	r3, [pc, #432]	@ (800792c <__ieee754_powf+0x438>)
 800777a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800777e:	ee07 1a10 	vmov	s14, r1
 8007782:	edd3 5a00 	vldr	s11, [r3]
 8007786:	4b6a      	ldr	r3, [pc, #424]	@ (8007930 <__ieee754_powf+0x43c>)
 8007788:	ee75 7a87 	vadd.f32	s15, s11, s14
 800778c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007790:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8007794:	1049      	asrs	r1, r1, #1
 8007796:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800779a:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800779e:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 80077a2:	ee37 6a65 	vsub.f32	s12, s14, s11
 80077a6:	ee07 1a90 	vmov	s15, r1
 80077aa:	ee26 5a24 	vmul.f32	s10, s12, s9
 80077ae:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80077b2:	ee15 7a10 	vmov	r7, s10
 80077b6:	401f      	ands	r7, r3
 80077b8:	ee06 7a90 	vmov	s13, r7
 80077bc:	eea6 6ae7 	vfms.f32	s12, s13, s15
 80077c0:	ee37 7a65 	vsub.f32	s14, s14, s11
 80077c4:	ee65 7a05 	vmul.f32	s15, s10, s10
 80077c8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80077cc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8007934 <__ieee754_powf+0x440>
 80077d0:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8007938 <__ieee754_powf+0x444>
 80077d4:	eee7 5a87 	vfma.f32	s11, s15, s14
 80077d8:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800793c <__ieee754_powf+0x448>
 80077dc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80077e0:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8007910 <__ieee754_powf+0x41c>
 80077e4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80077e8:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8007940 <__ieee754_powf+0x44c>
 80077ec:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80077f0:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8007944 <__ieee754_powf+0x450>
 80077f4:	ee26 6a24 	vmul.f32	s12, s12, s9
 80077f8:	eee7 5a27 	vfma.f32	s11, s14, s15
 80077fc:	ee35 7a26 	vadd.f32	s14, s10, s13
 8007800:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8007804:	ee27 7a06 	vmul.f32	s14, s14, s12
 8007808:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800780c:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8007810:	eef0 5a67 	vmov.f32	s11, s15
 8007814:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8007818:	ee75 5a87 	vadd.f32	s11, s11, s14
 800781c:	ee15 1a90 	vmov	r1, s11
 8007820:	4019      	ands	r1, r3
 8007822:	ee05 1a90 	vmov	s11, r1
 8007826:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800782a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800782e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007832:	ee67 7a85 	vmul.f32	s15, s15, s10
 8007836:	eee6 7a25 	vfma.f32	s15, s12, s11
 800783a:	eeb0 6a67 	vmov.f32	s12, s15
 800783e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8007842:	ee16 1a10 	vmov	r1, s12
 8007846:	4019      	ands	r1, r3
 8007848:	ee06 1a10 	vmov	s12, r1
 800784c:	eeb0 7a46 	vmov.f32	s14, s12
 8007850:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8007854:	493c      	ldr	r1, [pc, #240]	@ (8007948 <__ieee754_powf+0x454>)
 8007856:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800785a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800785e:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800794c <__ieee754_powf+0x458>
 8007862:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8007950 <__ieee754_powf+0x45c>
 8007866:	ee67 7a87 	vmul.f32	s15, s15, s14
 800786a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8007954 <__ieee754_powf+0x460>
 800786e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007872:	ed91 7a00 	vldr	s14, [r1]
 8007876:	ee77 7a87 	vadd.f32	s15, s15, s14
 800787a:	ee07 2a10 	vmov	s14, r2
 800787e:	eef0 6a67 	vmov.f32	s13, s15
 8007882:	4a35      	ldr	r2, [pc, #212]	@ (8007958 <__ieee754_powf+0x464>)
 8007884:	eee6 6a25 	vfma.f32	s13, s12, s11
 8007888:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800788c:	ed92 5a00 	vldr	s10, [r2]
 8007890:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007894:	ee76 6a85 	vadd.f32	s13, s13, s10
 8007898:	ee76 6a87 	vadd.f32	s13, s13, s14
 800789c:	ee16 2a90 	vmov	r2, s13
 80078a0:	4013      	ands	r3, r2
 80078a2:	ee06 3a90 	vmov	s13, r3
 80078a6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80078aa:	ee37 7a45 	vsub.f32	s14, s14, s10
 80078ae:	eea6 7a65 	vfms.f32	s14, s12, s11
 80078b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80078b6:	e70f      	b.n	80076d8 <__ieee754_powf+0x1e4>
 80078b8:	2601      	movs	r6, #1
 80078ba:	e75d      	b.n	8007778 <__ieee754_powf+0x284>
 80078bc:	d152      	bne.n	8007964 <__ieee754_powf+0x470>
 80078be:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800795c <__ieee754_powf+0x468>
 80078c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80078c6:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80078ca:	eef4 6ac7 	vcmpe.f32	s13, s14
 80078ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078d2:	f73f af29 	bgt.w	8007728 <__ieee754_powf+0x234>
 80078d6:	2386      	movs	r3, #134	@ 0x86
 80078d8:	e048      	b.n	800796c <__ieee754_powf+0x478>
 80078da:	4a21      	ldr	r2, [pc, #132]	@ (8007960 <__ieee754_powf+0x46c>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d907      	bls.n	80078f0 <__ieee754_powf+0x3fc>
 80078e0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80078e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078e8:	bf4c      	ite	mi
 80078ea:	2001      	movmi	r0, #1
 80078ec:	2000      	movpl	r0, #0
 80078ee:	e6c1      	b.n	8007674 <__ieee754_powf+0x180>
 80078f0:	d138      	bne.n	8007964 <__ieee754_powf+0x470>
 80078f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80078f6:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80078fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078fe:	dbea      	blt.n	80078d6 <__ieee754_powf+0x3e2>
 8007900:	e7ee      	b.n	80078e0 <__ieee754_powf+0x3ec>
 8007902:	bf00      	nop
 8007904:	00000000 	.word	0x00000000
 8007908:	3f7ffff3 	.word	0x3f7ffff3
 800790c:	3f800007 	.word	0x3f800007
 8007910:	3eaaaaab 	.word	0x3eaaaaab
 8007914:	3fb8aa3b 	.word	0x3fb8aa3b
 8007918:	36eca570 	.word	0x36eca570
 800791c:	3fb8aa00 	.word	0x3fb8aa00
 8007920:	4b800000 	.word	0x4b800000
 8007924:	001cc471 	.word	0x001cc471
 8007928:	005db3d6 	.word	0x005db3d6
 800792c:	08007c68 	.word	0x08007c68
 8007930:	fffff000 	.word	0xfffff000
 8007934:	3e6c3255 	.word	0x3e6c3255
 8007938:	3e53f142 	.word	0x3e53f142
 800793c:	3e8ba305 	.word	0x3e8ba305
 8007940:	3edb6db7 	.word	0x3edb6db7
 8007944:	3f19999a 	.word	0x3f19999a
 8007948:	08007c58 	.word	0x08007c58
 800794c:	3f76384f 	.word	0x3f76384f
 8007950:	3f763800 	.word	0x3f763800
 8007954:	369dc3a0 	.word	0x369dc3a0
 8007958:	08007c60 	.word	0x08007c60
 800795c:	3338aa3c 	.word	0x3338aa3c
 8007960:	43160000 	.word	0x43160000
 8007964:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8007968:	d971      	bls.n	8007a4e <__ieee754_powf+0x55a>
 800796a:	15db      	asrs	r3, r3, #23
 800796c:	3b7e      	subs	r3, #126	@ 0x7e
 800796e:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8007972:	4118      	asrs	r0, r3
 8007974:	4408      	add	r0, r1
 8007976:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800797a:	4a3c      	ldr	r2, [pc, #240]	@ (8007a6c <__ieee754_powf+0x578>)
 800797c:	3b7f      	subs	r3, #127	@ 0x7f
 800797e:	411a      	asrs	r2, r3
 8007980:	4002      	ands	r2, r0
 8007982:	ee07 2a10 	vmov	s14, r2
 8007986:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800798a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800798e:	f1c3 0317 	rsb	r3, r3, #23
 8007992:	4118      	asrs	r0, r3
 8007994:	2900      	cmp	r1, #0
 8007996:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800799a:	bfb8      	it	lt
 800799c:	4240      	neglt	r0, r0
 800799e:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80079a2:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8007a70 <__ieee754_powf+0x57c>
 80079a6:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 8007a74 <__ieee754_powf+0x580>
 80079aa:	ee17 3a10 	vmov	r3, s14
 80079ae:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80079b2:	f023 030f 	bic.w	r3, r3, #15
 80079b6:	ee07 3a10 	vmov	s14, r3
 80079ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80079be:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80079c2:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80079c6:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 8007a78 <__ieee754_powf+0x584>
 80079ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079ce:	eee0 7aa6 	vfma.f32	s15, s1, s13
 80079d2:	eef0 6a67 	vmov.f32	s13, s15
 80079d6:	eee7 6a06 	vfma.f32	s13, s14, s12
 80079da:	eef0 5a66 	vmov.f32	s11, s13
 80079de:	eee7 5a46 	vfms.f32	s11, s14, s12
 80079e2:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80079e6:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80079ea:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 8007a7c <__ieee754_powf+0x588>
 80079ee:	eddf 5a24 	vldr	s11, [pc, #144]	@ 8007a80 <__ieee754_powf+0x58c>
 80079f2:	eea7 6a25 	vfma.f32	s12, s14, s11
 80079f6:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8007a84 <__ieee754_powf+0x590>
 80079fa:	eee6 5a07 	vfma.f32	s11, s12, s14
 80079fe:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8007a88 <__ieee754_powf+0x594>
 8007a02:	eea5 6a87 	vfma.f32	s12, s11, s14
 8007a06:	eddf 5a21 	vldr	s11, [pc, #132]	@ 8007a8c <__ieee754_powf+0x598>
 8007a0a:	eee6 5a07 	vfma.f32	s11, s12, s14
 8007a0e:	eeb0 6a66 	vmov.f32	s12, s13
 8007a12:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8007a16:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8007a1a:	ee66 5a86 	vmul.f32	s11, s13, s12
 8007a1e:	ee36 6a47 	vsub.f32	s12, s12, s14
 8007a22:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8007a26:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8007a2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a2e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007a32:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007a36:	ee10 3a10 	vmov	r3, s0
 8007a3a:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8007a3e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007a42:	da06      	bge.n	8007a52 <__ieee754_powf+0x55e>
 8007a44:	f000 f82e 	bl	8007aa4 <scalbnf>
 8007a48:	ee20 0a08 	vmul.f32	s0, s0, s16
 8007a4c:	e56a      	b.n	8007524 <__ieee754_powf+0x30>
 8007a4e:	2000      	movs	r0, #0
 8007a50:	e7a5      	b.n	800799e <__ieee754_powf+0x4aa>
 8007a52:	ee00 3a10 	vmov	s0, r3
 8007a56:	e7f7      	b.n	8007a48 <__ieee754_powf+0x554>
 8007a58:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007a5c:	e562      	b.n	8007524 <__ieee754_powf+0x30>
 8007a5e:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8007a90 <__ieee754_powf+0x59c>
 8007a62:	e55f      	b.n	8007524 <__ieee754_powf+0x30>
 8007a64:	eeb0 0a48 	vmov.f32	s0, s16
 8007a68:	e55c      	b.n	8007524 <__ieee754_powf+0x30>
 8007a6a:	bf00      	nop
 8007a6c:	ff800000 	.word	0xff800000
 8007a70:	3f317218 	.word	0x3f317218
 8007a74:	3f317200 	.word	0x3f317200
 8007a78:	35bfbe8c 	.word	0x35bfbe8c
 8007a7c:	b5ddea0e 	.word	0xb5ddea0e
 8007a80:	3331bb4c 	.word	0x3331bb4c
 8007a84:	388ab355 	.word	0x388ab355
 8007a88:	bb360b61 	.word	0xbb360b61
 8007a8c:	3e2aaaab 	.word	0x3e2aaaab
 8007a90:	00000000 	.word	0x00000000

08007a94 <fabsf>:
 8007a94:	ee10 3a10 	vmov	r3, s0
 8007a98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a9c:	ee00 3a10 	vmov	s0, r3
 8007aa0:	4770      	bx	lr
	...

08007aa4 <scalbnf>:
 8007aa4:	ee10 3a10 	vmov	r3, s0
 8007aa8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8007aac:	d02b      	beq.n	8007b06 <scalbnf+0x62>
 8007aae:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8007ab2:	d302      	bcc.n	8007aba <scalbnf+0x16>
 8007ab4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007ab8:	4770      	bx	lr
 8007aba:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8007abe:	d123      	bne.n	8007b08 <scalbnf+0x64>
 8007ac0:	4b24      	ldr	r3, [pc, #144]	@ (8007b54 <scalbnf+0xb0>)
 8007ac2:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8007b58 <scalbnf+0xb4>
 8007ac6:	4298      	cmp	r0, r3
 8007ac8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007acc:	db17      	blt.n	8007afe <scalbnf+0x5a>
 8007ace:	ee10 3a10 	vmov	r3, s0
 8007ad2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007ad6:	3a19      	subs	r2, #25
 8007ad8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8007adc:	4288      	cmp	r0, r1
 8007ade:	dd15      	ble.n	8007b0c <scalbnf+0x68>
 8007ae0:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8007b5c <scalbnf+0xb8>
 8007ae4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8007b60 <scalbnf+0xbc>
 8007ae8:	ee10 3a10 	vmov	r3, s0
 8007aec:	eeb0 7a67 	vmov.f32	s14, s15
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	bfb8      	it	lt
 8007af4:	eef0 7a66 	vmovlt.f32	s15, s13
 8007af8:	ee27 0a87 	vmul.f32	s0, s15, s14
 8007afc:	4770      	bx	lr
 8007afe:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8007b64 <scalbnf+0xc0>
 8007b02:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007b06:	4770      	bx	lr
 8007b08:	0dd2      	lsrs	r2, r2, #23
 8007b0a:	e7e5      	b.n	8007ad8 <scalbnf+0x34>
 8007b0c:	4410      	add	r0, r2
 8007b0e:	28fe      	cmp	r0, #254	@ 0xfe
 8007b10:	dce6      	bgt.n	8007ae0 <scalbnf+0x3c>
 8007b12:	2800      	cmp	r0, #0
 8007b14:	dd06      	ble.n	8007b24 <scalbnf+0x80>
 8007b16:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007b1a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8007b1e:	ee00 3a10 	vmov	s0, r3
 8007b22:	4770      	bx	lr
 8007b24:	f110 0f16 	cmn.w	r0, #22
 8007b28:	da09      	bge.n	8007b3e <scalbnf+0x9a>
 8007b2a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8007b64 <scalbnf+0xc0>
 8007b2e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8007b68 <scalbnf+0xc4>
 8007b32:	ee10 3a10 	vmov	r3, s0
 8007b36:	eeb0 7a67 	vmov.f32	s14, s15
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	e7d9      	b.n	8007af2 <scalbnf+0x4e>
 8007b3e:	3019      	adds	r0, #25
 8007b40:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007b44:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8007b48:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8007b6c <scalbnf+0xc8>
 8007b4c:	ee07 3a90 	vmov	s15, r3
 8007b50:	e7d7      	b.n	8007b02 <scalbnf+0x5e>
 8007b52:	bf00      	nop
 8007b54:	ffff3cb0 	.word	0xffff3cb0
 8007b58:	4c000000 	.word	0x4c000000
 8007b5c:	7149f2ca 	.word	0x7149f2ca
 8007b60:	f149f2ca 	.word	0xf149f2ca
 8007b64:	0da24260 	.word	0x0da24260
 8007b68:	8da24260 	.word	0x8da24260
 8007b6c:	33000000 	.word	0x33000000

08007b70 <with_errnof>:
 8007b70:	b510      	push	{r4, lr}
 8007b72:	ed2d 8b02 	vpush	{d8}
 8007b76:	eeb0 8a40 	vmov.f32	s16, s0
 8007b7a:	4604      	mov	r4, r0
 8007b7c:	f000 f82a 	bl	8007bd4 <__errno>
 8007b80:	eeb0 0a48 	vmov.f32	s0, s16
 8007b84:	ecbd 8b02 	vpop	{d8}
 8007b88:	6004      	str	r4, [r0, #0]
 8007b8a:	bd10      	pop	{r4, pc}

08007b8c <xflowf>:
 8007b8c:	b130      	cbz	r0, 8007b9c <xflowf+0x10>
 8007b8e:	eef1 7a40 	vneg.f32	s15, s0
 8007b92:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007b96:	2022      	movs	r0, #34	@ 0x22
 8007b98:	f7ff bfea 	b.w	8007b70 <with_errnof>
 8007b9c:	eef0 7a40 	vmov.f32	s15, s0
 8007ba0:	e7f7      	b.n	8007b92 <xflowf+0x6>
	...

08007ba4 <__math_uflowf>:
 8007ba4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007bac <__math_uflowf+0x8>
 8007ba8:	f7ff bff0 	b.w	8007b8c <xflowf>
 8007bac:	10000000 	.word	0x10000000

08007bb0 <__math_oflowf>:
 8007bb0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007bb8 <__math_oflowf+0x8>
 8007bb4:	f7ff bfea 	b.w	8007b8c <xflowf>
 8007bb8:	70000000 	.word	0x70000000

08007bbc <__ieee754_sqrtf>:
 8007bbc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007bc0:	4770      	bx	lr

08007bc2 <memset>:
 8007bc2:	4402      	add	r2, r0
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d100      	bne.n	8007bcc <memset+0xa>
 8007bca:	4770      	bx	lr
 8007bcc:	f803 1b01 	strb.w	r1, [r3], #1
 8007bd0:	e7f9      	b.n	8007bc6 <memset+0x4>
	...

08007bd4 <__errno>:
 8007bd4:	4b01      	ldr	r3, [pc, #4]	@ (8007bdc <__errno+0x8>)
 8007bd6:	6818      	ldr	r0, [r3, #0]
 8007bd8:	4770      	bx	lr
 8007bda:	bf00      	nop
 8007bdc:	2000058c 	.word	0x2000058c

08007be0 <__libc_init_array>:
 8007be0:	b570      	push	{r4, r5, r6, lr}
 8007be2:	4d0d      	ldr	r5, [pc, #52]	@ (8007c18 <__libc_init_array+0x38>)
 8007be4:	4c0d      	ldr	r4, [pc, #52]	@ (8007c1c <__libc_init_array+0x3c>)
 8007be6:	1b64      	subs	r4, r4, r5
 8007be8:	10a4      	asrs	r4, r4, #2
 8007bea:	2600      	movs	r6, #0
 8007bec:	42a6      	cmp	r6, r4
 8007bee:	d109      	bne.n	8007c04 <__libc_init_array+0x24>
 8007bf0:	4d0b      	ldr	r5, [pc, #44]	@ (8007c20 <__libc_init_array+0x40>)
 8007bf2:	4c0c      	ldr	r4, [pc, #48]	@ (8007c24 <__libc_init_array+0x44>)
 8007bf4:	f000 f818 	bl	8007c28 <_init>
 8007bf8:	1b64      	subs	r4, r4, r5
 8007bfa:	10a4      	asrs	r4, r4, #2
 8007bfc:	2600      	movs	r6, #0
 8007bfe:	42a6      	cmp	r6, r4
 8007c00:	d105      	bne.n	8007c0e <__libc_init_array+0x2e>
 8007c02:	bd70      	pop	{r4, r5, r6, pc}
 8007c04:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c08:	4798      	blx	r3
 8007c0a:	3601      	adds	r6, #1
 8007c0c:	e7ee      	b.n	8007bec <__libc_init_array+0xc>
 8007c0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c12:	4798      	blx	r3
 8007c14:	3601      	adds	r6, #1
 8007c16:	e7f2      	b.n	8007bfe <__libc_init_array+0x1e>
 8007c18:	08007c78 	.word	0x08007c78
 8007c1c:	08007c78 	.word	0x08007c78
 8007c20:	08007c78 	.word	0x08007c78
 8007c24:	08007c7c 	.word	0x08007c7c

08007c28 <_init>:
 8007c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c2a:	bf00      	nop
 8007c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c2e:	bc08      	pop	{r3}
 8007c30:	469e      	mov	lr, r3
 8007c32:	4770      	bx	lr

08007c34 <_fini>:
 8007c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c36:	bf00      	nop
 8007c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c3a:	bc08      	pop	{r3}
 8007c3c:	469e      	mov	lr, r3
 8007c3e:	4770      	bx	lr
